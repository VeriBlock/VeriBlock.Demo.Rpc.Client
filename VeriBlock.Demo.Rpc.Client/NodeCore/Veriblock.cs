// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: veriblock.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Core {

  /// <summary>Holder for reflection information generated from veriblock.proto</summary>
  public static partial class VeriblockReflection {

    #region Descriptor
    /// <summary>File descriptor for veriblock.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VeriblockReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg92ZXJpYmxvY2sucHJvdG8SBGNvcmUiZwoOQWRkcmVzc0JhbGFuY2USDwoH",
            "YWRkcmVzcxgBIAEoDBIXCg91bmxvY2tlZF9hbW91bnQYAiABKAMSFQoNbG9j",
            "a2VkX2Ftb3VudBgDIAEoAxIUCgx0b3RhbF9hbW91bnQYBCABKAMiKQoGT3V0",
            "cHV0Eg8KB2FkZHJlc3MYASABKAwSDgoGYW1vdW50GAIgASgDIjcKBlBhZ2lu",
            "ZxITCgtwYWdlX251bWJlchgBIAEoBRIYChByZXN1bHRzX3Blcl9wYWdlGAIg",
            "ASgFIt8BCg1OdW1lcmljRmlsdGVyEi4KCG9wZXJhdG9yGAEgASgOMhwuY29y",
            "ZS5OdW1lcmljRmlsdGVyLk9wZXJhdG9yEg0KBXZhbHVlGAIgASgSEhcKD3Nl",
            "Y29uZGFyeV92YWx1ZRgDIAEoEiJ2CghPcGVyYXRvchIJCgVFUVVBTBAAEg0K",
            "CUxFU1NfVEhBThABEhYKEkxFU1NfVEhBTl9PUl9FUVVBTBACEhAKDEdSRUFU",
            "RVJfVEhBThADEhkKFUdSRUFURVJfVEhBTl9PUl9FUVVBTBAEEgsKB0JFVFdF",
            "RU4QBSIpCghFbmRwb2ludBIPCgdhZGRyZXNzGAEgASgJEgwKBHBvcnQYAiAB",
            "KAUiXwoMTXVsdGlzaWdTbG90EhEKCXBvcHVsYXRlZBgBIAEoCBIRCglzaWdu",
            "YXR1cmUYAiABKAwSEgoKcHVibGljX2tleRgDIAEoDBIVCg1vd25lcl9hZGRy",
            "ZXNzGAQgASgMIjMKDk11bHRpc2lnQnVuZGxlEiEKBXNsb3RzGAEgAygLMhIu",
            "Y29yZS5NdWx0aXNpZ1Nsb3QiewoRU2lnbmVkVHJhbnNhY3Rpb24SEQoJc2ln",
            "bmF0dXJlGAEgASgMEhIKCnB1YmxpY19rZXkYAiABKAwSFwoPc2lnbmF0dXJl",
            "X2luZGV4GAMgASgDEiYKC3RyYW5zYWN0aW9uGAQgASgLMhEuY29yZS5UcmFu",
            "c2FjdGlvbiKMAQoZU2lnbmVkTXVsdGlzaWdUcmFuc2FjdGlvbhIuChBzaWdu",
            "YXR1cmVfYnVuZGxlGAEgASgLMhQuY29yZS5NdWx0aXNpZ0J1bmRsZRImCgt0",
            "cmFuc2FjdGlvbhgCIAEoCzIRLmNvcmUuVHJhbnNhY3Rpb24SFwoPc2lnbmF0",
            "dXJlX2luZGV4GAMgASgDIugBChNDb2luYmFzZVRyYW5zYWN0aW9uEhsKE3Bv",
            "d19jb2luYmFzZV9hbW91bnQYASABKAMSGwoTcG9wX2NvaW5iYXNlX2Ftb3Vu",
            "dBgCIAEoAxIVCg1wb3dfZmVlX3NoYXJlGAMgASgDEhUKDXBvcF9mZWVfc2hh",
            "cmUYBCABKAMSIQoLcG93X291dHB1dHMYBSADKAsyDC5jb3JlLk91dHB1dBIh",
            "Cgtwb3Bfb3V0cHV0cxgGIAMoCzIMLmNvcmUuT3V0cHV0EhQKDGJsb2NrX2hl",
            "aWdodBgHIAEoBRINCgV0eF9pZBgIIAEoDCIkChJCaXRjb2luQmxvY2tIZWFk",
            "ZXISDgoGaGVhZGVyGAEgASgMIs0CChJQb1BFbmRvcnNlbWVudEluZm8SFQoN",
            "bWluZXJfYWRkcmVzcxgBIAEoDBIlCh1lbmRvcnNlZF92ZXJpYmxvY2tfYmxv",
            "Y2tfaGFzaBgCIAEoDBIpCiFjb250YWluZWRfaW5fdmVyaWJsb2NrX2Jsb2Nr",
            "X2hhc2gYAyABKAwSFwoPdmVyaWJsb2NrX3R4X2lkGAQgASgMEhsKE2JpdGNv",
            "aW5fdHJhbnNhY3Rpb24YBSABKAwSFQoNYml0Y29pbl90eF9pZBgGIAEoDBIc",
            "ChRiaXRjb2luX2Jsb2NrX2hlYWRlchgHIAEoDBIhChliaXRjb2luX2Jsb2Nr",
            "X2hlYWRlcl9oYXNoGAggASgMEg4KBnJld2FyZBgJIAEoAxIRCglmaW5hbGl6",
            "ZWQYCiABKAgSHQoVZW5kb3JzZWRfYmxvY2tfbnVtYmVyGAsgASgFIisKD1N0",
            "YW5kYXJkQWRkcmVzcxIYChBzdGFuZGFyZF9hZGRyZXNzGAEgASgMIrsBCiJU",
            "cm91Ymxlc2hvb3RQb1BUcmFuc2FjdGlvbnNSZXF1ZXN0EhUKDW9ubHlfZmFp",
            "bHVyZXMYASABKAgSFQoNc2VhcmNoX2xlbmd0aBgCIAEoBRIlCglhZGRyZXNz",
            "ZXMYAyABKAsyEC5jb3JlLkFkZHJlc3NTZXRIABIsCgx0cmFuc2FjdGlvbnMY",
            "BCABKAsyFC5jb3JlLlRyYW5zYWN0aW9uU2V0SABCEgoQc2VhcmNoX3BhcmFt",
            "YXRlciIfCgpBZGRyZXNzU2V0EhEKCWFkZHJlc3NlcxgBIAMoDCIfCg5UcmFu",
            "c2FjdGlvblNldBINCgV0eGlkcxgBIAMoDCKQAQogVHJvdWJsZXNob290UG9Q",
            "VHJhbnNhY3Rpb25zUmVwbHkSDwoHc3VjY2VzcxgBIAEoCBIdCgdyZXN1bHRz",
            "GAIgAygLMgwuY29yZS5SZXN1bHQSPAoRcG9wUHJvYmxlbVJlcG9ydHMYAyAD",
            "KAsyIS5jb3JlLlBvUFRyYW5zYWN0aW9uUHJvYmxlbVJlcG9ydCKXBQobUG9Q",
            "VHJhbnNhY3Rpb25Qcm9ibGVtUmVwb3J0Eg8KB2FkZHJlc3MYASABKAwSDAoE",
            "dHhpZBgCIAEoDBIfChdlbmRvcnNlZF92YmtfYmxvY2tfaGFzaBgDIAEoDBIg",
            "ChhlbmRvcnNlZF92YmtfYmxvY2tfaW5kZXgYBCABKAUSIgoaaW5jbHVkZWRf",
            "aW5fdmJrX2Jsb2NrX2hhc2gYBSABKAwSIwobaW5jbHVkZWRfaW5fdmJrX2Js",
            "b2NrX2luZGV4GAYgASgFEiEKGXBvcF9wYXlvdXRfdmJrX2Jsb2NrX2hhc2gY",
            "ByABKAwSIgoacG9wX3BheW91dF92YmtfYmxvY2tfaW5kZXgYCCABKAUSKAog",
            "cGFpZF9vdXRfaW5fcG9wX3BheW91dF92YmtfYmxvY2sYCSABKAgSHQoVcG9w",
            "X3BheW91dF92YmtfYW1vdW50GAogASgDEhQKDGJpdGNvaW5fdHhpZBgLIAEo",
            "DBIiChppbmNsdWRlZF9pbl9idGNfYmxvY2tfaGFzaBgMIAEoDBIjChtpbmNs",
            "dWRlZF9pbl9idGNfYmxvY2tfaW5kZXgYDSABKAUSKAogZW5kb3JzZWRfdmJr",
            "X2Jsb2NrX2luX21haW5fY2hhaW4YDiABKAgSKwojaW5jbHVkZWRfaW5fdmJr",
            "X2Jsb2NrX2luX21haW5fY2hhaW4YDyABKAgSKwojaW5jbHVkZWRfaW5fYnRj",
            "X2Jsb2NrX2luX21haW5fY2hhaW4YECABKAgSPAo0Zmlyc3RfYnRjX2Jsb2Nr",
            "X29mX2VxdWl2YWxlbnRfcG9wX2VuZG9yc2VtZW50c19pbmRleBgRIAEoBRIc",
            "ChRjdXJyZW50X2Jsb2NrX2hlaWdodBgSIAEoBSJgCh1HZXRQb1BFbmRvcnNl",
            "bWVudHNJbmZvUmVxdWVzdBIVCg1zZWFyY2hfbGVuZ3RoGAEgASgFEigKCWFk",
            "ZHJlc3NlcxgCIAMoCzIVLmNvcmUuU3RhbmRhcmRBZGRyZXNzIoEBChtHZXRQ",
            "b1BFbmRvcnNlbWVudHNJbmZvUmVwbHkSDwoHc3VjY2VzcxgBIAEoCBIdCgdy",
            "ZXN1bHRzGAIgAygLMgwuY29yZS5SZXN1bHQSMgoQcG9wX2VuZG9yc2VtZW50",
            "cxgDIAMoCzIYLmNvcmUuUG9QRW5kb3JzZW1lbnRJbmZvIlIKG0dldFByb3Rl",
            "Y3RlZENoaWxkcmVuUmVxdWVzdBIVCg1zZWFyY2hfbGVuZ3RoGAEgASgFEhwK",
            "FHZlcmlibG9ja19ibG9ja19oYXNoGAIgASgMIn8KGUdldFByb3RlY3RlZENo",
            "aWxkcmVuUmVwbHkSDwoHc3VjY2VzcxgBIAEoCBIdCgdyZXN1bHRzGAIgAygL",
            "MgwuY29yZS5SZXN1bHQSMgoQcG9wX2VuZG9yc2VtZW50cxgDIAMoCzIYLmNv",
            "cmUuUG9QRW5kb3JzZW1lbnRJbmZvIlIKG0dldFByb3RlY3RpbmdQYXJlbnRz",
            "UmVxdWVzdBIVCg1zZWFyY2hfbGVuZ3RoGAEgASgFEhwKFHZlcmlibG9ja19i",
            "bG9ja19oYXNoGAIgASgMIn8KGUdldFByb3RlY3RpbmdQYXJlbnRzUmVwbHkS",
            "DwoHc3VjY2VzcxgBIAEoCBIdCgdyZXN1bHRzGAIgAygLMgwuY29yZS5SZXN1",
            "bHQSMgoQcG9wX2VuZG9yc2VtZW50cxgDIAMoCzIYLmNvcmUuUG9QRW5kb3Jz",
            "ZW1lbnRJbmZvIvQDCgtUcmFuc2FjdGlvbhIkCgR0eXBlGAEgASgOMhYuY29y",
            "ZS5UcmFuc2FjdGlvbi5UeXBlEhYKDnNvdXJjZV9hZGRyZXNzGAIgASgMEhUK",
            "DXNvdXJjZV9hbW91bnQYAyABKAMSHQoHb3V0cHV0cxgEIAMoCzIMLmNvcmUu",
            "T3V0cHV0EhcKD3RyYW5zYWN0aW9uX2ZlZRgFIAEoAxIMCgRkYXRhGAcgASgM",
            "EhsKE2JpdGNvaW5fdHJhbnNhY3Rpb24YCiABKAwSHQoVZW5kb3JzZWRfYmxv",
            "Y2tfaGVhZGVyGAsgASgMEj8KHWJpdGNvaW5fYmxvY2tfaGVhZGVyX29mX3By",
            "b29mGAwgASgLMhguY29yZS5CaXRjb2luQmxvY2tIZWFkZXISEwoLbWVya2xl",
            "X3BhdGgYDSABKAkSPwodY29udGV4dF9iaXRjb2luX2Jsb2NrX2hlYWRlcnMY",
            "DiADKAsyGC5jb3JlLkJpdGNvaW5CbG9ja0hlYWRlchIRCgl0aW1lc3RhbXAY",
            "DyABKAUSDAoEc2l6ZRgQIAEoBRINCgV0eF9pZBgRIAEoDCJHCgRUeXBlEg8K",
            "C1pFUk9fVU5VU0VEEAASDAoIU1RBTkRBUkQQARISCg5QUk9PRl9PRl9QUk9P",
            "RhACEgwKCE1VTFRJU0lHEAMieAokVW5zaWduZWRNdWx0aXNpZ1RyYW5zYWN0",
            "aW9uV2l0aEluZGV4EjcKHHVuc2lnbmVkX211bHRpc2lnX3RhbnNhY3Rpb24Y",
            "ASABKAsyES5jb3JlLlRyYW5zYWN0aW9uEhcKD3NpZ25hdHVyZV9pbmRleBgC",
            "IAEoAyKvAQoQVHJhbnNhY3Rpb25VbmlvbhIlCgh1bnNpZ25lZBgBIAEoCzIR",
            "LmNvcmUuVHJhbnNhY3Rpb25IABIpCgZzaWduZWQYAiABKAsyFy5jb3JlLlNp",
            "Z25lZFRyYW5zYWN0aW9uSAASOgoPc2lnbmVkX211bHRpc2lnGAMgASgLMh8u",
            "Y29yZS5TaWduZWRNdWx0aXNpZ1RyYW5zYWN0aW9uSABCDQoLdHJhbnNhY3Rp",
            "b24i0wEKGVZCS1RyYW5zYWN0aW9uV2l0aENvbnRleHQSKAoLbWVya2xlX3Bh",
            "dGgYASABKAsyEy5jb3JlLlZCS01lcmtsZVBhdGgSNQoSc2lnbmVkX3RyYW5z",
            "YWN0aW9uGAIgASgLMhcuY29yZS5TaWduZWRUcmFuc2FjdGlvbkgAEkYKG3Np",
            "Z25lZF9tdWx0aXNpZ190cmFuc2FjdGlvbhgDIAEoCzIfLmNvcmUuU2lnbmVk",
            "TXVsdGlzaWdUcmFuc2FjdGlvbkgAQg0KC3RyYW5zYWN0aW9uIk8KDVZCS01l",
            "cmtsZVBhdGgSDgoGbGF5ZXJzGAEgAygMEhMKC2JvdHRvbV9kYXRhGAIgASgM",
            "EhkKEWJvdHRvbV9kYXRhX2luZGV4GAMgASgFIswBCg9UcmFuc2FjdGlvbk1l",
            "dGESDQoFdHhfaWQYASABKAwSFAoMYmxvY2tfaGVhZGVyGAIgASgMEhIKCmFw",
            "cGVhcnNfaW4YAyADKAwSFQoNY29uZmlybWF0aW9ucxgEIAEoBRIsCgZzdGF0",
            "dXMYBSABKA4yHC5jb3JlLlRyYW5zYWN0aW9uTWV0YS5TdGF0dXMiOwoGU3Rh",
            "dHVzEgsKB1VOS05PV04QABILCgdQRU5ESU5HEAESDQoJQ09ORklSTUVEEAIS",
            "CAoEREVBRBADIuwCChFXYWxsZXRUcmFuc2FjdGlvbhINCgV0eF9pZBgBIAEo",
            "DBIPCgdhZGRyZXNzGAIgASgMEhEKCXRpbWVzdGFtcBgDIAEoBRIqCgR0eXBl",
            "GAQgASgOMhwuY29yZS5XYWxsZXRUcmFuc2FjdGlvbi5UeXBlEhIKCm5ldF9h",
            "bW91bnQYBSABKBISGwoFaW5wdXQYBiABKAsyDC5jb3JlLk91dHB1dBIdCgdv",
            "dXRwdXRzGAcgAygLMgwuY29yZS5PdXRwdXQSIwoEbWV0YRgIIAEoCzIVLmNv",
            "cmUuVHJhbnNhY3Rpb25NZXRhIoIBCgRUeXBlEgsKB05PVF9TRVQQABIQCgxQ",
            "T1dfQ09JTkJBU0UQARIQCgxQT1BfQ09JTkJBU0UQAhIRCg1CT1RIX0NPSU5C",
            "QVNFEAMSCAoEU0VOVBAEEgwKCFJFQ0VJVkVEEAUSFQoRU0VOVF9BTkRfUkVD",
            "RUlWRUQQBhIHCgNQT1AQByKsAgoMUG9QRGF0YXN0b3JlEhYKDmRhdGFzdG9y",
            "ZV9oYXNoGAEgASgMEicKH2VuZG9yc2VkX3ZlcmlibG9ja19oZWFkZXJzX2hh",
            "c2gYAiABKAwSJgoeZW5kb3JzZWRfYWx0Y2hhaW5faGVhZGVyc19oYXNoGAMg",
            "ASgMElgKHXZlcmlibG9ja19oZWFkZXJfZW5kb3JzZW1lbnRzGAQgAygLMjEu",
            "Y29yZS5CaXRjb2luSGVhZGVyVmVyaUJsb2NrRW5kb3JzZW1lbnRDb3VudHNQ",
            "YWlyElkKHGFsdGNoYWluX2hlYWRlcl9lbmRvcnNlbWVudHMYBSADKAsyMy5j",
            "b3JlLkFsdGNoYWluSWRBbHRjaGFpbkhlYWRlckVuZG9yc2VtZW50Q291bnRz",
            "UGFpciKnAQotQWx0Y2hhaW5JZEFsdGNoYWluSGVhZGVyRW5kb3JzZW1lbnRD",
            "b3VudHNQYWlyEhsKE2FsdGNoYWluX2lkZW50aWZpZXIYASABKAMSWQonYWx0",
            "Y2hhaW5faGVhZGVyX2VuZG9yc2VtZW50X2NvdW50X3BhaXJzGAIgAygLMigu",
            "Y29yZS5BbHRjaGFpbkhlYWRlckVuZG9yc2VtZW50Q291bnRQYWlyIqIBCitC",
            "aXRjb2luSGVhZGVyVmVyaUJsb2NrRW5kb3JzZW1lbnRDb3VudHNQYWlyEhYK",
            "DmJpdGNvaW5faGVhZGVyGAEgASgMElsKKHZlcmlibG9ja19oZWFkZXJfZW5k",
            "b3JzZW1lbnRfY291bnRfcGFpcnMYAiADKAsyKS5jb3JlLlZlcmlCbG9ja0hl",
            "YWRlckVuZG9yc2VtZW50Q291bnRQYWlyIloKI1ZlcmlCbG9ja0hlYWRlckVu",
            "ZG9yc2VtZW50Q291bnRQYWlyEhgKEHZlcmlibG9ja19oZWFkZXIYASABKAwS",
            "GQoRZW5kb3JzZW1lbnRfY291bnQYAiABKAUiWAoiQWx0Y2hhaW5IZWFkZXJF",
            "bmRvcnNlbWVudENvdW50UGFpchIXCg9hbHRjaGFpbl9oZWFkZXIYASABKAwS",
            "GQoRZW5kb3JzZW1lbnRfY291bnQYAiABKAUiJgoNQmxvY2tGZWVUYWJsZRIV",
            "Cg1wb3BfZmVlX3NoYXJlGAEgASgDIvoBChdCbG9ja0NvbnRlbnRNZXRhcGFj",
            "a2FnZRI3ChRjb2luYmFzZV90cmFuc2FjdGlvbhgBIAEoCzIZLmNvcmUuQ29p",
            "bmJhc2VUcmFuc2FjdGlvbhIpCg1wb3BfZGF0YXN0b3JlGAIgASgLMhIuY29y",
            "ZS5Qb1BEYXRhc3RvcmUSFQoNbWluZXJfY29tbWVudBgDIAEoDBITCgtsZWRn",
            "ZXJfaGFzaBgEIAEoDBITCgtleHRyYV9ub25jZRgFIAEoEhIMCgRoYXNoGAYg",
            "ASgMEiwKD2Jsb2NrX2ZlZV90YWJsZRgHIAEoCzITLmNvcmUuQmxvY2tGZWVU",
            "YWJsZSKyAwoMQmxvY2tTdW1tYXJ5Eg4KBm51bWJlchgBIAEoBRIRCgl0aW1l",
            "c3RhbXAYAiABKAUSDAoEaGFzaBgDIAEoDBIVCg1wcmV2aW91c19oYXNoGAQg",
            "ASgMEhwKFHNlY29uZF9wcmV2aW91c19oYXNoGAUgASgMEhsKE3RoaXJkX3By",
            "ZXZpb3VzX2hhc2gYBiABKAwSGgoSZGVjb2RlZF9kaWZmaWN1bHR5GAcgASgG",
            "EhUKDXdpbm5pbmdfbm9uY2UYCCABKBESIAoYbnVtX3JlZ3VsYXJfdHJhbnNh",
            "Y3Rpb25zGAkgASgFEhwKFG51bV9wb3BfdHJhbnNhY3Rpb25zGAogASgFEhIK",
            "CnRvdGFsX2ZlZXMYCyABKAMSGwoTcG93X2NvaW5iYXNlX3Jld2FyZBgMIAEo",
            "AxIbChNwb3BfY29pbmJhc2VfcmV3YXJkGA0gASgDEgwKBHNpemUYDiABKAUS",
            "EwoLbGVkZ2VyX2hhc2gYDyABKAwSFQoNbWluZXJfY29tbWVudBgQIAEoDBIP",
            "Cgd2ZXJzaW9uGBEgASgFEhMKC21lcmtsZV9yb290GBIgASgMIsMDChFMaWdo",
            "dEJsb2NrU3VtbWFyeRIOCgZudW1iZXIYASABKAUSEQoJdGltZXN0YW1wGAIg",
            "ASgFEgwKBGhhc2gYAyABKAwSFQoNcHJldmlvdXNfaGFzaBgEIAEoDBIcChRz",
            "ZWNvbmRfcHJldmlvdXNfaGFzaBgFIAEoDBIbChN0aGlyZF9wcmV2aW91c19o",
            "YXNoGAYgASgMEhoKEmRlY29kZWRfZGlmZmljdWx0eRgHIAEoBhIVCg13aW5u",
            "aW5nX25vbmNlGAggASgREiYKHm51bV9rbm93bl9yZWd1bGFyX3RyYW5zYWN0",
            "aW9ucxgJIAEoBRIcChRudW1fcG9wX3RyYW5zYWN0aW9ucxgKIAEoBRIbChNw",
            "b3dfY29pbmJhc2VfcmV3YXJkGAsgASgDEhsKE3BvcF9jb2luYmFzZV9yZXdh",
            "cmQYDCABKAMSEwoLbGVkZ2VyX2hhc2gYDSABKAwSFQoNbWluZXJfY29tbWVu",
            "dBgOIAEoDBImCh5ub3JtYWxfdHJhbnNhY3Rpb25fbWVya2xlX3Jvb3QYDyAB",
            "KAwSDwoHdmVyc2lvbhgQIAEoBRITCgttZXJrbGVfcm9vdBgRIAEoDCKIBAoF",
            "QmxvY2sSDgoGbnVtYmVyGAEgASgFEhEKCXRpbWVzdGFtcBgCIAEoBRIMCgRo",
            "YXNoGAMgASgMEhUKDXByZXZpb3VzX2hhc2gYBCABKAwSHAoUc2Vjb25kX3By",
            "ZXZpb3VzX2hhc2gYBSABKAwSGwoTdGhpcmRfcHJldmlvdXNfaGFzaBgGIAEo",
            "DBIaChJlbmNvZGVkX2RpZmZpY3VsdHkYByABKAUSFQoNd2lubmluZ19ub25j",
            "ZRgIIAEoERI0ChRyZWd1bGFyX3RyYW5zYWN0aW9ucxgJIAMoCzIWLmNvcmUu",
            "VHJhbnNhY3Rpb25VbmlvbhIwChBwb3BfdHJhbnNhY3Rpb25zGAogAygLMhYu",
            "Y29yZS5UcmFuc2FjdGlvblVuaW9uEhIKCnRvdGFsX2ZlZXMYCyABKAMSGwoT",
            "cG93X2NvaW5iYXNlX3Jld2FyZBgMIAEoAxIbChNwb3BfY29pbmJhc2VfcmV3",
            "YXJkGA0gASgDEh0KFWJpdGNvaW5fYmxvY2tfaGVhZGVycxgOIAMoDBJAChli",
            "bG9ja19jb250ZW50X21ldGFwYWNrYWdlGA8gASgLMh0uY29yZS5CbG9ja0Nv",
            "bnRlbnRNZXRhcGFja2FnZRIMCgRzaXplGBAgASgFEg8KB3ZlcnNpb24YESAB",
            "KAUSEwoLbWVya2xlX3Jvb3QYEiABKAwiKwoLQmxvY2tIZWFkZXISDgoGaGVh",
            "ZGVyGAEgASgMEgwKBGhhc2gYAiABKAwivgIKDUZpbHRlcmVkQmxvY2sSDgoG",
            "bnVtYmVyGAEgASgFEg8KB3ZlcnNpb24YAiABKAUSFQoNcHJldmlvdXNfaGFz",
            "aBgDIAEoDBIcChRzZWNvbmRfcHJldmlvdXNfaGFzaBgEIAEoDBIbChN0aGly",
            "ZF9wcmV2aW91c19oYXNoGAUgASgMEhMKC21lcmtsZV9yb290GAYgASgMEhEK",
            "CXRpbWVzdGFtcBgHIAEoBRISCgpkaWZmaWN1bHR5GAggASgFEg0KBW5vbmNl",
            "GAkgASgREiIKGnRvdGFsX3JlZ3VsYXJfdHJhbnNhY3Rpb25zGAogASgFEh4K",
            "FnRvdGFsX3BvcF90cmFuc2FjdGlvbnMYCyABKAUSFQoNbWVya2xlX2hhc2hl",
            "cxgMIAMoDBIUCgxtZXJrbGVfZmxhZ3MYDSABKAwipQQKDUxpZ2h0VkJLQmxv",
            "Y2sSDgoGbnVtYmVyGAEgASgFEhEKCXRpbWVzdGFtcBgCIAEoBRIMCgRoYXNo",
            "GAMgASgMEhUKDXByZXZpb3VzX2hhc2gYBCABKAwSHAoUc2Vjb25kX3ByZXZp",
            "b3VzX2hhc2gYBSABKAwSGwoTdGhpcmRfcHJldmlvdXNfaGFzaBgGIAEoDBIa",
            "ChJlbmNvZGVkX2RpZmZpY3VsdHkYByABKAUSFQoNd2lubmluZ19ub25jZRgI",
            "IAEoERJDChprbm93bl9yZWd1bGFyX3RyYW5zYWN0aW9ucxgJIAMoCzIfLmNv",
            "cmUuVkJLVHJhbnNhY3Rpb25XaXRoQ29udGV4dBIwChBwb3BfdHJhbnNhY3Rp",
            "b25zGAogAygLMhYuY29yZS5UcmFuc2FjdGlvblVuaW9uEhsKE3Bvd19jb2lu",
            "YmFzZV9yZXdhcmQYCyABKAMSGwoTcG9wX2NvaW5iYXNlX3Jld2FyZBgMIAEo",
            "AxIdChViaXRjb2luX2Jsb2NrX2hlYWRlcnMYDSADKAwSQAoZYmxvY2tfY29u",
            "dGVudF9tZXRhcGFja2FnZRgOIAEoCzIdLmNvcmUuQmxvY2tDb250ZW50TWV0",
            "YXBhY2thZ2USJgoebm9ybWFsX3RyYW5zYWN0aW9uX21lcmtsZV9yb290GA8g",
            "ASgMEg8KB3ZlcnNpb24YECABKAUSEwoLbWVya2xlX3Jvb3QYESABKAwiSwoL",
            "QmxvY2tGaWx0ZXISDgoEaGFzaBgBIAEoDEgAEg8KBWluZGV4GAIgASgFSAAS",
            "EAoGbnVtYmVyGAMgASgFSABCCQoHZmlsdGVycyJNChBHZXRCbG9ja3NSZXF1",
            "ZXN0EhUKDXNlYXJjaF9sZW5ndGgYASABKAUSIgoHZmlsdGVycxgCIAMoCzIR",
            "LmNvcmUuQmxvY2tGaWx0ZXIiRwoGUmVzdWx0Eg0KBWVycm9yGAEgASgIEgwK",
            "BGNvZGUYAiABKAkSDwoHbWVzc2FnZRgDIAEoCRIPCgdkZXRhaWxzGAQgASgJ",
            "Ij8KDVByb3RvY29sUmVwbHkSDwoHc3VjY2VzcxgBIAEoCBIdCgdyZXN1bHRz",
            "GAIgAygLMgwuY29yZS5SZXN1bHQiXQoOR2V0QmxvY2tzUmVwbHkSDwoHc3Vj",
            "Y2VzcxgBIAEoCBIdCgdyZXN1bHRzGAIgAygLMgwuY29yZS5SZXN1bHQSGwoG",
            "YmxvY2tzGAMgAygLMgsuY29yZS5CbG9jayIuChNCYWNrdXBXYWxsZXRSZXF1",
            "ZXN0EhcKD3RhcmdldF9sb2NhdGlvbhgBIAEoDCJDChFCYWNrdXBXYWxsZXRS",
            "ZXBseRIPCgdzdWNjZXNzGAEgASgIEh0KB3Jlc3VsdHMYAiADKAsyDC5jb3Jl",
            "LlJlc3VsdCJCChNJbXBvcnRXYWxsZXRSZXF1ZXN0EhcKD3NvdXJjZV9sb2Nh",
            "dGlvbhgBIAEoDBISCgpwYXNzcGhyYXNlGAIgASgJIkMKEUltcG9ydFdhbGxl",
            "dFJlcGx5Eg8KB3N1Y2Nlc3MYASABKAgSHQoHcmVzdWx0cxgCIAMoCzIMLmNv",
            "cmUuUmVzdWx0IjwKCEFubm91bmNlEg0KBXJlcGx5GAEgASgIEiEKCW5vZGVf",
            "aW5mbxgCIAEoCzIOLmNvcmUuTm9kZUluZm8itAEKCE5vZGVJbmZvEg8KB2Fk",
            "ZHJlc3MYASABKAkSDAoEcG9ydBgCIAEoBRITCgthcHBsaWNhdGlvbhgDIAEo",
            "CRIYChBwcm90b2NvbF92ZXJzaW9uGAQgASgFEhAKCHBsYXRmb3JtGAUgASgJ",
            "EhcKD3N0YXJ0X3RpbWVzdGFtcBgGIAEoBRIKCgJpZBgHIAEoCRINCgVzaGFy",
            "ZRgIIAEoCBIUCgxjYXBhYmlsaXRpZXMYCSABKAMiLwoQQWRkQmxvY2tzUmVx",
            "dWVzdBIbCgZibG9ja3MYASADKAsyCy5jb3JlLkJsb2NrIikKCUJsb2NrSW5m",
            "bxIOCgZudW1iZXIYASABKAUSDAoEaGFzaBgCIAEoDCJWChRBZGRUcmFuc2Fj",
            "dGlvbnNSZXBseRIPCgdzdWNjZXNzGAEgASgIEh0KB3Jlc3VsdHMYAiADKAsy",
            "DC5jb3JlLlJlc3VsdBIOCgZ0eF9pZHMYAyADKAwiKwoJSGVhcnRiZWF0Eh4K",
            "BWJsb2NrGAEgASgLMg8uY29yZS5CbG9ja0luZm8iOAoKQmxvY2tRdWVyeRIe",
            "CgVibG9jaxgBIAEoCzIPLmNvcmUuQmxvY2tJbmZvEgoKAmlkGAIgASgJIk4K",
            "D0Jsb2NrUXVlcnlSZXBseRIPCgdtYXRjaGVkGAEgASgIEh4KBWJsb2NrGAIg",
            "ASgLMg8uY29yZS5CbG9ja0luZm8SCgoCaWQYAyABKAkiRwoLU3luY1JlcXVl",
            "c3QSHQoVc3RhcnRpbmdfYmxvY2tfaGVpZ2h0GAEgASgFEhkKEXN5bmNfdHJh",
            "bnNhY3Rpb25zGAIgASgIIhQKEk5ldHdvcmtJbmZvUmVxdWVzdCI7ChBOZXR3",
            "b3JrSW5mb1JlcGx5EicKD2F2YWlsYWJsZV9ub2RlcxgBIAMoCzIOLmNvcmUu",
            "Tm9kZUluZm8iJQoPQWNrbm93bGVkZ2VtZW50EhIKCm1lc3NhZ2VfaWQYASAB",
            "KAkiNQoPQWR2ZXJ0aXNlQmxvY2tzEiIKB2hlYWRlcnMYASADKAsyES5jb3Jl",
            "LkJsb2NrSGVhZGVyInoKE1RyYW5zYWN0aW9uQW5ub3VuY2USLAoEdHlwZRgB",
            "IAEoDjIeLmNvcmUuVHJhbnNhY3Rpb25Bbm5vdW5jZS5UeXBlEg0KBXR4X2lk",
            "GAIgASgMIiYKBFR5cGUSCgoGTk9STUFMEAASEgoOUFJPT0ZfT0ZfUFJPT0YQ",
            "ASJHChRBZHZlcnRpc2VUcmFuc2FjdGlvbhIvCgx0cmFuc2FjdGlvbnMYASAD",
            "KAsyGS5jb3JlLlRyYW5zYWN0aW9uQW5ub3VuY2UiMgoMQmxvY2tSZXF1ZXN0",
            "EiIKB2hlYWRlcnMYASADKAsyES5jb3JlLkJsb2NrSGVhZGVyIkUKElRyYW5z",
            "YWN0aW9uUmVxdWVzdBIvCgx0cmFuc2FjdGlvbnMYASADKAsyGS5jb3JlLlRy",
            "YW5zYWN0aW9uQW5ub3VuY2UiMwoNS2V5c3RvbmVRdWVyeRIiCgdoZWFkZXJz",
            "GAEgAygLMhEuY29yZS5CbG9ja0hlYWRlciJUCghOb3RGb3VuZBIhCgR0eXBl",
            "GAEgASgOMhMuY29yZS5Ob3RGb3VuZC5UeXBlEgoKAmlkGAIgASgMIhkKBFR5",
            "cGUSCQoFQkxPQ0sQABIGCgJUWBABIlUKDENyZWF0ZUZpbHRlchIOCgZmaWx0",
            "ZXIYASABKAwSFwoPaGFzaF9pdGVyYXRpb25zGAIgASgFEg0KBXR3ZWFrGAMg",
            "ASgFEg0KBWZsYWdzGAQgASgFIhkKCUFkZEZpbHRlchIMCgRkYXRhGAEgASgM",
            "Ig0KC0NsZWFyRmlsdGVyIsUHCgVFdmVudBIcCgVibG9jaxgBIAEoCzILLmNv",
            "cmUuQmxvY2tIABItCgt0cmFuc2FjdGlvbhgCIAEoCzIWLmNvcmUuVHJhbnNh",
            "Y3Rpb25VbmlvbkgAEiIKCGFubm91bmNlGAMgASgLMg4uY29yZS5Bbm5vdW5j",
            "ZUgAEiQKCWhlYXJ0YmVhdBgEIAEoCzIPLmNvcmUuSGVhcnRiZWF0SAASJwoL",
            "YmxvY2tfcXVlcnkYBSABKAsyEC5jb3JlLkJsb2NrUXVlcnlIABIyChFibG9j",
            "a19xdWVyeV9yZXBseRgGIAEoCzIVLmNvcmUuQmxvY2tRdWVyeVJlcGx5SAAS",
            "OAoUbmV0d29ya19pbmZvX3JlcXVlc3QYCCABKAsyGC5jb3JlLk5ldHdvcmtJ",
            "bmZvUmVxdWVzdEgAEjQKEm5ldHdvcmtfaW5mb19yZXBseRgJIAEoCzIWLmNv",
            "cmUuTmV0d29ya0luZm9SZXBseUgAEjAKD2Fja25vd2xlZGdlbWVudBgKIAEo",
            "CzIVLmNvcmUuQWNrbm93bGVkZ2VtZW50SAASMQoQYWR2ZXJ0aXNlX2Jsb2Nr",
            "cxgNIAEoCzIVLmNvcmUuQWR2ZXJ0aXNlQmxvY2tzSAASKwoNYmxvY2tfcmVx",
            "dWVzdBgOIAEoCzISLmNvcmUuQmxvY2tSZXF1ZXN0SAASLQoOa2V5c3RvbmVf",
            "cXVlcnkYDyABKAsyEy5jb3JlLktleXN0b25lUXVlcnlIABIyCgxhZHZlcnRp",
            "c2VfdHgYECABKAsyGi5jb3JlLkFkdmVydGlzZVRyYW5zYWN0aW9uSAASLgoK",
            "dHhfcmVxdWVzdBgRIAEoCzIYLmNvcmUuVHJhbnNhY3Rpb25SZXF1ZXN0SAAS",
            "IwoJbm90X2ZvdW5kGBIgASgLMg4uY29yZS5Ob3RGb3VuZEgAEisKDWNyZWF0",
            "ZV9maWx0ZXIYEyABKAsyEi5jb3JlLkNyZWF0ZUZpbHRlckgAEiUKCmFkZF9m",
            "aWx0ZXIYFCABKAsyDy5jb3JlLkFkZEZpbHRlckgAEikKDGNsZWFyX2ZpbHRl",
            "chgVIAEoCzIRLmNvcmUuQ2xlYXJGaWx0ZXJIABI0ChZmaWx0ZXJlZF9ibG9j",
            "a19yZXF1ZXN0GBYgASgLMhIuY29yZS5CbG9ja1JlcXVlc3RIABItCg5maWx0",
            "ZXJlZF9ibG9jaxgXIAEoCzITLmNvcmUuRmlsdGVyZWRCbG9ja0gAEgoKAmlk",
            "GAsgASgJEhMKC2Fja25vd2xlZGdlGAwgASgIQgkKB3Jlc3VsdHMiLwoLTm9k",
            "ZVJlcXVlc3QSIAoIZW5kcG9pbnQYASADKAsyDi5jb3JlLkVuZHBvaW50IiAK",
            "EFN0YXJ0UG9vbFJlcXVlc3QSDAoEdHlwZRgBIAEoDCJACg5TdGFydFBvb2xS",
            "ZXBseRIPCgdzdWNjZXNzGAEgASgIEh0KB3Jlc3VsdHMYAiADKAsyDC5jb3Jl",
            "LlJlc3VsdCIRCg9TdG9wUG9vbFJlcXVlc3QiPwoNU3RvcFBvb2xSZXBseRIP",
            "CgdzdWNjZXNzGAEgASgIEh0KB3Jlc3VsdHMYAiADKAsyDC5jb3JlLlJlc3Vs",
            "dCIdChtSZXN0YXJ0UG9vbFdlYlNlcnZlclJlcXVlc3QiSwoZUmVzdGFydFBv",
            "b2xXZWJTZXJ2ZXJSZXBseRIPCgdzdWNjZXNzGAEgASgIEh0KB3Jlc3VsdHMY",
            "AiADKAsyDC5jb3JlLlJlc3VsdCIiCg1HZXRQb3BSZXF1ZXN0EhEKCWJsb2Nr",
            "X251bRgBIAEoBSK4AwoLR2V0UG9wUmVwbHkSDwoHc3VjY2VzcxgBIAEoCBId",
            "CgdyZXN1bHRzGAIgAygLMgwuY29yZS5SZXN1bHQSFAoMYmxvY2tfaGVpZ2h0",
            "GAMgASgFEg8KB3ZlcnNpb24YBCABKAUSGwoTcHJldmlvdXNfYmxvY2tfaGFz",
            "aBgFIAEoDBIiChpzZWNvbmRfcHJldmlvdXNfYmxvY2tfaGFzaBgGIAEoDBIh",
            "Chl0aGlyZF9wcmV2aW91c19ibG9ja19oYXNoGAcgASgMEhMKC21lcmtsZV9y",
            "b290GAggASgMEhEKCXRpbWVzdGFtcBgJIAEoBRIaChJlbmNvZGVkX2RpZmZp",
            "Y3VsdHkYCiABKAUSDQoFbm9uY2UYCyABKBESGQoRcG9wX21pbmVyX2FkZHJl",
            "c3MYDCABKAwSEAoIZnVsbF9wb3AYDSABKAwSMgoQbGFzdF9rbm93bl9ibG9j",
            "axgOIAEoCzIYLmNvcmUuQml0Y29pbkJsb2NrSGVhZGVyEjoKGGxhc3Rfa25v",
            "d25fYmxvY2tfY29udGV4dBgPIAMoCzIYLmNvcmUuQml0Y29pbkJsb2NrSGVh",
            "ZGVyIhAKDkdldEluZm9SZXF1ZXN0IhoKGEdldERpYWdub3N0aWNJbmZvUmVx",
            "dWVzdCImChFHZXRCYWxhbmNlUmVxdWVzdBIRCglhZGRyZXNzZXMYASADKAwi",
            "jQEKD0dldEJhbGFuY2VSZXBseRIPCgdzdWNjZXNzGAEgASgIEh0KB3Jlc3Vs",
            "dHMYAiADKAsyDC5jb3JlLlJlc3VsdBInCgljb25maXJtZWQYAyADKAsyFC5j",
            "b3JlLkFkZHJlc3NCYWxhbmNlEiEKC3VuY29uZmlybWVkGAQgAygLMgwuY29y",
            "ZS5PdXRwdXQihgIKEFN1Ym1pdFBvcFJlcXVlc3QSHQoVZW5kb3JzZWRfYmxv",
            "Y2tfaGVhZGVyGAEgASgMEhsKE2JpdGNvaW5fdHJhbnNhY3Rpb24YAiABKAwS",
            "IwobYml0Y29pbl9tZXJrbGVfcGF0aF90b19yb290GAMgASgMEj8KHWJpdGNv",
            "aW5fYmxvY2tfaGVhZGVyX29mX3Byb29mGAQgASgLMhguY29yZS5CaXRjb2lu",
            "QmxvY2tIZWFkZXISPwodY29udGV4dF9iaXRjb2luX2Jsb2NrX2hlYWRlcnMY",
            "BSADKAsyGC5jb3JlLkJpdGNvaW5CbG9ja0hlYWRlchIPCgdhZGRyZXNzGAYg",
            "ASgMIsMBCg5Qb1BFbmRvcnNlbWVudBIdChVlbmRvcnNlZF9ibG9ja19oZWFk",
            "ZXIYASABKAwSGwoTYml0Y29pbl90cmFuc2FjdGlvbhgCIAEoDBIjChtiaXRj",
            "b2luX21lcmtsZV9wYXRoX3RvX3Jvb3QYAyABKAwSPwodYml0Y29pbl9ibG9j",
            "a19oZWFkZXJfb2ZfcHJvb2YYBCABKAsyGC5jb3JlLkJpdGNvaW5CbG9ja0hl",
            "YWRlchIPCgdhZGRyZXNzGAUgASgMIkIKHUdldEVuZG9yc2VtZW50c09mQmxv",
            "Y2tSZXF1ZXN0EiEKBmZpbHRlchgBIAEoCzIRLmNvcmUuQmxvY2tGaWx0ZXIi",
            "WgobR2V0RW5kb3JzZW1lbnRzT2ZCbG9ja1JlcGx5Eg8KB3N1Y2Nlc3MYASAB",
            "KAgSKgoMZW5kb3JzZW1lbnRzGAIgAygLMhQuY29yZS5Qb1BFbmRvcnNlbWVu",
            "dCJJChBTZW5kQ29pbnNSZXF1ZXN0EhYKDnNvdXJjZV9hZGRyZXNzGAEgASgM",
            "Eh0KB2Ftb3VudHMYAiADKAsyDC5jb3JlLk91dHB1dCJQCg5TZW5kQ29pbnNS",
            "ZXBseRIPCgdzdWNjZXNzGAEgASgIEh0KB3Jlc3VsdHMYAiADKAsyDC5jb3Jl",
            "LlJlc3VsdBIOCgZ0eF9pZHMYAyADKAwiOgoeU2VuZEFsdENoYWluRW5kb3Jz",
            "ZW1lbnRSZXF1ZXN0EhgKEHB1YmxpY2F0aW9uX2RhdGEYASABKAwifAocU2Vu",
            "ZEFsdENoYWluRW5kb3JzZW1lbnRSZXBseRIPCgdzdWNjZXNzGAEgASgIEh0K",
            "B3Jlc3VsdHMYAiADKAsyDC5jb3JlLlJlc3VsdBIsCgt0cmFuc2FjdGlvbhgD",
            "IAEoCzIXLmNvcmUuU2lnbmVkVHJhbnNhY3Rpb24iJgoRR2V0SGlzdG9yeVJl",
            "cXVlc3QSEQoJYWRkcmVzc2VzGAEgAygMIrYBCg5BZGRyZXNzSGlzdG9yeRIP",
            "CgdhZGRyZXNzGAEgASgMEg8KB2JhbGFuY2UYAiABKAMSFAoMYmxvY2tzX21p",
            "bmVkGAMgASgFEjYKFmNvbmZpcm1lZF90cmFuc2FjdGlvbnMYBCADKAsyFi5j",
            "b3JlLlRyYW5zYWN0aW9uVW5pb24SNAoUcGVuZGluZ190cmFuc2FjdGlvbnMY",
            "BSADKAsyFi5jb3JlLlRyYW5zYWN0aW9uVW5pb24iagoPR2V0SGlzdG9yeVJl",
            "cGx5Eg8KB3N1Y2Nlc3MYASABKAgSHQoHcmVzdWx0cxgCIAMoCzIMLmNvcmUu",
            "UmVzdWx0EicKCWFkZHJlc3NlcxgDIAMoCzIULmNvcmUuQWRkcmVzc0hpc3Rv",
            "cnkiFAoSR2V0UGVlckluZm9SZXF1ZXN0IioKCk5vZGVIZWlnaHQSDAoEcGVl",
            "chgBIAEoCRIOCgZoZWlnaHQYAiABKAUiiwIKEEdldFBlZXJJbmZvUmVwbHkS",
            "DwoHc3VjY2VzcxgBIAEoCBIdCgdyZXN1bHRzGAIgAygLMgwuY29yZS5SZXN1",
            "bHQSIQoJZW5kcG9pbnRzGAMgAygLMg4uY29yZS5FbmRwb2ludBInCg9jb25u",
            "ZWN0ZWRfbm9kZXMYBCADKAsyDi5jb3JlLk5vZGVJbmZvEioKEmRpc2Nvbm5l",
            "Y3RlZF9ub2RlcxgFIAMoCzIOLmNvcmUuTm9kZUluZm8SJwoPY2FuZGlkYXRl",
            "X25vZGVzGAYgAygLMg4uY29yZS5Ob2RlSW5mbxImCgxub2RlX2hlaWdodHMY",
            "ByADKAsyEC5jb3JlLk5vZGVIZWlnaHQiFwoVR2V0QmxvY2tjaGFpbnNSZXF1",
            "ZXN0IogBChNHZXRCbG9ja2NoYWluc1JlcGx5Eg8KB3N1Y2Nlc3MYASABKAgS",
            "HQoHcmVzdWx0cxgCIAMoCzIMLmNvcmUuUmVzdWx0Eh4KFmJlc3RfYmxvY2tj",
            "aGFpbl9sZW5ndGgYAyABKAUSIQoZbG9uZ2VzdF9ibG9ja2NoYWluX2xlbmd0",
            "aBgEIAEoBSIyChNTdWJtaXRCbG9ja3NSZXF1ZXN0EhsKBmJsb2NrcxgBIAMo",
            "CzILLmNvcmUuQmxvY2siLgoUR2V0QmxvY2tUaW1lc1JlcXVlc3QSFgoOaGlz",
            "dG9yeV9sZW5ndGgYASABKAUiUwoSR2V0QmxvY2tUaW1lc1JlcGx5Eg8KB3N1",
            "Y2Nlc3MYASABKAgSHQoHcmVzdWx0cxgCIAMoCzIMLmNvcmUuUmVzdWx0Eg0K",
            "BXRpbWVzGAMgAygRIicKFFN0YXJ0U29sb1Bvb2xSZXF1ZXN0Eg8KB2FkZHJl",
            "c3MYASABKAwiRAoSU3RhcnRTb2xvUG9vbFJlcGx5Eg8KB3N1Y2Nlc3MYASAB",
            "KAgSHQoHcmVzdWx0cxgCIAMoCzIMLmNvcmUuUmVzdWx0Ii0KGEdldFNpZ25h",
            "dHVyZUluZGV4UmVxdWVzdBIRCglhZGRyZXNzZXMYASADKAwiKwoYU2V0RGVm",
            "YXVsdEFkZHJlc3NSZXF1ZXN0Eg8KB2FkZHJlc3MYASABKAwiWAoXQWRkcmVz",
            "c1NpZ25hdHVyZUluZGV4ZXMSDwoHYWRkcmVzcxgBIAEoDBISCgpwb29sX2lu",
            "ZGV4GAMgASgDEhgKEGJsb2NrY2hhaW5faW5kZXgYAiABKAMieAoWR2V0U2ln",
            "bmF0dXJlSW5kZXhSZXBseRIPCgdzdWNjZXNzGAEgASgIEh0KB3Jlc3VsdHMY",
            "AiADKAsyDC5jb3JlLlJlc3VsdBIuCgdpbmRleGVzGAMgAygLMh0uY29yZS5B",
            "ZGRyZXNzU2lnbmF0dXJlSW5kZXhlcyJIChZTZXREZWZhdWx0QWRkcmVzc1Jl",
            "cGx5Eg8KB3N1Y2Nlc3MYASABKAgSHQoHcmVzdWx0cxgCIAMoCzIMLmNvcmUu",
            "UmVzdWx0IjwKFkdldFRyYW5zYWN0aW9uc1JlcXVlc3QSFQoNc2VhcmNoX2xl",
            "bmd0aBgBIAEoBRILCgNpZHMYAiADKAwiyQEKD1RyYW5zYWN0aW9uSW5mbxIV",
            "Cg1jb25maXJtYXRpb25zGAEgASgFEiYKC3RyYW5zYWN0aW9uGAIgASgLMhEu",
            "Y29yZS5UcmFuc2FjdGlvbhIUCgxibG9ja19udW1iZXIYAyABKAUSEQoJdGlt",
            "ZXN0YW1wGAQgASgFEhsKE2VuZG9yc2VkX2Jsb2NrX2hhc2gYBSABKAwSGgoS",
            "Yml0Y29pbl9ibG9ja19oYXNoGAYgASgMEhUKDWJpdGNvaW5fdHhfaWQYByAB",
            "KAwicwoUR2V0VHJhbnNhY3Rpb25zUmVwbHkSDwoHc3VjY2VzcxgBIAEoCBId",
            "CgdyZXN1bHRzGAIgAygLMgwuY29yZS5SZXN1bHQSKwoMdHJhbnNhY3Rpb25z",
            "GAMgAygLMhUuY29yZS5UcmFuc2FjdGlvbkluZm8iKgoYU2V0VHJhbnNhY3Rp",
            "b25GZWVSZXF1ZXN0Eg4KBmFtb3VudBgBIAEoAyIoChVEdW1wUHJpdmF0ZUtl",
            "eVJlcXVlc3QSDwoHYWRkcmVzcxgBIAEoDCJrChNEdW1wUHJpdmF0ZUtleVJl",
            "cGx5Eg8KB3N1Y2Nlc3MYASABKAgSHQoHcmVzdWx0cxgCIAMoCzIMLmNvcmUu",
            "UmVzdWx0Eg8KB2FkZHJlc3MYAyABKAwSEwoLcHJpdmF0ZV9rZXkYBCABKAwi",
            "LgoXSW1wb3J0UHJpdmF0ZUtleVJlcXVlc3QSEwoLcHJpdmF0ZV9rZXkYASAB",
            "KAwiYgoVSW1wb3J0UHJpdmF0ZUtleVJlcGx5Eg8KB3N1Y2Nlc3MYASABKAgS",
            "HQoHcmVzdWx0cxgCIAMoCzIMLmNvcmUuUmVzdWx0EhkKEXJlc3VsdGFudF9h",
            "ZGRyZXNzGAMgASgMIhwKGkdldExhc3RCaXRjb2luQmxvY2tSZXF1ZXN0IhUK",
            "E0dldExhc3RCbG9ja1JlcXVlc3QiWgoYR2V0TGFzdEJpdGNvaW5CbG9ja1Jl",
            "cGx5Eg8KB3N1Y2Nlc3MYASABKAgSHQoHcmVzdWx0cxgCIAMoCzIMLmNvcmUu",
            "UmVzdWx0Eg4KBmhlYWRlchgDIAEoDCJmChFHZXRMYXN0QmxvY2tSZXBseRIP",
            "CgdzdWNjZXNzGAEgASgIEh0KB3Jlc3VsdHMYAiADKAsyDC5jb3JlLlJlc3Vs",
            "dBIhCgZoZWFkZXIYAyABKAsyES5jb3JlLkJsb2NrSGVhZGVyIiYKFkxpc3RC",
            "bG9ja3NTaW5jZVJlcXVlc3QSDAoEaGFzaBgBIAEoDCKMAQoUTGlzdEJsb2Nr",
            "c1NpbmNlUmVwbHkSDwoHc3VjY2VzcxgBIAEoCBIdCgdyZXN1bHRzGAIgAygL",
            "MgwuY29yZS5SZXN1bHQSIgoHcmVtb3ZlZBgDIAMoCzIRLmNvcmUuQmxvY2tI",
            "ZWFkZXISIAoFYWRkZWQYBCADKAsyES5jb3JlLkJsb2NrSGVhZGVyIkkKGVN1",
            "Ym1pdFRyYW5zYWN0aW9uc1JlcXVlc3QSLAoMdHJhbnNhY3Rpb25zGAEgAygL",
            "MhYuY29yZS5UcmFuc2FjdGlvblVuaW9uIoACCgxHZXRJbmZvUmVwbHkSDwoH",
            "c3VjY2VzcxgBIAEoCBIdCgdyZXN1bHRzGAIgAygLMgwuY29yZS5SZXN1bHQS",
            "GAoQbnVtYmVyX29mX2Jsb2NrcxgDIAEoBRImCgpsYXN0X2Jsb2NrGAQgASgL",
            "MhIuY29yZS5CbG9ja1N1bW1hcnkSLQoPZGVmYXVsdF9hZGRyZXNzGAUgASgL",
            "MhQuY29yZS5BZGRyZXNzQmFsYW5jZRIXCg90cmFuc2FjdGlvbl9mZWUYBiAB",
            "KAMSGgoSZXN0aW1hdGVkX2hhc2hyYXRlGAcgASgDEhoKEmRlY29kZWRfZGlm",
            "ZmljdWx0eRgIIAEoBiLvAwoWR2V0RGlhZ25vc3RpY0luZm9SZXBseRIPCgdz",
            "dWNjZXNzGAEgASgIEh0KB3Jlc3VsdHMYAiADKAsyDC5jb3JlLlJlc3VsdBIV",
            "Cg11c2VyX2xhbmd1YWdlGAMgASgJEhkKEWphdmFfcnVudGltZV9uYW1lGAQg",
            "ASgJEh0KFXN1bl9ib290X2xpYnJhcnlfcGF0aBgFIAEoCRIcChRqYXZhX3J1",
            "bnRpbWVfdmVyc2lvbhgGIAEoCRIiChpqYXZhX3NwZWNpZmljYXRpb25fdmVy",
            "c2lvbhgHIAEoCRIPCgdvc19uYW1lGAggASgJEg8KB29zX2FyY2gYCSABKAkS",
            "EgoKb3NfdmVyc2lvbhgKIAEoCRIXCg9tZW1vcnlfdG90YWxfZ2IYCyABKAkS",
            "FQoNbWVtb3J5X21heF9nYhgMIAEoCRIXCg9wcm9jZXNzb3JfY291bnQYDSAB",
            "KAkSFgoOcHJvY2Vzc29yX3R5cGUYDiABKAkSGQoRd29ya2luZ19kaXJlY3Rv",
            "cnkYDyABKAkSGAoQZGF0ZXRpbWVfbm93X3V0YxgQIAEoCRIiChpub2RlY29y",
            "ZV9wcm9wZXJ0aWVzX3NvdXJjZRgRIAEoCRIiChpub2RlY29yZV9wcm9wZXJ0",
            "aWVzX3ZhbHVlcxgSIAMoCSIfCh1HZXRQZW5kaW5nVHJhbnNhY3Rpb25zUmVx",
            "dWVzdCJ2ChtHZXRQZW5kaW5nVHJhbnNhY3Rpb25zUmVwbHkSDwoHc3VjY2Vz",
            "cxgBIAEoCBIdCgdyZXN1bHRzGAIgAygLMgwuY29yZS5SZXN1bHQSJwoMdHJh",
            "bnNhY3Rpb25zGAMgAygLMhEuY29yZS5UcmFuc2FjdGlvbiIlChRHZXROZXdB",
            "ZGRyZXNzUmVxdWVzdBINCgVjb3VudBgBIAEoBSJzChJHZXROZXdBZGRyZXNz",
            "UmVwbHkSDwoHc3VjY2VzcxgBIAEoCBIdCgdyZXN1bHRzGAIgAygLMgwuY29y",
            "ZS5SZXN1bHQSDwoHYWRkcmVzcxgDIAEoDBIcChRhZGRpdGlvbmFsX2FkZHJl",
            "c3NlcxgEIAMoDCIpChZWYWxpZGF0ZUFkZHJlc3NSZXF1ZXN0Eg8KB2FkZHJl",
            "c3MYASABKAwifgoUVmFsaWRhdGVBZGRyZXNzUmVwbHkSDwoHc3VjY2VzcxgB",
            "IAEoCBIdCgdyZXN1bHRzGAIgAygLMgwuY29yZS5SZXN1bHQSDwoHYWRkcmVz",
            "cxgDIAEoDBISCgpwdWJsaWNfa2V5GAQgASgMEhEKCWlzX3JlbW90ZRgFIAEo",
            "CCJZCh5HZW5lcmF0ZU11bHRpc2lnQWRkcmVzc1JlcXVlc3QSGAoQc291cmNl",
            "X2FkZHJlc3NlcxgBIAMoDBIdChVzaWduYXR1cmVfdGhyZXNob2xkX20YAiAB",
            "KAUioQEKHEdlbmVyYXRlTXVsdGlzaWdBZGRyZXNzUmVwbHkSDwoHc3VjY2Vz",
            "cxgBIAEoCBIdCgdyZXN1bHRzGAIgAygLMgwuY29yZS5SZXN1bHQSGAoQc291",
            "cmNlX2FkZHJlc3NlcxgDIAMoDBIdChVzaWduYXR1cmVfdGhyZXNob2xkX20Y",
            "BCABKAUSGAoQbXVsdGlzaWdfYWRkcmVzcxgFIAEoDCKMAQodTWFrZVVuc2ln",
            "bmVkTXVsdGlzaWdUeFJlcXVlc3QSHwoXc291cmNlX211bHRpc2lnX2FkZHJl",
            "c3MYASABKAwSHQoHYW1vdW50cxgCIAMoCzIMLmNvcmUuT3V0cHV0EgsKA2Zl",
            "ZRgDIAEoAxIeChZzaWduYXR1cmVfaW5kZXhfc3RyaW5nGAQgASgMIpYCChtN",
            "YWtlVW5zaWduZWRNdWx0aXNpZ1R4UmVwbHkSDwoHc3VjY2VzcxgBIAEoCBId",
            "CgdyZXN1bHRzGAIgAygLMgwuY29yZS5SZXN1bHQSHQoVc2lnbmF0dXJlX3Ro",
            "cmVzaG9sZF9tGAMgASgFEiMKG2FkZHJlc3NfY29tcG9zaXRpb25fY291bnRf",
            "bhgEIAEoBRJcCih1bnNpZ25lZF9tdWx0aXNpZ190cmFuc2FjdGlvbl93aXRo",
            "X2luZGV4GAUgASgLMiouY29yZS5VbnNpZ25lZE11bHRpc2lnVHJhbnNhY3Rp",
            "b25XaXRoSW5kZXgSDAoEdHhpZBgGIAEoDBIXCg9zaWduYXR1cmVfaW5kZXgY",
            "ByABKAMiWAoXU3VibWl0TXVsdGlzaWdUeFJlcXVlc3QSPQoUbXVsdGlzaWdf",
            "dHJhbnNhY3Rpb24YAyABKAsyHy5jb3JlLlNpZ25lZE11bHRpc2lnVHJhbnNh",
            "Y3Rpb24imwEKFVN1Ym1pdE11bHRpc2lnVHhSZXBseRIPCgdzdWNjZXNzGAEg",
            "ASgIEh0KB3Jlc3VsdHMYAiADKAsyDC5jb3JlLlJlc3VsdBIMCgR0eGlkGAMg",
            "ASgMEkQKG3NpZ25lZF9tdWx0aXNpZ190cmFuc2FjdGlvbhgEIAEoCzIfLmNv",
            "cmUuU2lnbmVkTXVsdGlzaWdUcmFuc2FjdGlvbiI2ChJTaWduTWVzc2FnZVJl",
            "cXVlc3QSDwoHYWRkcmVzcxgBIAEoDBIPCgdtZXNzYWdlGAIgASgMIm4KEFNp",
            "Z25NZXNzYWdlUmVwbHkSDwoHc3VjY2VzcxgBIAEoCBIdCgdyZXN1bHRzGAIg",
            "AygLMgwuY29yZS5SZXN1bHQSFgoOc2lnbmVkX21lc3NhZ2UYAyABKAwSEgoK",
            "cHVibGljX2tleRgEIAEoDCI9ChdHZXRCbG9ja1RlbXBsYXRlUmVxdWVzdBIM",
            "CgRtb2RlGAEgASgJEhQKDGNhcGFiaWxpdGllcxgCIAMoCSKSAQoUQ2FuZGlk",
            "YXRlVHJhbnNhY3Rpb24SCwoDZmVlGAEgASgDEg4KBndlaWdodBgCIAEoAxIQ",
            "CghyZXF1aXJlZBgDIAEoCBINCgV0eF9pZBgEIAEoDBIPCgdkZXBlbmRzGAUg",
            "AygFEisKC3RyYW5zYWN0aW9uGAYgASgLMhYuY29yZS5UcmFuc2FjdGlvblVu",
            "aW9uIpQDChVHZXRCbG9ja1RlbXBsYXRlUmVwbHkSDwoHc3VjY2VzcxgBIAEo",
            "CBIdCgdyZXN1bHRzGAIgAygLMgwuY29yZS5SZXN1bHQSDgoGdGFyZ2V0GAMg",
            "ASgDEhIKCnNpemVfbGltaXQYBCABKAMSFAoMYmxvY2tfaGVpZ2h0GAUgASgF",
            "EhYKDmNvaW5iYXNlX3ZhbHVlGAYgASgDEhkKEW1pbmltdW1fdGltZXN0YW1w",
            "GAcgASgFEhkKEWN1cnJlbnRfdGltZXN0YW1wGAggASgFEg8KB211dGFibGUY",
            "CSADKAkSGwoTcHJldmlvdXNfYmxvY2tfaGFzaBgKIAEoDBIiChpzZWNvbmRf",
            "cHJldmlvdXNfYmxvY2tfaGFzaBgLIAEoDBIhChl0aGlyZF9wcmV2aW91c19i",
            "bG9ja19oYXNoGAwgASgMEhwKFHByZXZpb3VzX2xlZGdlcl9oYXNoGA0gASgM",
            "EjAKDHRyYW5zYWN0aW9ucxgOIAMoCzIaLmNvcmUuQ2FuZGlkYXRlVHJhbnNh",
            "Y3Rpb24ilgEKDVNldEJhblJlcXVlc3QSLAoHY29tbWFuZBgBIAEoDjIbLmNv",
            "cmUuU2V0QmFuUmVxdWVzdC5Db21tYW5kEg0KBXZhbHVlGAIgASgJEg4KBnJl",
            "YXNvbhgDIAEoCRIYChBleHBpcnlfdGltZXN0YW1wGAQgASgFIh4KB0NvbW1h",
            "bmQSBwoDQUREEAASCgoGUkVNT1ZFEAEidAoRU2V0QWxsb3dlZFJlcXVlc3QS",
            "MAoHY29tbWFuZBgBIAEoDjIfLmNvcmUuU2V0QWxsb3dlZFJlcXVlc3QuQ29t",
            "bWFuZBINCgV2YWx1ZRgCIAEoCSIeCgdDb21tYW5kEgcKA0FERBAAEgoKBlJF",
            "TU9WRRABIrsBCg1CbGFja0xpc3RJbmZvEgoKAmlkGAEgASgFEiYKBHR5cGUY",
            "AiABKA4yGC5jb3JlLkJsYWNrTGlzdEluZm8uVHlwZRINCgV2YWx1ZRgDIAEo",
            "CRIOCgZyZWFzb24YBCABKAkSEQoJdGltZXN0YW1wGAUgASgFEhgKEGV4cGly",
            "eV90aW1lc3RhbXAYBiABKAUiKgoEVHlwZRILCgdBRERSRVNTEAASCwoHTkVU",
            "TUFTSxABEggKBENJRFIQAiKRAQoNV2hpdGVMaXN0SW5mbxIKCgJpZBgBIAEo",
            "BRImCgR0eXBlGAIgASgOMhguY29yZS5XaGl0ZUxpc3RJbmZvLlR5cGUSDQoF",
            "dmFsdWUYAyABKAkSEQoJdGltZXN0YW1wGAQgASgFIioKBFR5cGUSCwoHQURE",
            "UkVTUxAAEgsKB05FVE1BU0sQARIICgRDSURSEAIiEwoRTGlzdEJhbm5lZFJl",
            "cXVlc3QiFAoSTGlzdEFsbG93ZWRSZXF1ZXN0ImcKD0xpc3RCYW5uZWRSZXBs",
            "eRIPCgdzdWNjZXNzGAEgASgIEh0KB3Jlc3VsdHMYAiADKAsyDC5jb3JlLlJl",
            "c3VsdBIkCgdlbnRyaWVzGAMgAygLMhMuY29yZS5CbGFja0xpc3RJbmZvImgK",
            "EExpc3RBbGxvd2VkUmVwbHkSDwoHc3VjY2VzcxgBIAEoCBIdCgdyZXN1bHRz",
            "GAIgAygLMgwuY29yZS5SZXN1bHQSJAoHZW50cmllcxgDIAMoCzITLmNvcmUu",
            "V2hpdGVMaXN0SW5mbyIZChdMaXN0QmFubmVkTWluZXJzUmVxdWVzdCJYChVM",
            "aXN0QmFubmVkTWluZXJzUmVwbHkSDwoHc3VjY2VzcxgBIAEoCBIdCgdyZXN1",
            "bHRzGAIgAygLMgwuY29yZS5SZXN1bHQSDwoHY2xpZW50cxgDIAMoCSIUChJD",
            "bGVhckJhbm5lZFJlcXVlc3QiGgoYQ2xlYXJCYW5uZWRNaW5lcnNSZXF1ZXN0",
            "IhUKE0NsZWFyQWxsb3dlZFJlcXVlc3QiDQoLUGluZ1JlcXVlc3QiCwoJUGlu",
            "Z1JlcGx5IkoKG0dldEJpdGNvaW5CbG9ja0luZGV4UmVxdWVzdBIUCgxibG9j",
            "a19oZWFkZXIYASABKAwSFQoNc2VhcmNoX2xlbmd0aBgCIAEoBSLoAgocR2V0",
            "V2FsbGV0VHJhbnNhY3Rpb25zUmVxdWVzdBI9CgxyZXF1ZXN0X3R5cGUYASAB",
            "KA4yJy5jb3JlLkdldFdhbGxldFRyYW5zYWN0aW9uc1JlcXVlc3QuVHlwZRIP",
            "CgdhZGRyZXNzGAIgASgMEjYKEHRyYW5zYWN0aW9uX3R5cGUYAyABKA4yHC5j",
            "b3JlLldhbGxldFRyYW5zYWN0aW9uLlR5cGUSLAoGc3RhdHVzGAQgASgOMhwu",
            "Y29yZS5UcmFuc2FjdGlvbk1ldGEuU3RhdHVzEioKDWFtb3VudF9maWx0ZXIY",
            "BSABKAsyEy5jb3JlLk51bWVyaWNGaWx0ZXISLQoQdGltZXN0YW1wX2ZpbHRl",
            "chgGIAEoCzITLmNvcmUuTnVtZXJpY0ZpbHRlchIaCgRwYWdlGAcgASgLMgwu",
            "Y29yZS5QYWdpbmciGwoEVHlwZRIICgRMSVNUEAASCQoFUVVFUlkQASKtAgoa",
            "R2V0V2FsbGV0VHJhbnNhY3Rpb25zUmVwbHkSGgoEbmV4dBgBIAEoCzIMLmNv",
            "cmUuUGFnaW5nEi0KDHRyYW5zYWN0aW9ucxgCIAMoCzIXLmNvcmUuV2FsbGV0",
            "VHJhbnNhY3Rpb24SQAoLY2FjaGVfc3RhdGUYAyABKA4yKy5jb3JlLkdldFdh",
            "bGxldFRyYW5zYWN0aW9uc1JlcGx5LkNhY2hlU3RhdGUSDwoHbWVzc2FnZRgE",
            "IAEoCRIPCgdzdWNjZXNzGAUgASgIEh0KB3Jlc3VsdHMYBiADKAsyDC5jb3Jl",
            "LlJlc3VsdCJBCgpDYWNoZVN0YXRlEgsKB1VOS05PV04QABIMCghCVUlMRElO",
            "RxABEgsKB0NVUlJFTlQQAhILCgdFUlJPUkVEEAMiigEKE0Jsb2NrY2hhaW5T",
            "dGF0ZUluZm8SLgoFc3RhdGUYASABKA4yHy5jb3JlLkJsb2NrY2hhaW5TdGF0",
            "ZUluZm8uU3RhdGUiQwoFU3RhdGUSCwoHTE9BRElORxAAEgoKBk5PUk1BTBAB",
            "EgoKBlBBVVNFRBADEgkKBVNUQUxFEAQSCgoGTE9BREVEEAUiiQEKEk9wZXJh",
            "dGluZ1N0YXRlSW5mbxItCgVzdGF0ZRgBIAEoDjIeLmNvcmUuT3BlcmF0aW5n",
            "U3RhdGVJbmZvLlN0YXRlIkQKBVN0YXRlEgsKB1NUQVJURUQQABIQCgxJTklU",
            "SUFMSVpJTkcQARILCgdSVU5OSU5HEAISDwoLVEVSTUlOQVRJTkcQAyJpChBO",
            "ZXR3b3JrU3RhdGVJbmZvEisKBXN0YXRlGAEgASgOMhwuY29yZS5OZXR3b3Jr",
            "U3RhdGVJbmZvLlN0YXRlIigKBVN0YXRlEhAKDERJU0NPTk5FQ1RFRBAAEg0K",
            "CUNPTk5FQ1RFRBABIhUKE0dldFN0YXRlSW5mb1JlcXVlc3QixQQKEUdldFN0",
            "YXRlSW5mb1JlcGx5EjMKEGJsb2NrY2hhaW5fc3RhdGUYASABKAsyGS5jb3Jl",
            "LkJsb2NrY2hhaW5TdGF0ZUluZm8SMQoPb3BlcmF0aW5nX3N0YXRlGAIgASgL",
            "MhguY29yZS5PcGVyYXRpbmdTdGF0ZUluZm8SLQoNbmV0d29ya19zdGF0ZRgD",
            "IAEoCzIWLmNvcmUuTmV0d29ya1N0YXRlSW5mbxIcChRjb25uZWN0ZWRfcGVl",
            "cl9jb3VudBgEIAEoBRIZChFjdXJyZW50X3N5bmNfcGVlchgFIAEoCRIWCg5u",
            "ZXR3b3JrX2hlaWdodBgGIAEoBRIfChdsb2NhbF9ibG9ja2NoYWluX2hlaWdo",
            "dBgHIAEoBRIPCgdzdWNjZXNzGAggASgIEh0KB3Jlc3VsdHMYCSADKAsyDC5j",
            "b3JlLlJlc3VsdBIXCg9uZXR3b3JrX3ZlcnNpb24YCiABKAkSFgoOZGF0YV9k",
            "aXJlY3RvcnkYCyABKAkSFwoPcHJvZ3JhbV92ZXJzaW9uGAwgASgJEhoKEm5v",
            "ZGVjb3JlX3N0YXJ0dGltZRgNIAEoAxIgChh3YWxsZXRfY2FjaGVfc3luY19o",
            "ZWlnaHQYDiABKAUSOQoMd2FsbGV0X3N0YXRlGA8gASgOMiMuY29yZS5HZXRT",
            "dGF0ZUluZm9SZXBseS5XYWxsZXRTdGF0ZSI0CgtXYWxsZXRTdGF0ZRILCgdE",
            "RUZBVUxUEAASCgoGTE9DS0VEEAESDAoIVU5MT0NLRUQQAiIVChNTdG9wTm9k",
            "ZUNvcmVSZXF1ZXN0IhsKGVJlZnJlc2hXYWxsZXRDYWNoZVJlcXVlc3QiKgoU",
            "RW5jcnlwdFdhbGxldFJlcXVlc3QSEgoKcGFzc3BocmFzZRgBIAEoCSIqChRE",
            "ZWNyeXB0V2FsbGV0UmVxdWVzdBISCgpwYXNzcGhyYXNlGAEgASgJIikKE1Vu",
            "bG9ja1dhbGxldFJlcXVlc3QSEgoKcGFzc3BocmFzZRgBIAEoCSITChFMb2Nr",
            "V2FsbGV0UmVxdWVzdCJKChNEcmFpbkFkZHJlc3NSZXF1ZXN0EhYKDnNvdXJj",
            "ZV9hZGRyZXNzGAEgASgMEhsKE2Rlc3RpbmF0aW9uX2FkZHJlc3MYAiABKAwi",
            "awoRRHJhaW5BZGRyZXNzUmVwbHkSDwoHc3VjY2VzcxgBIAEoCBIdCgdyZXN1",
            "bHRzGAIgAygLMgwuY29yZS5SZXN1bHQSJgoLdHJhbnNhY3Rpb24YAyABKAsy",
            "ES5jb3JlLlRyYW5zYWN0aW9uIlsKEkJhbGFuY2VVbmxvY2tFdmVudBIUCgxi",
            "bG9ja19oZWlnaHQYASABKAUSFwoPYW1vdW50X3VubG9ja2VkGAIgASgDEhYK",
            "DmxvY2tlZF9iYWxhbmNlGAMgASgDIpwBChZBZGRyZXNzQmFsYW5jZVNjaGVk",
            "dWxlEg8KB2FkZHJlc3MYASABKAwSFgoOdW5sb2NrX2JhbGFuY2UYAiABKAMS",
            "FgoObG9ja2VkX2JhbGFuY2UYAyABKAMSFQoNdG90YWxfYmFsYW5jZRgEIAEo",
            "AxIqCghzY2hlZHVsZRgFIAMoCzIYLmNvcmUuQmFsYW5jZVVubG9ja0V2ZW50",
            "IjQKH0dldEJhbGFuY2VVbmxvY2tTY2hlZHVsZVJlcXVlc3QSEQoJYWRkcmVz",
            "c2VzGAEgAygMIocBCh1HZXRCYWxhbmNlVW5sb2NrU2NoZWR1bGVSZXBseRIP",
            "CgdzdWNjZXNzGAEgASgIEh0KB3Jlc3VsdHMYAiADKAsyDC5jb3JlLlJlc3Vs",
            "dBI2ChBhZGRyZXNzX3NjaGVkdWxlGAMgAygLMhwuY29yZS5BZGRyZXNzQmFs",
            "YW5jZVNjaGVkdWxlMuElCgVBZG1pbhIyCgZHZXRQb3ASEy5jb3JlLkdldFBv",
            "cFJlcXVlc3QaES5jb3JlLkdldFBvcFJlcGx5IgASMwoHQWRkTm9kZRIRLmNv",
            "cmUuTm9kZVJlcXVlc3QaEy5jb3JlLlByb3RvY29sUmVwbHkiABI0CgZTZXRC",
            "YW4SEy5jb3JlLlNldEJhblJlcXVlc3QaEy5jb3JlLlByb3RvY29sUmVwbHki",
            "ABI1CgdHZXRJbmZvEhQuY29yZS5HZXRJbmZvUmVxdWVzdBoSLmNvcmUuR2V0",
            "SW5mb1JlcGx5IgASUwoRR2V0RGlhZ25vc3RpY0luZm8SHi5jb3JlLkdldERp",
            "YWdub3N0aWNJbmZvUmVxdWVzdBocLmNvcmUuR2V0RGlhZ25vc3RpY0luZm9S",
            "ZXBseSIAEjYKClJlbW92ZU5vZGUSES5jb3JlLk5vZGVSZXF1ZXN0GhMuY29y",
            "ZS5Qcm90b2NvbFJlcGx5IgASOAoIU3RvcFBvb2wSFS5jb3JlLlN0b3BQb29s",
            "UmVxdWVzdBoTLmNvcmUuU3RvcFBvb2xSZXBseSIAEjoKCVN1Ym1pdFBvcBIW",
            "LmNvcmUuU3VibWl0UG9wUmVxdWVzdBoTLmNvcmUuUHJvdG9jb2xSZXBseSIA",
            "EjsKCVNlbmRDb2lucxIWLmNvcmUuU2VuZENvaW5zUmVxdWVzdBoULmNvcmUu",
            "U2VuZENvaW5zUmVwbHkiABJlChdTZW5kQWx0Q2hhaW5FbmRvcnNlbWVudBIk",
            "LmNvcmUuU2VuZEFsdENoYWluRW5kb3JzZW1lbnRSZXF1ZXN0GiIuY29yZS5T",
            "ZW5kQWx0Q2hhaW5FbmRvcnNlbWVudFJlcGx5IgASOwoJR2V0QmxvY2tzEhYu",
            "Y29yZS5HZXRCbG9ja3NSZXF1ZXN0GhQuY29yZS5HZXRCbG9ja3NSZXBseSIA",
            "EjsKCVN0YXJ0UG9vbBIWLmNvcmUuU3RhcnRQb29sUmVxdWVzdBoULmNvcmUu",
            "U3RhcnRQb29sUmVwbHkiABJcChRSZXN0YXJ0UG9vbFdlYlNlcnZlchIhLmNv",
            "cmUuUmVzdGFydFBvb2xXZWJTZXJ2ZXJSZXF1ZXN0Gh8uY29yZS5SZXN0YXJ0",
            "UG9vbFdlYlNlcnZlclJlcGx5IgASPgoKR2V0SGlzdG9yeRIXLmNvcmUuR2V0",
            "SGlzdG9yeVJlcXVlc3QaFS5jb3JlLkdldEhpc3RvcnlSZXBseSIAEj4KCkdl",
            "dEJhbGFuY2USFy5jb3JlLkdldEJhbGFuY2VSZXF1ZXN0GhUuY29yZS5HZXRC",
            "YWxhbmNlUmVwbHkiABI8CgpTZXRBbGxvd2VkEhcuY29yZS5TZXRBbGxvd2Vk",
            "UmVxdWVzdBoTLmNvcmUuUHJvdG9jb2xSZXBseSIAEj4KCkxpc3RCYW5uZWQS",
            "Fy5jb3JlLkxpc3RCYW5uZWRSZXF1ZXN0GhUuY29yZS5MaXN0QmFubmVkUmVw",
            "bHkiABJQChBMaXN0QmFubmVkTWluZXJzEh0uY29yZS5MaXN0QmFubmVkTWlu",
            "ZXJzUmVxdWVzdBobLmNvcmUuTGlzdEJhbm5lZE1pbmVyc1JlcGx5IgASPgoL",
            "Q2xlYXJCYW5uZWQSGC5jb3JlLkNsZWFyQmFubmVkUmVxdWVzdBoTLmNvcmUu",
            "UHJvdG9jb2xSZXBseSIAEkoKEUNsZWFyQmFubmVkTWluZXJzEh4uY29yZS5D",
            "bGVhckJhbm5lZE1pbmVyc1JlcXVlc3QaEy5jb3JlLlByb3RvY29sUmVwbHki",
            "ABJACgxTdWJtaXRCbG9ja3MSGS5jb3JlLlN1Ym1pdEJsb2Nrc1JlcXVlc3Qa",
            "Ey5jb3JlLlByb3RvY29sUmVwbHkiABJACgxDbGVhckFsbG93ZWQSGS5jb3Jl",
            "LkNsZWFyQWxsb3dlZFJlcXVlc3QaEy5jb3JlLlByb3RvY29sUmVwbHkiABJB",
            "CgtHZXRQZWVySW5mbxIYLmNvcmUuR2V0UGVlckluZm9SZXF1ZXN0GhYuY29y",
            "ZS5HZXRQZWVySW5mb1JlcGx5IgASQQoLU2lnbk1lc3NhZ2USGC5jb3JlLlNp",
            "Z25NZXNzYWdlUmVxdWVzdBoWLmNvcmUuU2lnbk1lc3NhZ2VSZXBseSIAEkEK",
            "C0xpc3RBbGxvd2VkEhguY29yZS5MaXN0QWxsb3dlZFJlcXVlc3QaFi5jb3Jl",
            "Lkxpc3RBbGxvd2VkUmVwbHkiABJECgxCYWNrdXBXYWxsZXQSGS5jb3JlLkJh",
            "Y2t1cFdhbGxldFJlcXVlc3QaFy5jb3JlLkJhY2t1cFdhbGxldFJlcGx5IgAS",
            "RAoMSW1wb3J0V2FsbGV0EhkuY29yZS5JbXBvcnRXYWxsZXRSZXF1ZXN0Ghcu",
            "Y29yZS5JbXBvcnRXYWxsZXRSZXBseSIAEkcKDUdldE5ld0FkZHJlc3MSGi5j",
            "b3JlLkdldE5ld0FkZHJlc3NSZXF1ZXN0GhguY29yZS5HZXROZXdBZGRyZXNz",
            "UmVwbHkiABJHCg1HZXRCbG9ja1RpbWVzEhouY29yZS5HZXRCbG9ja1RpbWVz",
            "UmVxdWVzdBoYLmNvcmUuR2V0QmxvY2tUaW1lc1JlcGx5IgASRwoNU3RhcnRT",
            "b2xvUG9vbBIaLmNvcmUuU3RhcnRTb2xvUG9vbFJlcXVlc3QaGC5jb3JlLlN0",
            "YXJ0U29sb1Bvb2xSZXBseSIAEkoKDkdldEJsb2NrY2hhaW5zEhsuY29yZS5H",
            "ZXRCbG9ja2NoYWluc1JlcXVlc3QaGS5jb3JlLkdldEJsb2NrY2hhaW5zUmVw",
            "bHkiABJKChFTZXRUcmFuc2FjdGlvbkZlZRIeLmNvcmUuU2V0VHJhbnNhY3Rp",
            "b25GZWVSZXF1ZXN0GhMuY29yZS5Qcm90b2NvbFJlcGx5IgASSgoORHVtcFBy",
            "aXZhdGVLZXkSGy5jb3JlLkR1bXBQcml2YXRlS2V5UmVxdWVzdBoZLmNvcmUu",
            "RHVtcFByaXZhdGVLZXlSZXBseSIAElAKEEltcG9ydFByaXZhdGVLZXkSHS5j",
            "b3JlLkltcG9ydFByaXZhdGVLZXlSZXF1ZXN0GhsuY29yZS5JbXBvcnRQcml2",
            "YXRlS2V5UmVwbHkiABJMChJTdWJtaXRUcmFuc2FjdGlvbnMSHy5jb3JlLlN1",
            "Ym1pdFRyYW5zYWN0aW9uc1JlcXVlc3QaEy5jb3JlLlByb3RvY29sUmVwbHki",
            "ABJNCg9HZXRUcmFuc2FjdGlvbnMSHC5jb3JlLkdldFRyYW5zYWN0aW9uc1Jl",
            "cXVlc3QaGi5jb3JlLkdldFRyYW5zYWN0aW9uc1JlcGx5IgASTQoPVmFsaWRh",
            "dGVBZGRyZXNzEhwuY29yZS5WYWxpZGF0ZUFkZHJlc3NSZXF1ZXN0GhouY29y",
            "ZS5WYWxpZGF0ZUFkZHJlc3NSZXBseSIAEmUKF0dlbmVyYXRlTXVsdGlzaWdB",
            "ZGRyZXNzEiQuY29yZS5HZW5lcmF0ZU11bHRpc2lnQWRkcmVzc1JlcXVlc3Qa",
            "Ii5jb3JlLkdlbmVyYXRlTXVsdGlzaWdBZGRyZXNzUmVwbHkiABJiChZNYWtl",
            "VW5zaWduZWRNdWx0aXNpZ1R4EiMuY29yZS5NYWtlVW5zaWduZWRNdWx0aXNp",
            "Z1R4UmVxdWVzdBohLmNvcmUuTWFrZVVuc2lnbmVkTXVsdGlzaWdUeFJlcGx5",
            "IgASUAoQU3VibWl0TXVsdGlzaWdUeBIdLmNvcmUuU3VibWl0TXVsdGlzaWdU",
            "eFJlcXVlc3QaGy5jb3JlLlN1Ym1pdE11bHRpc2lnVHhSZXBseSIAElAKFEdl",
            "dEJpdGNvaW5CbG9ja0luZGV4EiEuY29yZS5HZXRCaXRjb2luQmxvY2tJbmRl",
            "eFJlcXVlc3QaEy5jb3JlLlByb3RvY29sUmVwbHkiABJQChBHZXRCbG9ja1Rl",
            "bXBsYXRlEh0uY29yZS5HZXRCbG9ja1RlbXBsYXRlUmVxdWVzdBobLmNvcmUu",
            "R2V0QmxvY2tUZW1wbGF0ZVJlcGx5IgASUwoRR2V0U2lnbmF0dXJlSW5kZXgS",
            "Hi5jb3JlLkdldFNpZ25hdHVyZUluZGV4UmVxdWVzdBocLmNvcmUuR2V0U2ln",
            "bmF0dXJlSW5kZXhSZXBseSIAElMKEVNldERlZmF1bHRBZGRyZXNzEh4uY29y",
            "ZS5TZXREZWZhdWx0QWRkcmVzc1JlcXVlc3QaHC5jb3JlLlNldERlZmF1bHRB",
            "ZGRyZXNzUmVwbHkiABJZChNHZXRMYXN0Qml0Y29pbkJsb2NrEiAuY29yZS5H",
            "ZXRMYXN0Qml0Y29pbkJsb2NrUmVxdWVzdBoeLmNvcmUuR2V0TGFzdEJpdGNv",
            "aW5CbG9ja1JlcGx5IgASXAoUR2V0UHJvdGVjdGVkQ2hpbGRyZW4SIS5jb3Jl",
            "LkdldFByb3RlY3RlZENoaWxkcmVuUmVxdWVzdBofLmNvcmUuR2V0UHJvdGVj",
            "dGVkQ2hpbGRyZW5SZXBseSIAElwKFEdldFByb3RlY3RpbmdQYXJlbnRzEiEu",
            "Y29yZS5HZXRQcm90ZWN0aW5nUGFyZW50c1JlcXVlc3QaHy5jb3JlLkdldFBy",
            "b3RlY3RpbmdQYXJlbnRzUmVwbHkiABJfChVHZXRXYWxsZXRUcmFuc2FjdGlv",
            "bnMSIi5jb3JlLkdldFdhbGxldFRyYW5zYWN0aW9uc1JlcXVlc3QaIC5jb3Jl",
            "LkdldFdhbGxldFRyYW5zYWN0aW9uc1JlcGx5IgASYgoWR2V0RW5kb3JzZW1l",
            "bnRzT2ZCbG9jaxIjLmNvcmUuR2V0RW5kb3JzZW1lbnRzT2ZCbG9ja1JlcXVl",
            "c3QaIS5jb3JlLkdldEVuZG9yc2VtZW50c09mQmxvY2tSZXBseSIAEmIKFkdl",
            "dFBlbmRpbmdUcmFuc2FjdGlvbnMSIy5jb3JlLkdldFBlbmRpbmdUcmFuc2Fj",
            "dGlvbnNSZXF1ZXN0GiEuY29yZS5HZXRQZW5kaW5nVHJhbnNhY3Rpb25zUmVw",
            "bHkiABJiChZHZXRQb1BFbmRvcnNlbWVudHNJbmZvEiMuY29yZS5HZXRQb1BF",
            "bmRvcnNlbWVudHNJbmZvUmVxdWVzdBohLmNvcmUuR2V0UG9QRW5kb3JzZW1l",
            "bnRzSW5mb1JlcGx5IgASLAoEUGluZxIRLmNvcmUuUGluZ1JlcXVlc3QaDy5j",
            "b3JlLlBpbmdSZXBseSIAEkQKDEdldFN0YXRlSW5mbxIZLmNvcmUuR2V0U3Rh",
            "dGVJbmZvUmVxdWVzdBoXLmNvcmUuR2V0U3RhdGVJbmZvUmVwbHkiABJECgxH",
            "ZXRMYXN0QmxvY2sSGS5jb3JlLkdldExhc3RCbG9ja1JlcXVlc3QaFy5jb3Jl",
            "LkdldExhc3RCbG9ja1JlcGx5IgASTQoPTGlzdEJsb2Nrc1NpbmNlEhwuY29y",
            "ZS5MaXN0QmxvY2tzU2luY2VSZXF1ZXN0GhouY29yZS5MaXN0QmxvY2tzU2lu",
            "Y2VSZXBseSIAEnEKG1Ryb3VibGVzaG9vdFBvUFRyYW5zYWN0aW9ucxIoLmNv",
            "cmUuVHJvdWJsZXNob290UG9QVHJhbnNhY3Rpb25zUmVxdWVzdBomLmNvcmUu",
            "VHJvdWJsZXNob290UG9QVHJhbnNhY3Rpb25zUmVwbHkiABJACgxTdG9wTm9k",
            "ZUNvcmUSGS5jb3JlLlN0b3BOb2RlQ29yZVJlcXVlc3QaEy5jb3JlLlByb3Rv",
            "Y29sUmVwbHkiABJMChJSZWZyZXNoV2FsbGV0Q2FjaGUSHy5jb3JlLlJlZnJl",
            "c2hXYWxsZXRDYWNoZVJlcXVlc3QaEy5jb3JlLlByb3RvY29sUmVwbHkiABJC",
            "Cg1FbmNyeXB0V2FsbGV0EhouY29yZS5FbmNyeXB0V2FsbGV0UmVxdWVzdBoT",
            "LmNvcmUuUHJvdG9jb2xSZXBseSIAEkIKDURlY3J5cHRXYWxsZXQSGi5jb3Jl",
            "LkRlY3J5cHRXYWxsZXRSZXF1ZXN0GhMuY29yZS5Qcm90b2NvbFJlcGx5IgAS",
            "QAoMVW5sb2NrV2FsbGV0EhkuY29yZS5VbmxvY2tXYWxsZXRSZXF1ZXN0GhMu",
            "Y29yZS5Qcm90b2NvbFJlcGx5IgASPAoKTG9ja1dhbGxldBIXLmNvcmUuTG9j",
            "a1dhbGxldFJlcXVlc3QaEy5jb3JlLlByb3RvY29sUmVwbHkiABJECgxEcmFp",
            "bkFkZHJlc3MSGS5jb3JlLkRyYWluQWRkcmVzc1JlcXVlc3QaFy5jb3JlLkRy",
            "YWluQWRkcmVzc1JlcGx5IgASaAoYR2V0QmFsYW5jZVVubG9ja1NjaGVkdWxl",
            "EiUuY29yZS5HZXRCYWxhbmNlVW5sb2NrU2NoZWR1bGVSZXF1ZXN0GiMuY29y",
            "ZS5HZXRCYWxhbmNlVW5sb2NrU2NoZWR1bGVSZXBseSIAQiYKEW5vZGVjb3Jl",
            "LmFwaS5ncnBjQhFWZXJpQmxvY2tNZXNzYWdlc2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.AddressBalance), global::Core.AddressBalance.Parser, new[]{ "Address", "UnlockedAmount", "LockedAmount", "TotalAmount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.Output), global::Core.Output.Parser, new[]{ "Address", "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.Paging), global::Core.Paging.Parser, new[]{ "PageNumber", "ResultsPerPage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.NumericFilter), global::Core.NumericFilter.Parser, new[]{ "Operator", "Value", "SecondaryValue" }, null, new[]{ typeof(global::Core.NumericFilter.Types.Operator) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.Endpoint), global::Core.Endpoint.Parser, new[]{ "Address", "Port" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.MultisigSlot), global::Core.MultisigSlot.Parser, new[]{ "Populated", "Signature", "PublicKey", "OwnerAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.MultisigBundle), global::Core.MultisigBundle.Parser, new[]{ "Slots" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.SignedTransaction), global::Core.SignedTransaction.Parser, new[]{ "Signature", "PublicKey", "SignatureIndex", "Transaction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.SignedMultisigTransaction), global::Core.SignedMultisigTransaction.Parser, new[]{ "SignatureBundle", "Transaction", "SignatureIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.CoinbaseTransaction), global::Core.CoinbaseTransaction.Parser, new[]{ "PowCoinbaseAmount", "PopCoinbaseAmount", "PowFeeShare", "PopFeeShare", "PowOutputs", "PopOutputs", "BlockHeight", "TxId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.BitcoinBlockHeader), global::Core.BitcoinBlockHeader.Parser, new[]{ "Header" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.PoPEndorsementInfo), global::Core.PoPEndorsementInfo.Parser, new[]{ "MinerAddress", "EndorsedVeriblockBlockHash", "ContainedInVeriblockBlockHash", "VeriblockTxId", "BitcoinTransaction", "BitcoinTxId", "BitcoinBlockHeader", "BitcoinBlockHeaderHash", "Reward", "Finalized", "EndorsedBlockNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.StandardAddress), global::Core.StandardAddress.Parser, new[]{ "StandardAddress_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.TroubleshootPoPTransactionsRequest), global::Core.TroubleshootPoPTransactionsRequest.Parser, new[]{ "OnlyFailures", "SearchLength", "Addresses", "Transactions" }, new[]{ "SearchParamater" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.AddressSet), global::Core.AddressSet.Parser, new[]{ "Addresses" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.TransactionSet), global::Core.TransactionSet.Parser, new[]{ "Txids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.TroubleshootPoPTransactionsReply), global::Core.TroubleshootPoPTransactionsReply.Parser, new[]{ "Success", "Results", "PopProblemReports" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.PoPTransactionProblemReport), global::Core.PoPTransactionProblemReport.Parser, new[]{ "Address", "Txid", "EndorsedVbkBlockHash", "EndorsedVbkBlockIndex", "IncludedInVbkBlockHash", "IncludedInVbkBlockIndex", "PopPayoutVbkBlockHash", "PopPayoutVbkBlockIndex", "PaidOutInPopPayoutVbkBlock", "PopPayoutVbkAmount", "BitcoinTxid", "IncludedInBtcBlockHash", "IncludedInBtcBlockIndex", "EndorsedVbkBlockInMainChain", "IncludedInVbkBlockInMainChain", "IncludedInBtcBlockInMainChain", "FirstBtcBlockOfEquivalentPopEndorsementsIndex", "CurrentBlockHeight" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetPoPEndorsementsInfoRequest), global::Core.GetPoPEndorsementsInfoRequest.Parser, new[]{ "SearchLength", "Addresses" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetPoPEndorsementsInfoReply), global::Core.GetPoPEndorsementsInfoReply.Parser, new[]{ "Success", "Results", "PopEndorsements" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetProtectedChildrenRequest), global::Core.GetProtectedChildrenRequest.Parser, new[]{ "SearchLength", "VeriblockBlockHash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetProtectedChildrenReply), global::Core.GetProtectedChildrenReply.Parser, new[]{ "Success", "Results", "PopEndorsements" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetProtectingParentsRequest), global::Core.GetProtectingParentsRequest.Parser, new[]{ "SearchLength", "VeriblockBlockHash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetProtectingParentsReply), global::Core.GetProtectingParentsReply.Parser, new[]{ "Success", "Results", "PopEndorsements" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.Transaction), global::Core.Transaction.Parser, new[]{ "Type", "SourceAddress", "SourceAmount", "Outputs", "TransactionFee", "Data", "BitcoinTransaction", "EndorsedBlockHeader", "BitcoinBlockHeaderOfProof", "MerklePath", "ContextBitcoinBlockHeaders", "Timestamp", "Size", "TxId" }, null, new[]{ typeof(global::Core.Transaction.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.UnsignedMultisigTransactionWithIndex), global::Core.UnsignedMultisigTransactionWithIndex.Parser, new[]{ "UnsignedMultisigTansaction", "SignatureIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.TransactionUnion), global::Core.TransactionUnion.Parser, new[]{ "Unsigned", "Signed", "SignedMultisig" }, new[]{ "Transaction" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.VBKTransactionWithContext), global::Core.VBKTransactionWithContext.Parser, new[]{ "MerklePath", "SignedTransaction", "SignedMultisigTransaction" }, new[]{ "Transaction" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.VBKMerklePath), global::Core.VBKMerklePath.Parser, new[]{ "Layers", "BottomData", "BottomDataIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.TransactionMeta), global::Core.TransactionMeta.Parser, new[]{ "TxId", "BlockHeader", "AppearsIn", "Confirmations", "Status" }, null, new[]{ typeof(global::Core.TransactionMeta.Types.Status) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.WalletTransaction), global::Core.WalletTransaction.Parser, new[]{ "TxId", "Address", "Timestamp", "Type", "NetAmount", "Input", "Outputs", "Meta" }, null, new[]{ typeof(global::Core.WalletTransaction.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.PoPDatastore), global::Core.PoPDatastore.Parser, new[]{ "DatastoreHash", "EndorsedVeriblockHeadersHash", "EndorsedAltchainHeadersHash", "VeriblockHeaderEndorsements", "AltchainHeaderEndorsements" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.AltchainIdAltchainHeaderEndorsementCountsPair), global::Core.AltchainIdAltchainHeaderEndorsementCountsPair.Parser, new[]{ "AltchainIdentifier", "AltchainHeaderEndorsementCountPairs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.BitcoinHeaderVeriBlockEndorsementCountsPair), global::Core.BitcoinHeaderVeriBlockEndorsementCountsPair.Parser, new[]{ "BitcoinHeader", "VeriblockHeaderEndorsementCountPairs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.VeriBlockHeaderEndorsementCountPair), global::Core.VeriBlockHeaderEndorsementCountPair.Parser, new[]{ "VeriblockHeader", "EndorsementCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.AltchainHeaderEndorsementCountPair), global::Core.AltchainHeaderEndorsementCountPair.Parser, new[]{ "AltchainHeader", "EndorsementCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.BlockFeeTable), global::Core.BlockFeeTable.Parser, new[]{ "PopFeeShare" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.BlockContentMetapackage), global::Core.BlockContentMetapackage.Parser, new[]{ "CoinbaseTransaction", "PopDatastore", "MinerComment", "LedgerHash", "ExtraNonce", "Hash", "BlockFeeTable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.BlockSummary), global::Core.BlockSummary.Parser, new[]{ "Number", "Timestamp", "Hash", "PreviousHash", "SecondPreviousHash", "ThirdPreviousHash", "DecodedDifficulty", "WinningNonce", "NumRegularTransactions", "NumPopTransactions", "TotalFees", "PowCoinbaseReward", "PopCoinbaseReward", "Size", "LedgerHash", "MinerComment", "Version", "MerkleRoot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.LightBlockSummary), global::Core.LightBlockSummary.Parser, new[]{ "Number", "Timestamp", "Hash", "PreviousHash", "SecondPreviousHash", "ThirdPreviousHash", "DecodedDifficulty", "WinningNonce", "NumKnownRegularTransactions", "NumPopTransactions", "PowCoinbaseReward", "PopCoinbaseReward", "LedgerHash", "MinerComment", "NormalTransactionMerkleRoot", "Version", "MerkleRoot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.Block), global::Core.Block.Parser, new[]{ "Number", "Timestamp", "Hash", "PreviousHash", "SecondPreviousHash", "ThirdPreviousHash", "EncodedDifficulty", "WinningNonce", "RegularTransactions", "PopTransactions", "TotalFees", "PowCoinbaseReward", "PopCoinbaseReward", "BitcoinBlockHeaders", "BlockContentMetapackage", "Size", "Version", "MerkleRoot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.BlockHeader), global::Core.BlockHeader.Parser, new[]{ "Header", "Hash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.FilteredBlock), global::Core.FilteredBlock.Parser, new[]{ "Number", "Version", "PreviousHash", "SecondPreviousHash", "ThirdPreviousHash", "MerkleRoot", "Timestamp", "Difficulty", "Nonce", "TotalRegularTransactions", "TotalPopTransactions", "MerkleHashes", "MerkleFlags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.LightVBKBlock), global::Core.LightVBKBlock.Parser, new[]{ "Number", "Timestamp", "Hash", "PreviousHash", "SecondPreviousHash", "ThirdPreviousHash", "EncodedDifficulty", "WinningNonce", "KnownRegularTransactions", "PopTransactions", "PowCoinbaseReward", "PopCoinbaseReward", "BitcoinBlockHeaders", "BlockContentMetapackage", "NormalTransactionMerkleRoot", "Version", "MerkleRoot" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.BlockFilter), global::Core.BlockFilter.Parser, new[]{ "Hash", "Index", "Number" }, new[]{ "Filters" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetBlocksRequest), global::Core.GetBlocksRequest.Parser, new[]{ "SearchLength", "Filters" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.Result), global::Core.Result.Parser, new[]{ "Error", "Code", "Message", "Details" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.ProtocolReply), global::Core.ProtocolReply.Parser, new[]{ "Success", "Results" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetBlocksReply), global::Core.GetBlocksReply.Parser, new[]{ "Success", "Results", "Blocks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.BackupWalletRequest), global::Core.BackupWalletRequest.Parser, new[]{ "TargetLocation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.BackupWalletReply), global::Core.BackupWalletReply.Parser, new[]{ "Success", "Results" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.ImportWalletRequest), global::Core.ImportWalletRequest.Parser, new[]{ "SourceLocation", "Passphrase" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.ImportWalletReply), global::Core.ImportWalletReply.Parser, new[]{ "Success", "Results" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.Announce), global::Core.Announce.Parser, new[]{ "Reply", "NodeInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.NodeInfo), global::Core.NodeInfo.Parser, new[]{ "Address", "Port", "Application", "ProtocolVersion", "Platform", "StartTimestamp", "Id", "Share", "Capabilities" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.AddBlocksRequest), global::Core.AddBlocksRequest.Parser, new[]{ "Blocks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.BlockInfo), global::Core.BlockInfo.Parser, new[]{ "Number", "Hash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.AddTransactionsReply), global::Core.AddTransactionsReply.Parser, new[]{ "Success", "Results", "TxIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.Heartbeat), global::Core.Heartbeat.Parser, new[]{ "Block" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.BlockQuery), global::Core.BlockQuery.Parser, new[]{ "Block", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.BlockQueryReply), global::Core.BlockQueryReply.Parser, new[]{ "Matched", "Block", "Id" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.SyncRequest), global::Core.SyncRequest.Parser, new[]{ "StartingBlockHeight", "SyncTransactions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.NetworkInfoRequest), global::Core.NetworkInfoRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.NetworkInfoReply), global::Core.NetworkInfoReply.Parser, new[]{ "AvailableNodes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.Acknowledgement), global::Core.Acknowledgement.Parser, new[]{ "MessageId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.AdvertiseBlocks), global::Core.AdvertiseBlocks.Parser, new[]{ "Headers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.TransactionAnnounce), global::Core.TransactionAnnounce.Parser, new[]{ "Type", "TxId" }, null, new[]{ typeof(global::Core.TransactionAnnounce.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.AdvertiseTransaction), global::Core.AdvertiseTransaction.Parser, new[]{ "Transactions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.BlockRequest), global::Core.BlockRequest.Parser, new[]{ "Headers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.TransactionRequest), global::Core.TransactionRequest.Parser, new[]{ "Transactions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.KeystoneQuery), global::Core.KeystoneQuery.Parser, new[]{ "Headers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.NotFound), global::Core.NotFound.Parser, new[]{ "Type", "Id" }, null, new[]{ typeof(global::Core.NotFound.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.CreateFilter), global::Core.CreateFilter.Parser, new[]{ "Filter", "HashIterations", "Tweak", "Flags" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.AddFilter), global::Core.AddFilter.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.ClearFilter), global::Core.ClearFilter.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.Event), global::Core.Event.Parser, new[]{ "Block", "Transaction", "Announce", "Heartbeat", "BlockQuery", "BlockQueryReply", "NetworkInfoRequest", "NetworkInfoReply", "Acknowledgement", "AdvertiseBlocks", "BlockRequest", "KeystoneQuery", "AdvertiseTx", "TxRequest", "NotFound", "CreateFilter", "AddFilter", "ClearFilter", "FilteredBlockRequest", "FilteredBlock", "Id", "Acknowledge" }, new[]{ "Results" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.NodeRequest), global::Core.NodeRequest.Parser, new[]{ "Endpoint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.StartPoolRequest), global::Core.StartPoolRequest.Parser, new[]{ "Type" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.StartPoolReply), global::Core.StartPoolReply.Parser, new[]{ "Success", "Results" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.StopPoolRequest), global::Core.StopPoolRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.StopPoolReply), global::Core.StopPoolReply.Parser, new[]{ "Success", "Results" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.RestartPoolWebServerRequest), global::Core.RestartPoolWebServerRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.RestartPoolWebServerReply), global::Core.RestartPoolWebServerReply.Parser, new[]{ "Success", "Results" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetPopRequest), global::Core.GetPopRequest.Parser, new[]{ "BlockNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetPopReply), global::Core.GetPopReply.Parser, new[]{ "Success", "Results", "BlockHeight", "Version", "PreviousBlockHash", "SecondPreviousBlockHash", "ThirdPreviousBlockHash", "MerkleRoot", "Timestamp", "EncodedDifficulty", "Nonce", "PopMinerAddress", "FullPop", "LastKnownBlock", "LastKnownBlockContext" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetInfoRequest), global::Core.GetInfoRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetDiagnosticInfoRequest), global::Core.GetDiagnosticInfoRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetBalanceRequest), global::Core.GetBalanceRequest.Parser, new[]{ "Addresses" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetBalanceReply), global::Core.GetBalanceReply.Parser, new[]{ "Success", "Results", "Confirmed", "Unconfirmed" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.SubmitPopRequest), global::Core.SubmitPopRequest.Parser, new[]{ "EndorsedBlockHeader", "BitcoinTransaction", "BitcoinMerklePathToRoot", "BitcoinBlockHeaderOfProof", "ContextBitcoinBlockHeaders", "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.PoPEndorsement), global::Core.PoPEndorsement.Parser, new[]{ "EndorsedBlockHeader", "BitcoinTransaction", "BitcoinMerklePathToRoot", "BitcoinBlockHeaderOfProof", "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetEndorsementsOfBlockRequest), global::Core.GetEndorsementsOfBlockRequest.Parser, new[]{ "Filter" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetEndorsementsOfBlockReply), global::Core.GetEndorsementsOfBlockReply.Parser, new[]{ "Success", "Endorsements" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.SendCoinsRequest), global::Core.SendCoinsRequest.Parser, new[]{ "SourceAddress", "Amounts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.SendCoinsReply), global::Core.SendCoinsReply.Parser, new[]{ "Success", "Results", "TxIds" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.SendAltChainEndorsementRequest), global::Core.SendAltChainEndorsementRequest.Parser, new[]{ "PublicationData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.SendAltChainEndorsementReply), global::Core.SendAltChainEndorsementReply.Parser, new[]{ "Success", "Results", "Transaction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetHistoryRequest), global::Core.GetHistoryRequest.Parser, new[]{ "Addresses" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.AddressHistory), global::Core.AddressHistory.Parser, new[]{ "Address", "Balance", "BlocksMined", "ConfirmedTransactions", "PendingTransactions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetHistoryReply), global::Core.GetHistoryReply.Parser, new[]{ "Success", "Results", "Addresses" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetPeerInfoRequest), global::Core.GetPeerInfoRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.NodeHeight), global::Core.NodeHeight.Parser, new[]{ "Peer", "Height" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetPeerInfoReply), global::Core.GetPeerInfoReply.Parser, new[]{ "Success", "Results", "Endpoints", "ConnectedNodes", "DisconnectedNodes", "CandidateNodes", "NodeHeights" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetBlockchainsRequest), global::Core.GetBlockchainsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetBlockchainsReply), global::Core.GetBlockchainsReply.Parser, new[]{ "Success", "Results", "BestBlockchainLength", "LongestBlockchainLength" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.SubmitBlocksRequest), global::Core.SubmitBlocksRequest.Parser, new[]{ "Blocks" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetBlockTimesRequest), global::Core.GetBlockTimesRequest.Parser, new[]{ "HistoryLength" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetBlockTimesReply), global::Core.GetBlockTimesReply.Parser, new[]{ "Success", "Results", "Times" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.StartSoloPoolRequest), global::Core.StartSoloPoolRequest.Parser, new[]{ "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.StartSoloPoolReply), global::Core.StartSoloPoolReply.Parser, new[]{ "Success", "Results" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetSignatureIndexRequest), global::Core.GetSignatureIndexRequest.Parser, new[]{ "Addresses" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.SetDefaultAddressRequest), global::Core.SetDefaultAddressRequest.Parser, new[]{ "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.AddressSignatureIndexes), global::Core.AddressSignatureIndexes.Parser, new[]{ "Address", "PoolIndex", "BlockchainIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetSignatureIndexReply), global::Core.GetSignatureIndexReply.Parser, new[]{ "Success", "Results", "Indexes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.SetDefaultAddressReply), global::Core.SetDefaultAddressReply.Parser, new[]{ "Success", "Results" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetTransactionsRequest), global::Core.GetTransactionsRequest.Parser, new[]{ "SearchLength", "Ids" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.TransactionInfo), global::Core.TransactionInfo.Parser, new[]{ "Confirmations", "Transaction", "BlockNumber", "Timestamp", "EndorsedBlockHash", "BitcoinBlockHash", "BitcoinTxId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetTransactionsReply), global::Core.GetTransactionsReply.Parser, new[]{ "Success", "Results", "Transactions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.SetTransactionFeeRequest), global::Core.SetTransactionFeeRequest.Parser, new[]{ "Amount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.DumpPrivateKeyRequest), global::Core.DumpPrivateKeyRequest.Parser, new[]{ "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.DumpPrivateKeyReply), global::Core.DumpPrivateKeyReply.Parser, new[]{ "Success", "Results", "Address", "PrivateKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.ImportPrivateKeyRequest), global::Core.ImportPrivateKeyRequest.Parser, new[]{ "PrivateKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.ImportPrivateKeyReply), global::Core.ImportPrivateKeyReply.Parser, new[]{ "Success", "Results", "ResultantAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetLastBitcoinBlockRequest), global::Core.GetLastBitcoinBlockRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetLastBlockRequest), global::Core.GetLastBlockRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetLastBitcoinBlockReply), global::Core.GetLastBitcoinBlockReply.Parser, new[]{ "Success", "Results", "Header" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetLastBlockReply), global::Core.GetLastBlockReply.Parser, new[]{ "Success", "Results", "Header" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.ListBlocksSinceRequest), global::Core.ListBlocksSinceRequest.Parser, new[]{ "Hash" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.ListBlocksSinceReply), global::Core.ListBlocksSinceReply.Parser, new[]{ "Success", "Results", "Removed", "Added" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.SubmitTransactionsRequest), global::Core.SubmitTransactionsRequest.Parser, new[]{ "Transactions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetInfoReply), global::Core.GetInfoReply.Parser, new[]{ "Success", "Results", "NumberOfBlocks", "LastBlock", "DefaultAddress", "TransactionFee", "EstimatedHashrate", "DecodedDifficulty" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetDiagnosticInfoReply), global::Core.GetDiagnosticInfoReply.Parser, new[]{ "Success", "Results", "UserLanguage", "JavaRuntimeName", "SunBootLibraryPath", "JavaRuntimeVersion", "JavaSpecificationVersion", "OsName", "OsArch", "OsVersion", "MemoryTotalGb", "MemoryMaxGb", "ProcessorCount", "ProcessorType", "WorkingDirectory", "DatetimeNowUtc", "NodecorePropertiesSource", "NodecorePropertiesValues" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetPendingTransactionsRequest), global::Core.GetPendingTransactionsRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetPendingTransactionsReply), global::Core.GetPendingTransactionsReply.Parser, new[]{ "Success", "Results", "Transactions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetNewAddressRequest), global::Core.GetNewAddressRequest.Parser, new[]{ "Count" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetNewAddressReply), global::Core.GetNewAddressReply.Parser, new[]{ "Success", "Results", "Address", "AdditionalAddresses" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.ValidateAddressRequest), global::Core.ValidateAddressRequest.Parser, new[]{ "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.ValidateAddressReply), global::Core.ValidateAddressReply.Parser, new[]{ "Success", "Results", "Address", "PublicKey", "IsRemote" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GenerateMultisigAddressRequest), global::Core.GenerateMultisigAddressRequest.Parser, new[]{ "SourceAddresses", "SignatureThresholdM" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GenerateMultisigAddressReply), global::Core.GenerateMultisigAddressReply.Parser, new[]{ "Success", "Results", "SourceAddresses", "SignatureThresholdM", "MultisigAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.MakeUnsignedMultisigTxRequest), global::Core.MakeUnsignedMultisigTxRequest.Parser, new[]{ "SourceMultisigAddress", "Amounts", "Fee", "SignatureIndexString" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.MakeUnsignedMultisigTxReply), global::Core.MakeUnsignedMultisigTxReply.Parser, new[]{ "Success", "Results", "SignatureThresholdM", "AddressCompositionCountN", "UnsignedMultisigTransactionWithIndex", "Txid", "SignatureIndex" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.SubmitMultisigTxRequest), global::Core.SubmitMultisigTxRequest.Parser, new[]{ "MultisigTransaction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.SubmitMultisigTxReply), global::Core.SubmitMultisigTxReply.Parser, new[]{ "Success", "Results", "Txid", "SignedMultisigTransaction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.SignMessageRequest), global::Core.SignMessageRequest.Parser, new[]{ "Address", "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.SignMessageReply), global::Core.SignMessageReply.Parser, new[]{ "Success", "Results", "SignedMessage", "PublicKey" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetBlockTemplateRequest), global::Core.GetBlockTemplateRequest.Parser, new[]{ "Mode", "Capabilities" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.CandidateTransaction), global::Core.CandidateTransaction.Parser, new[]{ "Fee", "Weight", "Required", "TxId", "Depends", "Transaction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetBlockTemplateReply), global::Core.GetBlockTemplateReply.Parser, new[]{ "Success", "Results", "Target", "SizeLimit", "BlockHeight", "CoinbaseValue", "MinimumTimestamp", "CurrentTimestamp", "Mutable", "PreviousBlockHash", "SecondPreviousBlockHash", "ThirdPreviousBlockHash", "PreviousLedgerHash", "Transactions" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.SetBanRequest), global::Core.SetBanRequest.Parser, new[]{ "Command", "Value", "Reason", "ExpiryTimestamp" }, null, new[]{ typeof(global::Core.SetBanRequest.Types.Command) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.SetAllowedRequest), global::Core.SetAllowedRequest.Parser, new[]{ "Command", "Value" }, null, new[]{ typeof(global::Core.SetAllowedRequest.Types.Command) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.BlackListInfo), global::Core.BlackListInfo.Parser, new[]{ "Id", "Type", "Value", "Reason", "Timestamp", "ExpiryTimestamp" }, null, new[]{ typeof(global::Core.BlackListInfo.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.WhiteListInfo), global::Core.WhiteListInfo.Parser, new[]{ "Id", "Type", "Value", "Timestamp" }, null, new[]{ typeof(global::Core.WhiteListInfo.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.ListBannedRequest), global::Core.ListBannedRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.ListAllowedRequest), global::Core.ListAllowedRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.ListBannedReply), global::Core.ListBannedReply.Parser, new[]{ "Success", "Results", "Entries" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.ListAllowedReply), global::Core.ListAllowedReply.Parser, new[]{ "Success", "Results", "Entries" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.ListBannedMinersRequest), global::Core.ListBannedMinersRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.ListBannedMinersReply), global::Core.ListBannedMinersReply.Parser, new[]{ "Success", "Results", "Clients" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.ClearBannedRequest), global::Core.ClearBannedRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.ClearBannedMinersRequest), global::Core.ClearBannedMinersRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.ClearAllowedRequest), global::Core.ClearAllowedRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.PingRequest), global::Core.PingRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.PingReply), global::Core.PingReply.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetBitcoinBlockIndexRequest), global::Core.GetBitcoinBlockIndexRequest.Parser, new[]{ "BlockHeader", "SearchLength" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetWalletTransactionsRequest), global::Core.GetWalletTransactionsRequest.Parser, new[]{ "RequestType", "Address", "TransactionType", "Status", "AmountFilter", "TimestampFilter", "Page" }, null, new[]{ typeof(global::Core.GetWalletTransactionsRequest.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetWalletTransactionsReply), global::Core.GetWalletTransactionsReply.Parser, new[]{ "Next", "Transactions", "CacheState", "Message", "Success", "Results" }, null, new[]{ typeof(global::Core.GetWalletTransactionsReply.Types.CacheState) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.BlockchainStateInfo), global::Core.BlockchainStateInfo.Parser, new[]{ "State" }, null, new[]{ typeof(global::Core.BlockchainStateInfo.Types.State) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.OperatingStateInfo), global::Core.OperatingStateInfo.Parser, new[]{ "State" }, null, new[]{ typeof(global::Core.OperatingStateInfo.Types.State) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.NetworkStateInfo), global::Core.NetworkStateInfo.Parser, new[]{ "State" }, null, new[]{ typeof(global::Core.NetworkStateInfo.Types.State) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetStateInfoRequest), global::Core.GetStateInfoRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetStateInfoReply), global::Core.GetStateInfoReply.Parser, new[]{ "BlockchainState", "OperatingState", "NetworkState", "ConnectedPeerCount", "CurrentSyncPeer", "NetworkHeight", "LocalBlockchainHeight", "Success", "Results", "NetworkVersion", "DataDirectory", "ProgramVersion", "NodecoreStarttime", "WalletCacheSyncHeight", "WalletState" }, null, new[]{ typeof(global::Core.GetStateInfoReply.Types.WalletState) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.StopNodeCoreRequest), global::Core.StopNodeCoreRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.RefreshWalletCacheRequest), global::Core.RefreshWalletCacheRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.EncryptWalletRequest), global::Core.EncryptWalletRequest.Parser, new[]{ "Passphrase" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.DecryptWalletRequest), global::Core.DecryptWalletRequest.Parser, new[]{ "Passphrase" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.UnlockWalletRequest), global::Core.UnlockWalletRequest.Parser, new[]{ "Passphrase" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.LockWalletRequest), global::Core.LockWalletRequest.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.DrainAddressRequest), global::Core.DrainAddressRequest.Parser, new[]{ "SourceAddress", "DestinationAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.DrainAddressReply), global::Core.DrainAddressReply.Parser, new[]{ "Success", "Results", "Transaction" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.BalanceUnlockEvent), global::Core.BalanceUnlockEvent.Parser, new[]{ "BlockHeight", "AmountUnlocked", "LockedBalance" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.AddressBalanceSchedule), global::Core.AddressBalanceSchedule.Parser, new[]{ "Address", "UnlockBalance", "LockedBalance", "TotalBalance", "Schedule" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetBalanceUnlockScheduleRequest), global::Core.GetBalanceUnlockScheduleRequest.Parser, new[]{ "Addresses" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Core.GetBalanceUnlockScheduleReply), global::Core.GetBalanceUnlockScheduleReply.Parser, new[]{ "Success", "Results", "AddressSchedule" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class AddressBalance : pb::IMessage<AddressBalance> {
    private static readonly pb::MessageParser<AddressBalance> _parser = new pb::MessageParser<AddressBalance>(() => new AddressBalance());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddressBalance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressBalance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressBalance(AddressBalance other) : this() {
      address_ = other.address_;
      unlockedAmount_ = other.unlockedAmount_;
      lockedAmount_ = other.lockedAmount_;
      totalAmount_ = other.totalAmount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressBalance Clone() {
      return new AddressBalance(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unlocked_amount" field.</summary>
    public const int UnlockedAmountFieldNumber = 2;
    private long unlockedAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnlockedAmount {
      get { return unlockedAmount_; }
      set {
        unlockedAmount_ = value;
      }
    }

    /// <summary>Field number for the "locked_amount" field.</summary>
    public const int LockedAmountFieldNumber = 3;
    private long lockedAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LockedAmount {
      get { return lockedAmount_; }
      set {
        lockedAmount_ = value;
      }
    }

    /// <summary>Field number for the "total_amount" field.</summary>
    public const int TotalAmountFieldNumber = 4;
    private long totalAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalAmount {
      get { return totalAmount_; }
      set {
        totalAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddressBalance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddressBalance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (UnlockedAmount != other.UnlockedAmount) return false;
      if (LockedAmount != other.LockedAmount) return false;
      if (TotalAmount != other.TotalAmount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (UnlockedAmount != 0L) hash ^= UnlockedAmount.GetHashCode();
      if (LockedAmount != 0L) hash ^= LockedAmount.GetHashCode();
      if (TotalAmount != 0L) hash ^= TotalAmount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Address);
      }
      if (UnlockedAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UnlockedAmount);
      }
      if (LockedAmount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LockedAmount);
      }
      if (TotalAmount != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalAmount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      if (UnlockedAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnlockedAmount);
      }
      if (LockedAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LockedAmount);
      }
      if (TotalAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalAmount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddressBalance other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.UnlockedAmount != 0L) {
        UnlockedAmount = other.UnlockedAmount;
      }
      if (other.LockedAmount != 0L) {
        LockedAmount = other.LockedAmount;
      }
      if (other.TotalAmount != 0L) {
        TotalAmount = other.TotalAmount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadBytes();
            break;
          }
          case 16: {
            UnlockedAmount = input.ReadInt64();
            break;
          }
          case 24: {
            LockedAmount = input.ReadInt64();
            break;
          }
          case 32: {
            TotalAmount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Output : pb::IMessage<Output> {
    private static readonly pb::MessageParser<Output> _parser = new pb::MessageParser<Output>(() => new Output());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Output> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Output() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Output(Output other) : this() {
      address_ = other.address_;
      amount_ = other.amount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Output Clone() {
      return new Output(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 2;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Output);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Output other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (Amount != other.Amount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Address);
      }
      if (Amount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Amount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Output other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadBytes();
            break;
          }
          case 16: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Paging : pb::IMessage<Paging> {
    private static readonly pb::MessageParser<Paging> _parser = new pb::MessageParser<Paging>(() => new Paging());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Paging> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Paging() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Paging(Paging other) : this() {
      pageNumber_ = other.pageNumber_;
      resultsPerPage_ = other.resultsPerPage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Paging Clone() {
      return new Paging(this);
    }

    /// <summary>Field number for the "page_number" field.</summary>
    public const int PageNumberFieldNumber = 1;
    private int pageNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PageNumber {
      get { return pageNumber_; }
      set {
        pageNumber_ = value;
      }
    }

    /// <summary>Field number for the "results_per_page" field.</summary>
    public const int ResultsPerPageFieldNumber = 2;
    private int resultsPerPage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResultsPerPage {
      get { return resultsPerPage_; }
      set {
        resultsPerPage_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Paging);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Paging other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PageNumber != other.PageNumber) return false;
      if (ResultsPerPage != other.ResultsPerPage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PageNumber != 0) hash ^= PageNumber.GetHashCode();
      if (ResultsPerPage != 0) hash ^= ResultsPerPage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PageNumber != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PageNumber);
      }
      if (ResultsPerPage != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ResultsPerPage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PageNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PageNumber);
      }
      if (ResultsPerPage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResultsPerPage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Paging other) {
      if (other == null) {
        return;
      }
      if (other.PageNumber != 0) {
        PageNumber = other.PageNumber;
      }
      if (other.ResultsPerPage != 0) {
        ResultsPerPage = other.ResultsPerPage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PageNumber = input.ReadInt32();
            break;
          }
          case 16: {
            ResultsPerPage = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NumericFilter : pb::IMessage<NumericFilter> {
    private static readonly pb::MessageParser<NumericFilter> _parser = new pb::MessageParser<NumericFilter>(() => new NumericFilter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NumericFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NumericFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NumericFilter(NumericFilter other) : this() {
      operator_ = other.operator_;
      value_ = other.value_;
      secondaryValue_ = other.secondaryValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NumericFilter Clone() {
      return new NumericFilter(this);
    }

    /// <summary>Field number for the "operator" field.</summary>
    public const int OperatorFieldNumber = 1;
    private global::Core.NumericFilter.Types.Operator operator_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.NumericFilter.Types.Operator Operator {
      get { return operator_; }
      set {
        operator_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private long value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "secondary_value" field.</summary>
    public const int SecondaryValueFieldNumber = 3;
    private long secondaryValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SecondaryValue {
      get { return secondaryValue_; }
      set {
        secondaryValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NumericFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NumericFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Operator != other.Operator) return false;
      if (Value != other.Value) return false;
      if (SecondaryValue != other.SecondaryValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Operator != 0) hash ^= Operator.GetHashCode();
      if (Value != 0L) hash ^= Value.GetHashCode();
      if (SecondaryValue != 0L) hash ^= SecondaryValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Operator != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Operator);
      }
      if (Value != 0L) {
        output.WriteRawTag(16);
        output.WriteSInt64(Value);
      }
      if (SecondaryValue != 0L) {
        output.WriteRawTag(24);
        output.WriteSInt64(SecondaryValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Operator != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operator);
      }
      if (Value != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(Value);
      }
      if (SecondaryValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(SecondaryValue);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NumericFilter other) {
      if (other == null) {
        return;
      }
      if (other.Operator != 0) {
        Operator = other.Operator;
      }
      if (other.Value != 0L) {
        Value = other.Value;
      }
      if (other.SecondaryValue != 0L) {
        SecondaryValue = other.SecondaryValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            operator_ = (global::Core.NumericFilter.Types.Operator) input.ReadEnum();
            break;
          }
          case 16: {
            Value = input.ReadSInt64();
            break;
          }
          case 24: {
            SecondaryValue = input.ReadSInt64();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NumericFilter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Operator {
        [pbr::OriginalName("EQUAL")] Equal = 0,
        [pbr::OriginalName("LESS_THAN")] LessThan = 1,
        [pbr::OriginalName("LESS_THAN_OR_EQUAL")] LessThanOrEqual = 2,
        [pbr::OriginalName("GREATER_THAN")] GreaterThan = 3,
        [pbr::OriginalName("GREATER_THAN_OR_EQUAL")] GreaterThanOrEqual = 4,
        [pbr::OriginalName("BETWEEN")] Between = 5,
      }

    }
    #endregion

  }

  public sealed partial class Endpoint : pb::IMessage<Endpoint> {
    private static readonly pb::MessageParser<Endpoint> _parser = new pb::MessageParser<Endpoint>(() => new Endpoint());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Endpoint> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Endpoint() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Endpoint(Endpoint other) : this() {
      address_ = other.address_;
      port_ = other.port_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Endpoint Clone() {
      return new Endpoint(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Endpoint);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Endpoint other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (Port != other.Port) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Endpoint other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MultisigSlot : pb::IMessage<MultisigSlot> {
    private static readonly pb::MessageParser<MultisigSlot> _parser = new pb::MessageParser<MultisigSlot>(() => new MultisigSlot());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultisigSlot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultisigSlot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultisigSlot(MultisigSlot other) : this() {
      populated_ = other.populated_;
      signature_ = other.signature_;
      publicKey_ = other.publicKey_;
      ownerAddress_ = other.ownerAddress_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultisigSlot Clone() {
      return new MultisigSlot(this);
    }

    /// <summary>Field number for the "populated" field.</summary>
    public const int PopulatedFieldNumber = 1;
    private bool populated_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Populated {
      get { return populated_; }
      set {
        populated_ = value;
      }
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 3;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner_address" field.</summary>
    public const int OwnerAddressFieldNumber = 4;
    private pb::ByteString ownerAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString OwnerAddress {
      get { return ownerAddress_; }
      set {
        ownerAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultisigSlot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultisigSlot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Populated != other.Populated) return false;
      if (Signature != other.Signature) return false;
      if (PublicKey != other.PublicKey) return false;
      if (OwnerAddress != other.OwnerAddress) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Populated != false) hash ^= Populated.GetHashCode();
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (OwnerAddress.Length != 0) hash ^= OwnerAddress.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Populated != false) {
        output.WriteRawTag(8);
        output.WriteBool(Populated);
      }
      if (Signature.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Signature);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PublicKey);
      }
      if (OwnerAddress.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(OwnerAddress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Populated != false) {
        size += 1 + 1;
      }
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (OwnerAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(OwnerAddress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultisigSlot other) {
      if (other == null) {
        return;
      }
      if (other.Populated != false) {
        Populated = other.Populated;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.OwnerAddress.Length != 0) {
        OwnerAddress = other.OwnerAddress;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Populated = input.ReadBool();
            break;
          }
          case 18: {
            Signature = input.ReadBytes();
            break;
          }
          case 26: {
            PublicKey = input.ReadBytes();
            break;
          }
          case 34: {
            OwnerAddress = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MultisigBundle : pb::IMessage<MultisigBundle> {
    private static readonly pb::MessageParser<MultisigBundle> _parser = new pb::MessageParser<MultisigBundle>(() => new MultisigBundle());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MultisigBundle> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultisigBundle() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultisigBundle(MultisigBundle other) : this() {
      slots_ = other.slots_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MultisigBundle Clone() {
      return new MultisigBundle(this);
    }

    /// <summary>Field number for the "slots" field.</summary>
    public const int SlotsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Core.MultisigSlot> _repeated_slots_codec
        = pb::FieldCodec.ForMessage(10, global::Core.MultisigSlot.Parser);
    private readonly pbc::RepeatedField<global::Core.MultisigSlot> slots_ = new pbc::RepeatedField<global::Core.MultisigSlot>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.MultisigSlot> Slots {
      get { return slots_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MultisigBundle);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MultisigBundle other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!slots_.Equals(other.slots_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= slots_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      slots_.WriteTo(output, _repeated_slots_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += slots_.CalculateSize(_repeated_slots_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MultisigBundle other) {
      if (other == null) {
        return;
      }
      slots_.Add(other.slots_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            slots_.AddEntriesFrom(input, _repeated_slots_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SignedTransaction : pb::IMessage<SignedTransaction> {
    private static readonly pb::MessageParser<SignedTransaction> _parser = new pb::MessageParser<SignedTransaction>(() => new SignedTransaction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignedTransaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedTransaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedTransaction(SignedTransaction other) : this() {
      signature_ = other.signature_;
      publicKey_ = other.publicKey_;
      signatureIndex_ = other.signatureIndex_;
      Transaction = other.transaction_ != null ? other.Transaction.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedTransaction Clone() {
      return new SignedTransaction(this);
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 1;
    private pb::ByteString signature_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Signature {
      get { return signature_; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 2;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signature_index" field.</summary>
    public const int SignatureIndexFieldNumber = 3;
    private long signatureIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SignatureIndex {
      get { return signatureIndex_; }
      set {
        signatureIndex_ = value;
      }
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 4;
    private global::Core.Transaction transaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.Transaction Transaction {
      get { return transaction_; }
      set {
        transaction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignedTransaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignedTransaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Signature != other.Signature) return false;
      if (PublicKey != other.PublicKey) return false;
      if (SignatureIndex != other.SignatureIndex) return false;
      if (!object.Equals(Transaction, other.Transaction)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Signature.Length != 0) hash ^= Signature.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (SignatureIndex != 0L) hash ^= SignatureIndex.GetHashCode();
      if (transaction_ != null) hash ^= Transaction.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Signature.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Signature);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(PublicKey);
      }
      if (SignatureIndex != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(SignatureIndex);
      }
      if (transaction_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Transaction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Signature.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (SignatureIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SignatureIndex);
      }
      if (transaction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transaction);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignedTransaction other) {
      if (other == null) {
        return;
      }
      if (other.Signature.Length != 0) {
        Signature = other.Signature;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.SignatureIndex != 0L) {
        SignatureIndex = other.SignatureIndex;
      }
      if (other.transaction_ != null) {
        if (transaction_ == null) {
          transaction_ = new global::Core.Transaction();
        }
        Transaction.MergeFrom(other.Transaction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Signature = input.ReadBytes();
            break;
          }
          case 18: {
            PublicKey = input.ReadBytes();
            break;
          }
          case 24: {
            SignatureIndex = input.ReadInt64();
            break;
          }
          case 34: {
            if (transaction_ == null) {
              transaction_ = new global::Core.Transaction();
            }
            input.ReadMessage(transaction_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SignedMultisigTransaction : pb::IMessage<SignedMultisigTransaction> {
    private static readonly pb::MessageParser<SignedMultisigTransaction> _parser = new pb::MessageParser<SignedMultisigTransaction>(() => new SignedMultisigTransaction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignedMultisigTransaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedMultisigTransaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedMultisigTransaction(SignedMultisigTransaction other) : this() {
      SignatureBundle = other.signatureBundle_ != null ? other.SignatureBundle.Clone() : null;
      Transaction = other.transaction_ != null ? other.Transaction.Clone() : null;
      signatureIndex_ = other.signatureIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignedMultisigTransaction Clone() {
      return new SignedMultisigTransaction(this);
    }

    /// <summary>Field number for the "signature_bundle" field.</summary>
    public const int SignatureBundleFieldNumber = 1;
    private global::Core.MultisigBundle signatureBundle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.MultisigBundle SignatureBundle {
      get { return signatureBundle_; }
      set {
        signatureBundle_ = value;
      }
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 2;
    private global::Core.Transaction transaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.Transaction Transaction {
      get { return transaction_; }
      set {
        transaction_ = value;
      }
    }

    /// <summary>Field number for the "signature_index" field.</summary>
    public const int SignatureIndexFieldNumber = 3;
    private long signatureIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SignatureIndex {
      get { return signatureIndex_; }
      set {
        signatureIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignedMultisigTransaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignedMultisigTransaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SignatureBundle, other.SignatureBundle)) return false;
      if (!object.Equals(Transaction, other.Transaction)) return false;
      if (SignatureIndex != other.SignatureIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (signatureBundle_ != null) hash ^= SignatureBundle.GetHashCode();
      if (transaction_ != null) hash ^= Transaction.GetHashCode();
      if (SignatureIndex != 0L) hash ^= SignatureIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (signatureBundle_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SignatureBundle);
      }
      if (transaction_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Transaction);
      }
      if (SignatureIndex != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(SignatureIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (signatureBundle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SignatureBundle);
      }
      if (transaction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transaction);
      }
      if (SignatureIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SignatureIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignedMultisigTransaction other) {
      if (other == null) {
        return;
      }
      if (other.signatureBundle_ != null) {
        if (signatureBundle_ == null) {
          signatureBundle_ = new global::Core.MultisigBundle();
        }
        SignatureBundle.MergeFrom(other.SignatureBundle);
      }
      if (other.transaction_ != null) {
        if (transaction_ == null) {
          transaction_ = new global::Core.Transaction();
        }
        Transaction.MergeFrom(other.Transaction);
      }
      if (other.SignatureIndex != 0L) {
        SignatureIndex = other.SignatureIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (signatureBundle_ == null) {
              signatureBundle_ = new global::Core.MultisigBundle();
            }
            input.ReadMessage(signatureBundle_);
            break;
          }
          case 18: {
            if (transaction_ == null) {
              transaction_ = new global::Core.Transaction();
            }
            input.ReadMessage(transaction_);
            break;
          }
          case 24: {
            SignatureIndex = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CoinbaseTransaction : pb::IMessage<CoinbaseTransaction> {
    private static readonly pb::MessageParser<CoinbaseTransaction> _parser = new pb::MessageParser<CoinbaseTransaction>(() => new CoinbaseTransaction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CoinbaseTransaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoinbaseTransaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoinbaseTransaction(CoinbaseTransaction other) : this() {
      powCoinbaseAmount_ = other.powCoinbaseAmount_;
      popCoinbaseAmount_ = other.popCoinbaseAmount_;
      powFeeShare_ = other.powFeeShare_;
      popFeeShare_ = other.popFeeShare_;
      powOutputs_ = other.powOutputs_.Clone();
      popOutputs_ = other.popOutputs_.Clone();
      blockHeight_ = other.blockHeight_;
      txId_ = other.txId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CoinbaseTransaction Clone() {
      return new CoinbaseTransaction(this);
    }

    /// <summary>Field number for the "pow_coinbase_amount" field.</summary>
    public const int PowCoinbaseAmountFieldNumber = 1;
    private long powCoinbaseAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PowCoinbaseAmount {
      get { return powCoinbaseAmount_; }
      set {
        powCoinbaseAmount_ = value;
      }
    }

    /// <summary>Field number for the "pop_coinbase_amount" field.</summary>
    public const int PopCoinbaseAmountFieldNumber = 2;
    private long popCoinbaseAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PopCoinbaseAmount {
      get { return popCoinbaseAmount_; }
      set {
        popCoinbaseAmount_ = value;
      }
    }

    /// <summary>Field number for the "pow_fee_share" field.</summary>
    public const int PowFeeShareFieldNumber = 3;
    private long powFeeShare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PowFeeShare {
      get { return powFeeShare_; }
      set {
        powFeeShare_ = value;
      }
    }

    /// <summary>Field number for the "pop_fee_share" field.</summary>
    public const int PopFeeShareFieldNumber = 4;
    private long popFeeShare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PopFeeShare {
      get { return popFeeShare_; }
      set {
        popFeeShare_ = value;
      }
    }

    /// <summary>Field number for the "pow_outputs" field.</summary>
    public const int PowOutputsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Core.Output> _repeated_powOutputs_codec
        = pb::FieldCodec.ForMessage(42, global::Core.Output.Parser);
    private readonly pbc::RepeatedField<global::Core.Output> powOutputs_ = new pbc::RepeatedField<global::Core.Output>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Output> PowOutputs {
      get { return powOutputs_; }
    }

    /// <summary>Field number for the "pop_outputs" field.</summary>
    public const int PopOutputsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Core.Output> _repeated_popOutputs_codec
        = pb::FieldCodec.ForMessage(50, global::Core.Output.Parser);
    private readonly pbc::RepeatedField<global::Core.Output> popOutputs_ = new pbc::RepeatedField<global::Core.Output>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Output> PopOutputs {
      get { return popOutputs_; }
    }

    /// <summary>Field number for the "block_height" field.</summary>
    public const int BlockHeightFieldNumber = 7;
    private int blockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockHeight {
      get { return blockHeight_; }
      set {
        blockHeight_ = value;
      }
    }

    /// <summary>Field number for the "tx_id" field.</summary>
    public const int TxIdFieldNumber = 8;
    private pb::ByteString txId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TxId {
      get { return txId_; }
      set {
        txId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CoinbaseTransaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CoinbaseTransaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PowCoinbaseAmount != other.PowCoinbaseAmount) return false;
      if (PopCoinbaseAmount != other.PopCoinbaseAmount) return false;
      if (PowFeeShare != other.PowFeeShare) return false;
      if (PopFeeShare != other.PopFeeShare) return false;
      if(!powOutputs_.Equals(other.powOutputs_)) return false;
      if(!popOutputs_.Equals(other.popOutputs_)) return false;
      if (BlockHeight != other.BlockHeight) return false;
      if (TxId != other.TxId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PowCoinbaseAmount != 0L) hash ^= PowCoinbaseAmount.GetHashCode();
      if (PopCoinbaseAmount != 0L) hash ^= PopCoinbaseAmount.GetHashCode();
      if (PowFeeShare != 0L) hash ^= PowFeeShare.GetHashCode();
      if (PopFeeShare != 0L) hash ^= PopFeeShare.GetHashCode();
      hash ^= powOutputs_.GetHashCode();
      hash ^= popOutputs_.GetHashCode();
      if (BlockHeight != 0) hash ^= BlockHeight.GetHashCode();
      if (TxId.Length != 0) hash ^= TxId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PowCoinbaseAmount != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PowCoinbaseAmount);
      }
      if (PopCoinbaseAmount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(PopCoinbaseAmount);
      }
      if (PowFeeShare != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(PowFeeShare);
      }
      if (PopFeeShare != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(PopFeeShare);
      }
      powOutputs_.WriteTo(output, _repeated_powOutputs_codec);
      popOutputs_.WriteTo(output, _repeated_popOutputs_codec);
      if (BlockHeight != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(BlockHeight);
      }
      if (TxId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(TxId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PowCoinbaseAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PowCoinbaseAmount);
      }
      if (PopCoinbaseAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PopCoinbaseAmount);
      }
      if (PowFeeShare != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PowFeeShare);
      }
      if (PopFeeShare != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PopFeeShare);
      }
      size += powOutputs_.CalculateSize(_repeated_powOutputs_codec);
      size += popOutputs_.CalculateSize(_repeated_popOutputs_codec);
      if (BlockHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockHeight);
      }
      if (TxId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TxId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CoinbaseTransaction other) {
      if (other == null) {
        return;
      }
      if (other.PowCoinbaseAmount != 0L) {
        PowCoinbaseAmount = other.PowCoinbaseAmount;
      }
      if (other.PopCoinbaseAmount != 0L) {
        PopCoinbaseAmount = other.PopCoinbaseAmount;
      }
      if (other.PowFeeShare != 0L) {
        PowFeeShare = other.PowFeeShare;
      }
      if (other.PopFeeShare != 0L) {
        PopFeeShare = other.PopFeeShare;
      }
      powOutputs_.Add(other.powOutputs_);
      popOutputs_.Add(other.popOutputs_);
      if (other.BlockHeight != 0) {
        BlockHeight = other.BlockHeight;
      }
      if (other.TxId.Length != 0) {
        TxId = other.TxId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PowCoinbaseAmount = input.ReadInt64();
            break;
          }
          case 16: {
            PopCoinbaseAmount = input.ReadInt64();
            break;
          }
          case 24: {
            PowFeeShare = input.ReadInt64();
            break;
          }
          case 32: {
            PopFeeShare = input.ReadInt64();
            break;
          }
          case 42: {
            powOutputs_.AddEntriesFrom(input, _repeated_powOutputs_codec);
            break;
          }
          case 50: {
            popOutputs_.AddEntriesFrom(input, _repeated_popOutputs_codec);
            break;
          }
          case 56: {
            BlockHeight = input.ReadInt32();
            break;
          }
          case 66: {
            TxId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BitcoinBlockHeader : pb::IMessage<BitcoinBlockHeader> {
    private static readonly pb::MessageParser<BitcoinBlockHeader> _parser = new pb::MessageParser<BitcoinBlockHeader>(() => new BitcoinBlockHeader());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BitcoinBlockHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BitcoinBlockHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BitcoinBlockHeader(BitcoinBlockHeader other) : this() {
      header_ = other.header_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BitcoinBlockHeader Clone() {
      return new BitcoinBlockHeader(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private pb::ByteString header_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Header {
      get { return header_; }
      set {
        header_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BitcoinBlockHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BitcoinBlockHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Header != other.Header) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Header.Length != 0) hash ^= Header.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Header.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Header);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Header.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Header);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BitcoinBlockHeader other) {
      if (other == null) {
        return;
      }
      if (other.Header.Length != 0) {
        Header = other.Header;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Header = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PoPEndorsementInfo : pb::IMessage<PoPEndorsementInfo> {
    private static readonly pb::MessageParser<PoPEndorsementInfo> _parser = new pb::MessageParser<PoPEndorsementInfo>(() => new PoPEndorsementInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PoPEndorsementInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoPEndorsementInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoPEndorsementInfo(PoPEndorsementInfo other) : this() {
      minerAddress_ = other.minerAddress_;
      endorsedVeriblockBlockHash_ = other.endorsedVeriblockBlockHash_;
      containedInVeriblockBlockHash_ = other.containedInVeriblockBlockHash_;
      veriblockTxId_ = other.veriblockTxId_;
      bitcoinTransaction_ = other.bitcoinTransaction_;
      bitcoinTxId_ = other.bitcoinTxId_;
      bitcoinBlockHeader_ = other.bitcoinBlockHeader_;
      bitcoinBlockHeaderHash_ = other.bitcoinBlockHeaderHash_;
      reward_ = other.reward_;
      finalized_ = other.finalized_;
      endorsedBlockNumber_ = other.endorsedBlockNumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoPEndorsementInfo Clone() {
      return new PoPEndorsementInfo(this);
    }

    /// <summary>Field number for the "miner_address" field.</summary>
    public const int MinerAddressFieldNumber = 1;
    private pb::ByteString minerAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MinerAddress {
      get { return minerAddress_; }
      set {
        minerAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endorsed_veriblock_block_hash" field.</summary>
    public const int EndorsedVeriblockBlockHashFieldNumber = 2;
    private pb::ByteString endorsedVeriblockBlockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EndorsedVeriblockBlockHash {
      get { return endorsedVeriblockBlockHash_; }
      set {
        endorsedVeriblockBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "contained_in_veriblock_block_hash" field.</summary>
    public const int ContainedInVeriblockBlockHashFieldNumber = 3;
    private pb::ByteString containedInVeriblockBlockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ContainedInVeriblockBlockHash {
      get { return containedInVeriblockBlockHash_; }
      set {
        containedInVeriblockBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "veriblock_tx_id" field.</summary>
    public const int VeriblockTxIdFieldNumber = 4;
    private pb::ByteString veriblockTxId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString VeriblockTxId {
      get { return veriblockTxId_; }
      set {
        veriblockTxId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bitcoin_transaction" field.</summary>
    public const int BitcoinTransactionFieldNumber = 5;
    private pb::ByteString bitcoinTransaction_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BitcoinTransaction {
      get { return bitcoinTransaction_; }
      set {
        bitcoinTransaction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bitcoin_tx_id" field.</summary>
    public const int BitcoinTxIdFieldNumber = 6;
    private pb::ByteString bitcoinTxId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BitcoinTxId {
      get { return bitcoinTxId_; }
      set {
        bitcoinTxId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bitcoin_block_header" field.</summary>
    public const int BitcoinBlockHeaderFieldNumber = 7;
    private pb::ByteString bitcoinBlockHeader_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BitcoinBlockHeader {
      get { return bitcoinBlockHeader_; }
      set {
        bitcoinBlockHeader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bitcoin_block_header_hash" field.</summary>
    public const int BitcoinBlockHeaderHashFieldNumber = 8;
    private pb::ByteString bitcoinBlockHeaderHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BitcoinBlockHeaderHash {
      get { return bitcoinBlockHeaderHash_; }
      set {
        bitcoinBlockHeaderHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reward" field.</summary>
    public const int RewardFieldNumber = 9;
    private long reward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Reward {
      get { return reward_; }
      set {
        reward_ = value;
      }
    }

    /// <summary>Field number for the "finalized" field.</summary>
    public const int FinalizedFieldNumber = 10;
    private bool finalized_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Finalized {
      get { return finalized_; }
      set {
        finalized_ = value;
      }
    }

    /// <summary>Field number for the "endorsed_block_number" field.</summary>
    public const int EndorsedBlockNumberFieldNumber = 11;
    private int endorsedBlockNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndorsedBlockNumber {
      get { return endorsedBlockNumber_; }
      set {
        endorsedBlockNumber_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PoPEndorsementInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PoPEndorsementInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MinerAddress != other.MinerAddress) return false;
      if (EndorsedVeriblockBlockHash != other.EndorsedVeriblockBlockHash) return false;
      if (ContainedInVeriblockBlockHash != other.ContainedInVeriblockBlockHash) return false;
      if (VeriblockTxId != other.VeriblockTxId) return false;
      if (BitcoinTransaction != other.BitcoinTransaction) return false;
      if (BitcoinTxId != other.BitcoinTxId) return false;
      if (BitcoinBlockHeader != other.BitcoinBlockHeader) return false;
      if (BitcoinBlockHeaderHash != other.BitcoinBlockHeaderHash) return false;
      if (Reward != other.Reward) return false;
      if (Finalized != other.Finalized) return false;
      if (EndorsedBlockNumber != other.EndorsedBlockNumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MinerAddress.Length != 0) hash ^= MinerAddress.GetHashCode();
      if (EndorsedVeriblockBlockHash.Length != 0) hash ^= EndorsedVeriblockBlockHash.GetHashCode();
      if (ContainedInVeriblockBlockHash.Length != 0) hash ^= ContainedInVeriblockBlockHash.GetHashCode();
      if (VeriblockTxId.Length != 0) hash ^= VeriblockTxId.GetHashCode();
      if (BitcoinTransaction.Length != 0) hash ^= BitcoinTransaction.GetHashCode();
      if (BitcoinTxId.Length != 0) hash ^= BitcoinTxId.GetHashCode();
      if (BitcoinBlockHeader.Length != 0) hash ^= BitcoinBlockHeader.GetHashCode();
      if (BitcoinBlockHeaderHash.Length != 0) hash ^= BitcoinBlockHeaderHash.GetHashCode();
      if (Reward != 0L) hash ^= Reward.GetHashCode();
      if (Finalized != false) hash ^= Finalized.GetHashCode();
      if (EndorsedBlockNumber != 0) hash ^= EndorsedBlockNumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MinerAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(MinerAddress);
      }
      if (EndorsedVeriblockBlockHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EndorsedVeriblockBlockHash);
      }
      if (ContainedInVeriblockBlockHash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ContainedInVeriblockBlockHash);
      }
      if (VeriblockTxId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(VeriblockTxId);
      }
      if (BitcoinTransaction.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(BitcoinTransaction);
      }
      if (BitcoinTxId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(BitcoinTxId);
      }
      if (BitcoinBlockHeader.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(BitcoinBlockHeader);
      }
      if (BitcoinBlockHeaderHash.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(BitcoinBlockHeaderHash);
      }
      if (Reward != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Reward);
      }
      if (Finalized != false) {
        output.WriteRawTag(80);
        output.WriteBool(Finalized);
      }
      if (EndorsedBlockNumber != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(EndorsedBlockNumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MinerAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MinerAddress);
      }
      if (EndorsedVeriblockBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EndorsedVeriblockBlockHash);
      }
      if (ContainedInVeriblockBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ContainedInVeriblockBlockHash);
      }
      if (VeriblockTxId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(VeriblockTxId);
      }
      if (BitcoinTransaction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BitcoinTransaction);
      }
      if (BitcoinTxId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BitcoinTxId);
      }
      if (BitcoinBlockHeader.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BitcoinBlockHeader);
      }
      if (BitcoinBlockHeaderHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BitcoinBlockHeaderHash);
      }
      if (Reward != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Reward);
      }
      if (Finalized != false) {
        size += 1 + 1;
      }
      if (EndorsedBlockNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndorsedBlockNumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PoPEndorsementInfo other) {
      if (other == null) {
        return;
      }
      if (other.MinerAddress.Length != 0) {
        MinerAddress = other.MinerAddress;
      }
      if (other.EndorsedVeriblockBlockHash.Length != 0) {
        EndorsedVeriblockBlockHash = other.EndorsedVeriblockBlockHash;
      }
      if (other.ContainedInVeriblockBlockHash.Length != 0) {
        ContainedInVeriblockBlockHash = other.ContainedInVeriblockBlockHash;
      }
      if (other.VeriblockTxId.Length != 0) {
        VeriblockTxId = other.VeriblockTxId;
      }
      if (other.BitcoinTransaction.Length != 0) {
        BitcoinTransaction = other.BitcoinTransaction;
      }
      if (other.BitcoinTxId.Length != 0) {
        BitcoinTxId = other.BitcoinTxId;
      }
      if (other.BitcoinBlockHeader.Length != 0) {
        BitcoinBlockHeader = other.BitcoinBlockHeader;
      }
      if (other.BitcoinBlockHeaderHash.Length != 0) {
        BitcoinBlockHeaderHash = other.BitcoinBlockHeaderHash;
      }
      if (other.Reward != 0L) {
        Reward = other.Reward;
      }
      if (other.Finalized != false) {
        Finalized = other.Finalized;
      }
      if (other.EndorsedBlockNumber != 0) {
        EndorsedBlockNumber = other.EndorsedBlockNumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MinerAddress = input.ReadBytes();
            break;
          }
          case 18: {
            EndorsedVeriblockBlockHash = input.ReadBytes();
            break;
          }
          case 26: {
            ContainedInVeriblockBlockHash = input.ReadBytes();
            break;
          }
          case 34: {
            VeriblockTxId = input.ReadBytes();
            break;
          }
          case 42: {
            BitcoinTransaction = input.ReadBytes();
            break;
          }
          case 50: {
            BitcoinTxId = input.ReadBytes();
            break;
          }
          case 58: {
            BitcoinBlockHeader = input.ReadBytes();
            break;
          }
          case 66: {
            BitcoinBlockHeaderHash = input.ReadBytes();
            break;
          }
          case 72: {
            Reward = input.ReadInt64();
            break;
          }
          case 80: {
            Finalized = input.ReadBool();
            break;
          }
          case 88: {
            EndorsedBlockNumber = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StandardAddress : pb::IMessage<StandardAddress> {
    private static readonly pb::MessageParser<StandardAddress> _parser = new pb::MessageParser<StandardAddress>(() => new StandardAddress());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StandardAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandardAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandardAddress(StandardAddress other) : this() {
      standardAddress_ = other.standardAddress_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StandardAddress Clone() {
      return new StandardAddress(this);
    }

    /// <summary>Field number for the "standard_address" field.</summary>
    public const int StandardAddress_FieldNumber = 1;
    private pb::ByteString standardAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString StandardAddress_ {
      get { return standardAddress_; }
      set {
        standardAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StandardAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StandardAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StandardAddress_ != other.StandardAddress_) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StandardAddress_.Length != 0) hash ^= StandardAddress_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StandardAddress_.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(StandardAddress_);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StandardAddress_.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(StandardAddress_);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StandardAddress other) {
      if (other == null) {
        return;
      }
      if (other.StandardAddress_.Length != 0) {
        StandardAddress_ = other.StandardAddress_;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            StandardAddress_ = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TroubleshootPoPTransactionsRequest : pb::IMessage<TroubleshootPoPTransactionsRequest> {
    private static readonly pb::MessageParser<TroubleshootPoPTransactionsRequest> _parser = new pb::MessageParser<TroubleshootPoPTransactionsRequest>(() => new TroubleshootPoPTransactionsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TroubleshootPoPTransactionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroubleshootPoPTransactionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroubleshootPoPTransactionsRequest(TroubleshootPoPTransactionsRequest other) : this() {
      onlyFailures_ = other.onlyFailures_;
      searchLength_ = other.searchLength_;
      switch (other.SearchParamaterCase) {
        case SearchParamaterOneofCase.Addresses:
          Addresses = other.Addresses.Clone();
          break;
        case SearchParamaterOneofCase.Transactions:
          Transactions = other.Transactions.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroubleshootPoPTransactionsRequest Clone() {
      return new TroubleshootPoPTransactionsRequest(this);
    }

    /// <summary>Field number for the "only_failures" field.</summary>
    public const int OnlyFailuresFieldNumber = 1;
    private bool onlyFailures_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OnlyFailures {
      get { return onlyFailures_; }
      set {
        onlyFailures_ = value;
      }
    }

    /// <summary>Field number for the "search_length" field.</summary>
    public const int SearchLengthFieldNumber = 2;
    private int searchLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SearchLength {
      get { return searchLength_; }
      set {
        searchLength_ = value;
      }
    }

    /// <summary>Field number for the "addresses" field.</summary>
    public const int AddressesFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.AddressSet Addresses {
      get { return searchParamaterCase_ == SearchParamaterOneofCase.Addresses ? (global::Core.AddressSet) searchParamater_ : null; }
      set {
        searchParamater_ = value;
        searchParamaterCase_ = value == null ? SearchParamaterOneofCase.None : SearchParamaterOneofCase.Addresses;
      }
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.TransactionSet Transactions {
      get { return searchParamaterCase_ == SearchParamaterOneofCase.Transactions ? (global::Core.TransactionSet) searchParamater_ : null; }
      set {
        searchParamater_ = value;
        searchParamaterCase_ = value == null ? SearchParamaterOneofCase.None : SearchParamaterOneofCase.Transactions;
      }
    }

    private object searchParamater_;
    /// <summary>Enum of possible cases for the "search_paramater" oneof.</summary>
    public enum SearchParamaterOneofCase {
      None = 0,
      Addresses = 3,
      Transactions = 4,
    }
    private SearchParamaterOneofCase searchParamaterCase_ = SearchParamaterOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SearchParamaterOneofCase SearchParamaterCase {
      get { return searchParamaterCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSearchParamater() {
      searchParamaterCase_ = SearchParamaterOneofCase.None;
      searchParamater_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TroubleshootPoPTransactionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TroubleshootPoPTransactionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OnlyFailures != other.OnlyFailures) return false;
      if (SearchLength != other.SearchLength) return false;
      if (!object.Equals(Addresses, other.Addresses)) return false;
      if (!object.Equals(Transactions, other.Transactions)) return false;
      if (SearchParamaterCase != other.SearchParamaterCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OnlyFailures != false) hash ^= OnlyFailures.GetHashCode();
      if (SearchLength != 0) hash ^= SearchLength.GetHashCode();
      if (searchParamaterCase_ == SearchParamaterOneofCase.Addresses) hash ^= Addresses.GetHashCode();
      if (searchParamaterCase_ == SearchParamaterOneofCase.Transactions) hash ^= Transactions.GetHashCode();
      hash ^= (int) searchParamaterCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OnlyFailures != false) {
        output.WriteRawTag(8);
        output.WriteBool(OnlyFailures);
      }
      if (SearchLength != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SearchLength);
      }
      if (searchParamaterCase_ == SearchParamaterOneofCase.Addresses) {
        output.WriteRawTag(26);
        output.WriteMessage(Addresses);
      }
      if (searchParamaterCase_ == SearchParamaterOneofCase.Transactions) {
        output.WriteRawTag(34);
        output.WriteMessage(Transactions);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OnlyFailures != false) {
        size += 1 + 1;
      }
      if (SearchLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SearchLength);
      }
      if (searchParamaterCase_ == SearchParamaterOneofCase.Addresses) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Addresses);
      }
      if (searchParamaterCase_ == SearchParamaterOneofCase.Transactions) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transactions);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TroubleshootPoPTransactionsRequest other) {
      if (other == null) {
        return;
      }
      if (other.OnlyFailures != false) {
        OnlyFailures = other.OnlyFailures;
      }
      if (other.SearchLength != 0) {
        SearchLength = other.SearchLength;
      }
      switch (other.SearchParamaterCase) {
        case SearchParamaterOneofCase.Addresses:
          Addresses = other.Addresses;
          break;
        case SearchParamaterOneofCase.Transactions:
          Transactions = other.Transactions;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            OnlyFailures = input.ReadBool();
            break;
          }
          case 16: {
            SearchLength = input.ReadInt32();
            break;
          }
          case 26: {
            global::Core.AddressSet subBuilder = new global::Core.AddressSet();
            if (searchParamaterCase_ == SearchParamaterOneofCase.Addresses) {
              subBuilder.MergeFrom(Addresses);
            }
            input.ReadMessage(subBuilder);
            Addresses = subBuilder;
            break;
          }
          case 34: {
            global::Core.TransactionSet subBuilder = new global::Core.TransactionSet();
            if (searchParamaterCase_ == SearchParamaterOneofCase.Transactions) {
              subBuilder.MergeFrom(Transactions);
            }
            input.ReadMessage(subBuilder);
            Transactions = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddressSet : pb::IMessage<AddressSet> {
    private static readonly pb::MessageParser<AddressSet> _parser = new pb::MessageParser<AddressSet>(() => new AddressSet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddressSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressSet(AddressSet other) : this() {
      addresses_ = other.addresses_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressSet Clone() {
      return new AddressSet(this);
    }

    /// <summary>Field number for the "addresses" field.</summary>
    public const int AddressesFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_addresses_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> addresses_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Addresses {
      get { return addresses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddressSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddressSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!addresses_.Equals(other.addresses_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= addresses_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      addresses_.WriteTo(output, _repeated_addresses_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += addresses_.CalculateSize(_repeated_addresses_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddressSet other) {
      if (other == null) {
        return;
      }
      addresses_.Add(other.addresses_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            addresses_.AddEntriesFrom(input, _repeated_addresses_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionSet : pb::IMessage<TransactionSet> {
    private static readonly pb::MessageParser<TransactionSet> _parser = new pb::MessageParser<TransactionSet>(() => new TransactionSet());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionSet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionSet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionSet(TransactionSet other) : this() {
      txids_ = other.txids_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionSet Clone() {
      return new TransactionSet(this);
    }

    /// <summary>Field number for the "txids" field.</summary>
    public const int TxidsFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_txids_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> txids_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Txids {
      get { return txids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionSet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionSet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!txids_.Equals(other.txids_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= txids_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      txids_.WriteTo(output, _repeated_txids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += txids_.CalculateSize(_repeated_txids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionSet other) {
      if (other == null) {
        return;
      }
      txids_.Add(other.txids_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            txids_.AddEntriesFrom(input, _repeated_txids_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TroubleshootPoPTransactionsReply : pb::IMessage<TroubleshootPoPTransactionsReply> {
    private static readonly pb::MessageParser<TroubleshootPoPTransactionsReply> _parser = new pb::MessageParser<TroubleshootPoPTransactionsReply>(() => new TroubleshootPoPTransactionsReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TroubleshootPoPTransactionsReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroubleshootPoPTransactionsReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroubleshootPoPTransactionsReply(TroubleshootPoPTransactionsReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      popProblemReports_ = other.popProblemReports_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TroubleshootPoPTransactionsReply Clone() {
      return new TroubleshootPoPTransactionsReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "popProblemReports" field.</summary>
    public const int PopProblemReportsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Core.PoPTransactionProblemReport> _repeated_popProblemReports_codec
        = pb::FieldCodec.ForMessage(26, global::Core.PoPTransactionProblemReport.Parser);
    private readonly pbc::RepeatedField<global::Core.PoPTransactionProblemReport> popProblemReports_ = new pbc::RepeatedField<global::Core.PoPTransactionProblemReport>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.PoPTransactionProblemReport> PopProblemReports {
      get { return popProblemReports_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TroubleshootPoPTransactionsReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TroubleshootPoPTransactionsReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if(!popProblemReports_.Equals(other.popProblemReports_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      hash ^= popProblemReports_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      popProblemReports_.WriteTo(output, _repeated_popProblemReports_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      size += popProblemReports_.CalculateSize(_repeated_popProblemReports_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TroubleshootPoPTransactionsReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      popProblemReports_.Add(other.popProblemReports_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            popProblemReports_.AddEntriesFrom(input, _repeated_popProblemReports_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PoPTransactionProblemReport : pb::IMessage<PoPTransactionProblemReport> {
    private static readonly pb::MessageParser<PoPTransactionProblemReport> _parser = new pb::MessageParser<PoPTransactionProblemReport>(() => new PoPTransactionProblemReport());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PoPTransactionProblemReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoPTransactionProblemReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoPTransactionProblemReport(PoPTransactionProblemReport other) : this() {
      address_ = other.address_;
      txid_ = other.txid_;
      endorsedVbkBlockHash_ = other.endorsedVbkBlockHash_;
      endorsedVbkBlockIndex_ = other.endorsedVbkBlockIndex_;
      includedInVbkBlockHash_ = other.includedInVbkBlockHash_;
      includedInVbkBlockIndex_ = other.includedInVbkBlockIndex_;
      popPayoutVbkBlockHash_ = other.popPayoutVbkBlockHash_;
      popPayoutVbkBlockIndex_ = other.popPayoutVbkBlockIndex_;
      paidOutInPopPayoutVbkBlock_ = other.paidOutInPopPayoutVbkBlock_;
      popPayoutVbkAmount_ = other.popPayoutVbkAmount_;
      bitcoinTxid_ = other.bitcoinTxid_;
      includedInBtcBlockHash_ = other.includedInBtcBlockHash_;
      includedInBtcBlockIndex_ = other.includedInBtcBlockIndex_;
      endorsedVbkBlockInMainChain_ = other.endorsedVbkBlockInMainChain_;
      includedInVbkBlockInMainChain_ = other.includedInVbkBlockInMainChain_;
      includedInBtcBlockInMainChain_ = other.includedInBtcBlockInMainChain_;
      firstBtcBlockOfEquivalentPopEndorsementsIndex_ = other.firstBtcBlockOfEquivalentPopEndorsementsIndex_;
      currentBlockHeight_ = other.currentBlockHeight_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoPTransactionProblemReport Clone() {
      return new PoPTransactionProblemReport(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "txid" field.</summary>
    public const int TxidFieldNumber = 2;
    private pb::ByteString txid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Txid {
      get { return txid_; }
      set {
        txid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endorsed_vbk_block_hash" field.</summary>
    public const int EndorsedVbkBlockHashFieldNumber = 3;
    private pb::ByteString endorsedVbkBlockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EndorsedVbkBlockHash {
      get { return endorsedVbkBlockHash_; }
      set {
        endorsedVbkBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endorsed_vbk_block_index" field.</summary>
    public const int EndorsedVbkBlockIndexFieldNumber = 4;
    private int endorsedVbkBlockIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndorsedVbkBlockIndex {
      get { return endorsedVbkBlockIndex_; }
      set {
        endorsedVbkBlockIndex_ = value;
      }
    }

    /// <summary>Field number for the "included_in_vbk_block_hash" field.</summary>
    public const int IncludedInVbkBlockHashFieldNumber = 5;
    private pb::ByteString includedInVbkBlockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IncludedInVbkBlockHash {
      get { return includedInVbkBlockHash_; }
      set {
        includedInVbkBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "included_in_vbk_block_index" field.</summary>
    public const int IncludedInVbkBlockIndexFieldNumber = 6;
    private int includedInVbkBlockIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IncludedInVbkBlockIndex {
      get { return includedInVbkBlockIndex_; }
      set {
        includedInVbkBlockIndex_ = value;
      }
    }

    /// <summary>Field number for the "pop_payout_vbk_block_hash" field.</summary>
    public const int PopPayoutVbkBlockHashFieldNumber = 7;
    private pb::ByteString popPayoutVbkBlockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PopPayoutVbkBlockHash {
      get { return popPayoutVbkBlockHash_; }
      set {
        popPayoutVbkBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pop_payout_vbk_block_index" field.</summary>
    public const int PopPayoutVbkBlockIndexFieldNumber = 8;
    private int popPayoutVbkBlockIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PopPayoutVbkBlockIndex {
      get { return popPayoutVbkBlockIndex_; }
      set {
        popPayoutVbkBlockIndex_ = value;
      }
    }

    /// <summary>Field number for the "paid_out_in_pop_payout_vbk_block" field.</summary>
    public const int PaidOutInPopPayoutVbkBlockFieldNumber = 9;
    private bool paidOutInPopPayoutVbkBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PaidOutInPopPayoutVbkBlock {
      get { return paidOutInPopPayoutVbkBlock_; }
      set {
        paidOutInPopPayoutVbkBlock_ = value;
      }
    }

    /// <summary>Field number for the "pop_payout_vbk_amount" field.</summary>
    public const int PopPayoutVbkAmountFieldNumber = 10;
    private long popPayoutVbkAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PopPayoutVbkAmount {
      get { return popPayoutVbkAmount_; }
      set {
        popPayoutVbkAmount_ = value;
      }
    }

    /// <summary>Field number for the "bitcoin_txid" field.</summary>
    public const int BitcoinTxidFieldNumber = 11;
    private pb::ByteString bitcoinTxid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BitcoinTxid {
      get { return bitcoinTxid_; }
      set {
        bitcoinTxid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "included_in_btc_block_hash" field.</summary>
    public const int IncludedInBtcBlockHashFieldNumber = 12;
    private pb::ByteString includedInBtcBlockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IncludedInBtcBlockHash {
      get { return includedInBtcBlockHash_; }
      set {
        includedInBtcBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "included_in_btc_block_index" field.</summary>
    public const int IncludedInBtcBlockIndexFieldNumber = 13;
    private int includedInBtcBlockIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IncludedInBtcBlockIndex {
      get { return includedInBtcBlockIndex_; }
      set {
        includedInBtcBlockIndex_ = value;
      }
    }

    /// <summary>Field number for the "endorsed_vbk_block_in_main_chain" field.</summary>
    public const int EndorsedVbkBlockInMainChainFieldNumber = 14;
    private bool endorsedVbkBlockInMainChain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool EndorsedVbkBlockInMainChain {
      get { return endorsedVbkBlockInMainChain_; }
      set {
        endorsedVbkBlockInMainChain_ = value;
      }
    }

    /// <summary>Field number for the "included_in_vbk_block_in_main_chain" field.</summary>
    public const int IncludedInVbkBlockInMainChainFieldNumber = 15;
    private bool includedInVbkBlockInMainChain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludedInVbkBlockInMainChain {
      get { return includedInVbkBlockInMainChain_; }
      set {
        includedInVbkBlockInMainChain_ = value;
      }
    }

    /// <summary>Field number for the "included_in_btc_block_in_main_chain" field.</summary>
    public const int IncludedInBtcBlockInMainChainFieldNumber = 16;
    private bool includedInBtcBlockInMainChain_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IncludedInBtcBlockInMainChain {
      get { return includedInBtcBlockInMainChain_; }
      set {
        includedInBtcBlockInMainChain_ = value;
      }
    }

    /// <summary>Field number for the "first_btc_block_of_equivalent_pop_endorsements_index" field.</summary>
    public const int FirstBtcBlockOfEquivalentPopEndorsementsIndexFieldNumber = 17;
    private int firstBtcBlockOfEquivalentPopEndorsementsIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FirstBtcBlockOfEquivalentPopEndorsementsIndex {
      get { return firstBtcBlockOfEquivalentPopEndorsementsIndex_; }
      set {
        firstBtcBlockOfEquivalentPopEndorsementsIndex_ = value;
      }
    }

    /// <summary>Field number for the "current_block_height" field.</summary>
    public const int CurrentBlockHeightFieldNumber = 18;
    private int currentBlockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentBlockHeight {
      get { return currentBlockHeight_; }
      set {
        currentBlockHeight_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PoPTransactionProblemReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PoPTransactionProblemReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (Txid != other.Txid) return false;
      if (EndorsedVbkBlockHash != other.EndorsedVbkBlockHash) return false;
      if (EndorsedVbkBlockIndex != other.EndorsedVbkBlockIndex) return false;
      if (IncludedInVbkBlockHash != other.IncludedInVbkBlockHash) return false;
      if (IncludedInVbkBlockIndex != other.IncludedInVbkBlockIndex) return false;
      if (PopPayoutVbkBlockHash != other.PopPayoutVbkBlockHash) return false;
      if (PopPayoutVbkBlockIndex != other.PopPayoutVbkBlockIndex) return false;
      if (PaidOutInPopPayoutVbkBlock != other.PaidOutInPopPayoutVbkBlock) return false;
      if (PopPayoutVbkAmount != other.PopPayoutVbkAmount) return false;
      if (BitcoinTxid != other.BitcoinTxid) return false;
      if (IncludedInBtcBlockHash != other.IncludedInBtcBlockHash) return false;
      if (IncludedInBtcBlockIndex != other.IncludedInBtcBlockIndex) return false;
      if (EndorsedVbkBlockInMainChain != other.EndorsedVbkBlockInMainChain) return false;
      if (IncludedInVbkBlockInMainChain != other.IncludedInVbkBlockInMainChain) return false;
      if (IncludedInBtcBlockInMainChain != other.IncludedInBtcBlockInMainChain) return false;
      if (FirstBtcBlockOfEquivalentPopEndorsementsIndex != other.FirstBtcBlockOfEquivalentPopEndorsementsIndex) return false;
      if (CurrentBlockHeight != other.CurrentBlockHeight) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Txid.Length != 0) hash ^= Txid.GetHashCode();
      if (EndorsedVbkBlockHash.Length != 0) hash ^= EndorsedVbkBlockHash.GetHashCode();
      if (EndorsedVbkBlockIndex != 0) hash ^= EndorsedVbkBlockIndex.GetHashCode();
      if (IncludedInVbkBlockHash.Length != 0) hash ^= IncludedInVbkBlockHash.GetHashCode();
      if (IncludedInVbkBlockIndex != 0) hash ^= IncludedInVbkBlockIndex.GetHashCode();
      if (PopPayoutVbkBlockHash.Length != 0) hash ^= PopPayoutVbkBlockHash.GetHashCode();
      if (PopPayoutVbkBlockIndex != 0) hash ^= PopPayoutVbkBlockIndex.GetHashCode();
      if (PaidOutInPopPayoutVbkBlock != false) hash ^= PaidOutInPopPayoutVbkBlock.GetHashCode();
      if (PopPayoutVbkAmount != 0L) hash ^= PopPayoutVbkAmount.GetHashCode();
      if (BitcoinTxid.Length != 0) hash ^= BitcoinTxid.GetHashCode();
      if (IncludedInBtcBlockHash.Length != 0) hash ^= IncludedInBtcBlockHash.GetHashCode();
      if (IncludedInBtcBlockIndex != 0) hash ^= IncludedInBtcBlockIndex.GetHashCode();
      if (EndorsedVbkBlockInMainChain != false) hash ^= EndorsedVbkBlockInMainChain.GetHashCode();
      if (IncludedInVbkBlockInMainChain != false) hash ^= IncludedInVbkBlockInMainChain.GetHashCode();
      if (IncludedInBtcBlockInMainChain != false) hash ^= IncludedInBtcBlockInMainChain.GetHashCode();
      if (FirstBtcBlockOfEquivalentPopEndorsementsIndex != 0) hash ^= FirstBtcBlockOfEquivalentPopEndorsementsIndex.GetHashCode();
      if (CurrentBlockHeight != 0) hash ^= CurrentBlockHeight.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Address);
      }
      if (Txid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Txid);
      }
      if (EndorsedVbkBlockHash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EndorsedVbkBlockHash);
      }
      if (EndorsedVbkBlockIndex != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndorsedVbkBlockIndex);
      }
      if (IncludedInVbkBlockHash.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(IncludedInVbkBlockHash);
      }
      if (IncludedInVbkBlockIndex != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(IncludedInVbkBlockIndex);
      }
      if (PopPayoutVbkBlockHash.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(PopPayoutVbkBlockHash);
      }
      if (PopPayoutVbkBlockIndex != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(PopPayoutVbkBlockIndex);
      }
      if (PaidOutInPopPayoutVbkBlock != false) {
        output.WriteRawTag(72);
        output.WriteBool(PaidOutInPopPayoutVbkBlock);
      }
      if (PopPayoutVbkAmount != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(PopPayoutVbkAmount);
      }
      if (BitcoinTxid.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(BitcoinTxid);
      }
      if (IncludedInBtcBlockHash.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(IncludedInBtcBlockHash);
      }
      if (IncludedInBtcBlockIndex != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(IncludedInBtcBlockIndex);
      }
      if (EndorsedVbkBlockInMainChain != false) {
        output.WriteRawTag(112);
        output.WriteBool(EndorsedVbkBlockInMainChain);
      }
      if (IncludedInVbkBlockInMainChain != false) {
        output.WriteRawTag(120);
        output.WriteBool(IncludedInVbkBlockInMainChain);
      }
      if (IncludedInBtcBlockInMainChain != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(IncludedInBtcBlockInMainChain);
      }
      if (FirstBtcBlockOfEquivalentPopEndorsementsIndex != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(FirstBtcBlockOfEquivalentPopEndorsementsIndex);
      }
      if (CurrentBlockHeight != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(CurrentBlockHeight);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      if (Txid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Txid);
      }
      if (EndorsedVbkBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EndorsedVbkBlockHash);
      }
      if (EndorsedVbkBlockIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndorsedVbkBlockIndex);
      }
      if (IncludedInVbkBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IncludedInVbkBlockHash);
      }
      if (IncludedInVbkBlockIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IncludedInVbkBlockIndex);
      }
      if (PopPayoutVbkBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PopPayoutVbkBlockHash);
      }
      if (PopPayoutVbkBlockIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PopPayoutVbkBlockIndex);
      }
      if (PaidOutInPopPayoutVbkBlock != false) {
        size += 1 + 1;
      }
      if (PopPayoutVbkAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PopPayoutVbkAmount);
      }
      if (BitcoinTxid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BitcoinTxid);
      }
      if (IncludedInBtcBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IncludedInBtcBlockHash);
      }
      if (IncludedInBtcBlockIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IncludedInBtcBlockIndex);
      }
      if (EndorsedVbkBlockInMainChain != false) {
        size += 1 + 1;
      }
      if (IncludedInVbkBlockInMainChain != false) {
        size += 1 + 1;
      }
      if (IncludedInBtcBlockInMainChain != false) {
        size += 2 + 1;
      }
      if (FirstBtcBlockOfEquivalentPopEndorsementsIndex != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FirstBtcBlockOfEquivalentPopEndorsementsIndex);
      }
      if (CurrentBlockHeight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CurrentBlockHeight);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PoPTransactionProblemReport other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Txid.Length != 0) {
        Txid = other.Txid;
      }
      if (other.EndorsedVbkBlockHash.Length != 0) {
        EndorsedVbkBlockHash = other.EndorsedVbkBlockHash;
      }
      if (other.EndorsedVbkBlockIndex != 0) {
        EndorsedVbkBlockIndex = other.EndorsedVbkBlockIndex;
      }
      if (other.IncludedInVbkBlockHash.Length != 0) {
        IncludedInVbkBlockHash = other.IncludedInVbkBlockHash;
      }
      if (other.IncludedInVbkBlockIndex != 0) {
        IncludedInVbkBlockIndex = other.IncludedInVbkBlockIndex;
      }
      if (other.PopPayoutVbkBlockHash.Length != 0) {
        PopPayoutVbkBlockHash = other.PopPayoutVbkBlockHash;
      }
      if (other.PopPayoutVbkBlockIndex != 0) {
        PopPayoutVbkBlockIndex = other.PopPayoutVbkBlockIndex;
      }
      if (other.PaidOutInPopPayoutVbkBlock != false) {
        PaidOutInPopPayoutVbkBlock = other.PaidOutInPopPayoutVbkBlock;
      }
      if (other.PopPayoutVbkAmount != 0L) {
        PopPayoutVbkAmount = other.PopPayoutVbkAmount;
      }
      if (other.BitcoinTxid.Length != 0) {
        BitcoinTxid = other.BitcoinTxid;
      }
      if (other.IncludedInBtcBlockHash.Length != 0) {
        IncludedInBtcBlockHash = other.IncludedInBtcBlockHash;
      }
      if (other.IncludedInBtcBlockIndex != 0) {
        IncludedInBtcBlockIndex = other.IncludedInBtcBlockIndex;
      }
      if (other.EndorsedVbkBlockInMainChain != false) {
        EndorsedVbkBlockInMainChain = other.EndorsedVbkBlockInMainChain;
      }
      if (other.IncludedInVbkBlockInMainChain != false) {
        IncludedInVbkBlockInMainChain = other.IncludedInVbkBlockInMainChain;
      }
      if (other.IncludedInBtcBlockInMainChain != false) {
        IncludedInBtcBlockInMainChain = other.IncludedInBtcBlockInMainChain;
      }
      if (other.FirstBtcBlockOfEquivalentPopEndorsementsIndex != 0) {
        FirstBtcBlockOfEquivalentPopEndorsementsIndex = other.FirstBtcBlockOfEquivalentPopEndorsementsIndex;
      }
      if (other.CurrentBlockHeight != 0) {
        CurrentBlockHeight = other.CurrentBlockHeight;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadBytes();
            break;
          }
          case 18: {
            Txid = input.ReadBytes();
            break;
          }
          case 26: {
            EndorsedVbkBlockHash = input.ReadBytes();
            break;
          }
          case 32: {
            EndorsedVbkBlockIndex = input.ReadInt32();
            break;
          }
          case 42: {
            IncludedInVbkBlockHash = input.ReadBytes();
            break;
          }
          case 48: {
            IncludedInVbkBlockIndex = input.ReadInt32();
            break;
          }
          case 58: {
            PopPayoutVbkBlockHash = input.ReadBytes();
            break;
          }
          case 64: {
            PopPayoutVbkBlockIndex = input.ReadInt32();
            break;
          }
          case 72: {
            PaidOutInPopPayoutVbkBlock = input.ReadBool();
            break;
          }
          case 80: {
            PopPayoutVbkAmount = input.ReadInt64();
            break;
          }
          case 90: {
            BitcoinTxid = input.ReadBytes();
            break;
          }
          case 98: {
            IncludedInBtcBlockHash = input.ReadBytes();
            break;
          }
          case 104: {
            IncludedInBtcBlockIndex = input.ReadInt32();
            break;
          }
          case 112: {
            EndorsedVbkBlockInMainChain = input.ReadBool();
            break;
          }
          case 120: {
            IncludedInVbkBlockInMainChain = input.ReadBool();
            break;
          }
          case 128: {
            IncludedInBtcBlockInMainChain = input.ReadBool();
            break;
          }
          case 136: {
            FirstBtcBlockOfEquivalentPopEndorsementsIndex = input.ReadInt32();
            break;
          }
          case 144: {
            CurrentBlockHeight = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetPoPEndorsementsInfoRequest : pb::IMessage<GetPoPEndorsementsInfoRequest> {
    private static readonly pb::MessageParser<GetPoPEndorsementsInfoRequest> _parser = new pb::MessageParser<GetPoPEndorsementsInfoRequest>(() => new GetPoPEndorsementsInfoRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPoPEndorsementsInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPoPEndorsementsInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPoPEndorsementsInfoRequest(GetPoPEndorsementsInfoRequest other) : this() {
      searchLength_ = other.searchLength_;
      addresses_ = other.addresses_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPoPEndorsementsInfoRequest Clone() {
      return new GetPoPEndorsementsInfoRequest(this);
    }

    /// <summary>Field number for the "search_length" field.</summary>
    public const int SearchLengthFieldNumber = 1;
    private int searchLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SearchLength {
      get { return searchLength_; }
      set {
        searchLength_ = value;
      }
    }

    /// <summary>Field number for the "addresses" field.</summary>
    public const int AddressesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.StandardAddress> _repeated_addresses_codec
        = pb::FieldCodec.ForMessage(18, global::Core.StandardAddress.Parser);
    private readonly pbc::RepeatedField<global::Core.StandardAddress> addresses_ = new pbc::RepeatedField<global::Core.StandardAddress>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.StandardAddress> Addresses {
      get { return addresses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPoPEndorsementsInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPoPEndorsementsInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SearchLength != other.SearchLength) return false;
      if(!addresses_.Equals(other.addresses_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SearchLength != 0) hash ^= SearchLength.GetHashCode();
      hash ^= addresses_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SearchLength != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SearchLength);
      }
      addresses_.WriteTo(output, _repeated_addresses_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SearchLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SearchLength);
      }
      size += addresses_.CalculateSize(_repeated_addresses_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPoPEndorsementsInfoRequest other) {
      if (other == null) {
        return;
      }
      if (other.SearchLength != 0) {
        SearchLength = other.SearchLength;
      }
      addresses_.Add(other.addresses_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SearchLength = input.ReadInt32();
            break;
          }
          case 18: {
            addresses_.AddEntriesFrom(input, _repeated_addresses_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetPoPEndorsementsInfoReply : pb::IMessage<GetPoPEndorsementsInfoReply> {
    private static readonly pb::MessageParser<GetPoPEndorsementsInfoReply> _parser = new pb::MessageParser<GetPoPEndorsementsInfoReply>(() => new GetPoPEndorsementsInfoReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPoPEndorsementsInfoReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPoPEndorsementsInfoReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPoPEndorsementsInfoReply(GetPoPEndorsementsInfoReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      popEndorsements_ = other.popEndorsements_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPoPEndorsementsInfoReply Clone() {
      return new GetPoPEndorsementsInfoReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "pop_endorsements" field.</summary>
    public const int PopEndorsementsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Core.PoPEndorsementInfo> _repeated_popEndorsements_codec
        = pb::FieldCodec.ForMessage(26, global::Core.PoPEndorsementInfo.Parser);
    private readonly pbc::RepeatedField<global::Core.PoPEndorsementInfo> popEndorsements_ = new pbc::RepeatedField<global::Core.PoPEndorsementInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.PoPEndorsementInfo> PopEndorsements {
      get { return popEndorsements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPoPEndorsementsInfoReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPoPEndorsementsInfoReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if(!popEndorsements_.Equals(other.popEndorsements_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      hash ^= popEndorsements_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      popEndorsements_.WriteTo(output, _repeated_popEndorsements_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      size += popEndorsements_.CalculateSize(_repeated_popEndorsements_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPoPEndorsementsInfoReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      popEndorsements_.Add(other.popEndorsements_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            popEndorsements_.AddEntriesFrom(input, _repeated_popEndorsements_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetProtectedChildrenRequest : pb::IMessage<GetProtectedChildrenRequest> {
    private static readonly pb::MessageParser<GetProtectedChildrenRequest> _parser = new pb::MessageParser<GetProtectedChildrenRequest>(() => new GetProtectedChildrenRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetProtectedChildrenRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProtectedChildrenRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProtectedChildrenRequest(GetProtectedChildrenRequest other) : this() {
      searchLength_ = other.searchLength_;
      veriblockBlockHash_ = other.veriblockBlockHash_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProtectedChildrenRequest Clone() {
      return new GetProtectedChildrenRequest(this);
    }

    /// <summary>Field number for the "search_length" field.</summary>
    public const int SearchLengthFieldNumber = 1;
    private int searchLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SearchLength {
      get { return searchLength_; }
      set {
        searchLength_ = value;
      }
    }

    /// <summary>Field number for the "veriblock_block_hash" field.</summary>
    public const int VeriblockBlockHashFieldNumber = 2;
    private pb::ByteString veriblockBlockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString VeriblockBlockHash {
      get { return veriblockBlockHash_; }
      set {
        veriblockBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetProtectedChildrenRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetProtectedChildrenRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SearchLength != other.SearchLength) return false;
      if (VeriblockBlockHash != other.VeriblockBlockHash) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SearchLength != 0) hash ^= SearchLength.GetHashCode();
      if (VeriblockBlockHash.Length != 0) hash ^= VeriblockBlockHash.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SearchLength != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SearchLength);
      }
      if (VeriblockBlockHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(VeriblockBlockHash);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SearchLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SearchLength);
      }
      if (VeriblockBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(VeriblockBlockHash);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetProtectedChildrenRequest other) {
      if (other == null) {
        return;
      }
      if (other.SearchLength != 0) {
        SearchLength = other.SearchLength;
      }
      if (other.VeriblockBlockHash.Length != 0) {
        VeriblockBlockHash = other.VeriblockBlockHash;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SearchLength = input.ReadInt32();
            break;
          }
          case 18: {
            VeriblockBlockHash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetProtectedChildrenReply : pb::IMessage<GetProtectedChildrenReply> {
    private static readonly pb::MessageParser<GetProtectedChildrenReply> _parser = new pb::MessageParser<GetProtectedChildrenReply>(() => new GetProtectedChildrenReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetProtectedChildrenReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProtectedChildrenReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProtectedChildrenReply(GetProtectedChildrenReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      popEndorsements_ = other.popEndorsements_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProtectedChildrenReply Clone() {
      return new GetProtectedChildrenReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "pop_endorsements" field.</summary>
    public const int PopEndorsementsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Core.PoPEndorsementInfo> _repeated_popEndorsements_codec
        = pb::FieldCodec.ForMessage(26, global::Core.PoPEndorsementInfo.Parser);
    private readonly pbc::RepeatedField<global::Core.PoPEndorsementInfo> popEndorsements_ = new pbc::RepeatedField<global::Core.PoPEndorsementInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.PoPEndorsementInfo> PopEndorsements {
      get { return popEndorsements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetProtectedChildrenReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetProtectedChildrenReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if(!popEndorsements_.Equals(other.popEndorsements_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      hash ^= popEndorsements_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      popEndorsements_.WriteTo(output, _repeated_popEndorsements_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      size += popEndorsements_.CalculateSize(_repeated_popEndorsements_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetProtectedChildrenReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      popEndorsements_.Add(other.popEndorsements_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            popEndorsements_.AddEntriesFrom(input, _repeated_popEndorsements_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetProtectingParentsRequest : pb::IMessage<GetProtectingParentsRequest> {
    private static readonly pb::MessageParser<GetProtectingParentsRequest> _parser = new pb::MessageParser<GetProtectingParentsRequest>(() => new GetProtectingParentsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetProtectingParentsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProtectingParentsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProtectingParentsRequest(GetProtectingParentsRequest other) : this() {
      searchLength_ = other.searchLength_;
      veriblockBlockHash_ = other.veriblockBlockHash_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProtectingParentsRequest Clone() {
      return new GetProtectingParentsRequest(this);
    }

    /// <summary>Field number for the "search_length" field.</summary>
    public const int SearchLengthFieldNumber = 1;
    private int searchLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SearchLength {
      get { return searchLength_; }
      set {
        searchLength_ = value;
      }
    }

    /// <summary>Field number for the "veriblock_block_hash" field.</summary>
    public const int VeriblockBlockHashFieldNumber = 2;
    private pb::ByteString veriblockBlockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString VeriblockBlockHash {
      get { return veriblockBlockHash_; }
      set {
        veriblockBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetProtectingParentsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetProtectingParentsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SearchLength != other.SearchLength) return false;
      if (VeriblockBlockHash != other.VeriblockBlockHash) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SearchLength != 0) hash ^= SearchLength.GetHashCode();
      if (VeriblockBlockHash.Length != 0) hash ^= VeriblockBlockHash.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SearchLength != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SearchLength);
      }
      if (VeriblockBlockHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(VeriblockBlockHash);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SearchLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SearchLength);
      }
      if (VeriblockBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(VeriblockBlockHash);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetProtectingParentsRequest other) {
      if (other == null) {
        return;
      }
      if (other.SearchLength != 0) {
        SearchLength = other.SearchLength;
      }
      if (other.VeriblockBlockHash.Length != 0) {
        VeriblockBlockHash = other.VeriblockBlockHash;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SearchLength = input.ReadInt32();
            break;
          }
          case 18: {
            VeriblockBlockHash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetProtectingParentsReply : pb::IMessage<GetProtectingParentsReply> {
    private static readonly pb::MessageParser<GetProtectingParentsReply> _parser = new pb::MessageParser<GetProtectingParentsReply>(() => new GetProtectingParentsReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetProtectingParentsReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProtectingParentsReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProtectingParentsReply(GetProtectingParentsReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      popEndorsements_ = other.popEndorsements_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetProtectingParentsReply Clone() {
      return new GetProtectingParentsReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "pop_endorsements" field.</summary>
    public const int PopEndorsementsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Core.PoPEndorsementInfo> _repeated_popEndorsements_codec
        = pb::FieldCodec.ForMessage(26, global::Core.PoPEndorsementInfo.Parser);
    private readonly pbc::RepeatedField<global::Core.PoPEndorsementInfo> popEndorsements_ = new pbc::RepeatedField<global::Core.PoPEndorsementInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.PoPEndorsementInfo> PopEndorsements {
      get { return popEndorsements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetProtectingParentsReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetProtectingParentsReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if(!popEndorsements_.Equals(other.popEndorsements_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      hash ^= popEndorsements_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      popEndorsements_.WriteTo(output, _repeated_popEndorsements_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      size += popEndorsements_.CalculateSize(_repeated_popEndorsements_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetProtectingParentsReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      popEndorsements_.Add(other.popEndorsements_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            popEndorsements_.AddEntriesFrom(input, _repeated_popEndorsements_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Transaction : pb::IMessage<Transaction> {
    private static readonly pb::MessageParser<Transaction> _parser = new pb::MessageParser<Transaction>(() => new Transaction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Transaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction(Transaction other) : this() {
      type_ = other.type_;
      sourceAddress_ = other.sourceAddress_;
      sourceAmount_ = other.sourceAmount_;
      outputs_ = other.outputs_.Clone();
      transactionFee_ = other.transactionFee_;
      data_ = other.data_;
      bitcoinTransaction_ = other.bitcoinTransaction_;
      endorsedBlockHeader_ = other.endorsedBlockHeader_;
      BitcoinBlockHeaderOfProof = other.bitcoinBlockHeaderOfProof_ != null ? other.BitcoinBlockHeaderOfProof.Clone() : null;
      merklePath_ = other.merklePath_;
      contextBitcoinBlockHeaders_ = other.contextBitcoinBlockHeaders_.Clone();
      timestamp_ = other.timestamp_;
      size_ = other.size_;
      txId_ = other.txId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Transaction Clone() {
      return new Transaction(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Core.Transaction.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.Transaction.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "source_address" field.</summary>
    public const int SourceAddressFieldNumber = 2;
    private pb::ByteString sourceAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SourceAddress {
      get { return sourceAddress_; }
      set {
        sourceAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "source_amount" field.</summary>
    public const int SourceAmountFieldNumber = 3;
    private long sourceAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SourceAmount {
      get { return sourceAmount_; }
      set {
        sourceAmount_ = value;
      }
    }

    /// <summary>Field number for the "outputs" field.</summary>
    public const int OutputsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Core.Output> _repeated_outputs_codec
        = pb::FieldCodec.ForMessage(34, global::Core.Output.Parser);
    private readonly pbc::RepeatedField<global::Core.Output> outputs_ = new pbc::RepeatedField<global::Core.Output>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Output> Outputs {
      get { return outputs_; }
    }

    /// <summary>Field number for the "transaction_fee" field.</summary>
    public const int TransactionFeeFieldNumber = 5;
    private long transactionFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionFee {
      get { return transactionFee_; }
      set {
        transactionFee_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 7;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bitcoin_transaction" field.</summary>
    public const int BitcoinTransactionFieldNumber = 10;
    private pb::ByteString bitcoinTransaction_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BitcoinTransaction {
      get { return bitcoinTransaction_; }
      set {
        bitcoinTransaction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endorsed_block_header" field.</summary>
    public const int EndorsedBlockHeaderFieldNumber = 11;
    private pb::ByteString endorsedBlockHeader_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EndorsedBlockHeader {
      get { return endorsedBlockHeader_; }
      set {
        endorsedBlockHeader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bitcoin_block_header_of_proof" field.</summary>
    public const int BitcoinBlockHeaderOfProofFieldNumber = 12;
    private global::Core.BitcoinBlockHeader bitcoinBlockHeaderOfProof_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.BitcoinBlockHeader BitcoinBlockHeaderOfProof {
      get { return bitcoinBlockHeaderOfProof_; }
      set {
        bitcoinBlockHeaderOfProof_ = value;
      }
    }

    /// <summary>Field number for the "merkle_path" field.</summary>
    public const int MerklePathFieldNumber = 13;
    private string merklePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MerklePath {
      get { return merklePath_; }
      set {
        merklePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "context_bitcoin_block_headers" field.</summary>
    public const int ContextBitcoinBlockHeadersFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Core.BitcoinBlockHeader> _repeated_contextBitcoinBlockHeaders_codec
        = pb::FieldCodec.ForMessage(114, global::Core.BitcoinBlockHeader.Parser);
    private readonly pbc::RepeatedField<global::Core.BitcoinBlockHeader> contextBitcoinBlockHeaders_ = new pbc::RepeatedField<global::Core.BitcoinBlockHeader>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.BitcoinBlockHeader> ContextBitcoinBlockHeaders {
      get { return contextBitcoinBlockHeaders_; }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 15;
    private int timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 16;
    private int size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "tx_id" field.</summary>
    public const int TxIdFieldNumber = 17;
    private pb::ByteString txId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TxId {
      get { return txId_; }
      set {
        txId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Transaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Transaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (SourceAddress != other.SourceAddress) return false;
      if (SourceAmount != other.SourceAmount) return false;
      if(!outputs_.Equals(other.outputs_)) return false;
      if (TransactionFee != other.TransactionFee) return false;
      if (Data != other.Data) return false;
      if (BitcoinTransaction != other.BitcoinTransaction) return false;
      if (EndorsedBlockHeader != other.EndorsedBlockHeader) return false;
      if (!object.Equals(BitcoinBlockHeaderOfProof, other.BitcoinBlockHeaderOfProof)) return false;
      if (MerklePath != other.MerklePath) return false;
      if(!contextBitcoinBlockHeaders_.Equals(other.contextBitcoinBlockHeaders_)) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Size != other.Size) return false;
      if (TxId != other.TxId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (SourceAddress.Length != 0) hash ^= SourceAddress.GetHashCode();
      if (SourceAmount != 0L) hash ^= SourceAmount.GetHashCode();
      hash ^= outputs_.GetHashCode();
      if (TransactionFee != 0L) hash ^= TransactionFee.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (BitcoinTransaction.Length != 0) hash ^= BitcoinTransaction.GetHashCode();
      if (EndorsedBlockHeader.Length != 0) hash ^= EndorsedBlockHeader.GetHashCode();
      if (bitcoinBlockHeaderOfProof_ != null) hash ^= BitcoinBlockHeaderOfProof.GetHashCode();
      if (MerklePath.Length != 0) hash ^= MerklePath.GetHashCode();
      hash ^= contextBitcoinBlockHeaders_.GetHashCode();
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (TxId.Length != 0) hash ^= TxId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (SourceAddress.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(SourceAddress);
      }
      if (SourceAmount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(SourceAmount);
      }
      outputs_.WriteTo(output, _repeated_outputs_codec);
      if (TransactionFee != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TransactionFee);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(Data);
      }
      if (BitcoinTransaction.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(BitcoinTransaction);
      }
      if (EndorsedBlockHeader.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(EndorsedBlockHeader);
      }
      if (bitcoinBlockHeaderOfProof_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(BitcoinBlockHeaderOfProof);
      }
      if (MerklePath.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(MerklePath);
      }
      contextBitcoinBlockHeaders_.WriteTo(output, _repeated_contextBitcoinBlockHeaders_codec);
      if (Timestamp != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Timestamp);
      }
      if (Size != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Size);
      }
      if (TxId.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteBytes(TxId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (SourceAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SourceAddress);
      }
      if (SourceAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SourceAmount);
      }
      size += outputs_.CalculateSize(_repeated_outputs_codec);
      if (TransactionFee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TransactionFee);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (BitcoinTransaction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BitcoinTransaction);
      }
      if (EndorsedBlockHeader.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EndorsedBlockHeader);
      }
      if (bitcoinBlockHeaderOfProof_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BitcoinBlockHeaderOfProof);
      }
      if (MerklePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MerklePath);
      }
      size += contextBitcoinBlockHeaders_.CalculateSize(_repeated_contextBitcoinBlockHeaders_codec);
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      if (Size != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      if (TxId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(TxId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Transaction other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.SourceAddress.Length != 0) {
        SourceAddress = other.SourceAddress;
      }
      if (other.SourceAmount != 0L) {
        SourceAmount = other.SourceAmount;
      }
      outputs_.Add(other.outputs_);
      if (other.TransactionFee != 0L) {
        TransactionFee = other.TransactionFee;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.BitcoinTransaction.Length != 0) {
        BitcoinTransaction = other.BitcoinTransaction;
      }
      if (other.EndorsedBlockHeader.Length != 0) {
        EndorsedBlockHeader = other.EndorsedBlockHeader;
      }
      if (other.bitcoinBlockHeaderOfProof_ != null) {
        if (bitcoinBlockHeaderOfProof_ == null) {
          bitcoinBlockHeaderOfProof_ = new global::Core.BitcoinBlockHeader();
        }
        BitcoinBlockHeaderOfProof.MergeFrom(other.BitcoinBlockHeaderOfProof);
      }
      if (other.MerklePath.Length != 0) {
        MerklePath = other.MerklePath;
      }
      contextBitcoinBlockHeaders_.Add(other.contextBitcoinBlockHeaders_);
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.TxId.Length != 0) {
        TxId = other.TxId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Core.Transaction.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            SourceAddress = input.ReadBytes();
            break;
          }
          case 24: {
            SourceAmount = input.ReadInt64();
            break;
          }
          case 34: {
            outputs_.AddEntriesFrom(input, _repeated_outputs_codec);
            break;
          }
          case 40: {
            TransactionFee = input.ReadInt64();
            break;
          }
          case 58: {
            Data = input.ReadBytes();
            break;
          }
          case 82: {
            BitcoinTransaction = input.ReadBytes();
            break;
          }
          case 90: {
            EndorsedBlockHeader = input.ReadBytes();
            break;
          }
          case 98: {
            if (bitcoinBlockHeaderOfProof_ == null) {
              bitcoinBlockHeaderOfProof_ = new global::Core.BitcoinBlockHeader();
            }
            input.ReadMessage(bitcoinBlockHeaderOfProof_);
            break;
          }
          case 106: {
            MerklePath = input.ReadString();
            break;
          }
          case 114: {
            contextBitcoinBlockHeaders_.AddEntriesFrom(input, _repeated_contextBitcoinBlockHeaders_codec);
            break;
          }
          case 120: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 128: {
            Size = input.ReadInt32();
            break;
          }
          case 138: {
            TxId = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Transaction message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("ZERO_UNUSED")] ZeroUnused = 0,
        [pbr::OriginalName("STANDARD")] Standard = 1,
        [pbr::OriginalName("PROOF_OF_PROOF")] ProofOfProof = 2,
        [pbr::OriginalName("MULTISIG")] Multisig = 3,
      }

    }
    #endregion

  }

  public sealed partial class UnsignedMultisigTransactionWithIndex : pb::IMessage<UnsignedMultisigTransactionWithIndex> {
    private static readonly pb::MessageParser<UnsignedMultisigTransactionWithIndex> _parser = new pb::MessageParser<UnsignedMultisigTransactionWithIndex>(() => new UnsignedMultisigTransactionWithIndex());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnsignedMultisigTransactionWithIndex> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnsignedMultisigTransactionWithIndex() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnsignedMultisigTransactionWithIndex(UnsignedMultisigTransactionWithIndex other) : this() {
      UnsignedMultisigTansaction = other.unsignedMultisigTansaction_ != null ? other.UnsignedMultisigTansaction.Clone() : null;
      signatureIndex_ = other.signatureIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnsignedMultisigTransactionWithIndex Clone() {
      return new UnsignedMultisigTransactionWithIndex(this);
    }

    /// <summary>Field number for the "unsigned_multisig_tansaction" field.</summary>
    public const int UnsignedMultisigTansactionFieldNumber = 1;
    private global::Core.Transaction unsignedMultisigTansaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.Transaction UnsignedMultisigTansaction {
      get { return unsignedMultisigTansaction_; }
      set {
        unsignedMultisigTansaction_ = value;
      }
    }

    /// <summary>Field number for the "signature_index" field.</summary>
    public const int SignatureIndexFieldNumber = 2;
    private long signatureIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SignatureIndex {
      get { return signatureIndex_; }
      set {
        signatureIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnsignedMultisigTransactionWithIndex);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnsignedMultisigTransactionWithIndex other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(UnsignedMultisigTansaction, other.UnsignedMultisigTansaction)) return false;
      if (SignatureIndex != other.SignatureIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (unsignedMultisigTansaction_ != null) hash ^= UnsignedMultisigTansaction.GetHashCode();
      if (SignatureIndex != 0L) hash ^= SignatureIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (unsignedMultisigTansaction_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(UnsignedMultisigTansaction);
      }
      if (SignatureIndex != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(SignatureIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (unsignedMultisigTansaction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnsignedMultisigTansaction);
      }
      if (SignatureIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SignatureIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnsignedMultisigTransactionWithIndex other) {
      if (other == null) {
        return;
      }
      if (other.unsignedMultisigTansaction_ != null) {
        if (unsignedMultisigTansaction_ == null) {
          unsignedMultisigTansaction_ = new global::Core.Transaction();
        }
        UnsignedMultisigTansaction.MergeFrom(other.UnsignedMultisigTansaction);
      }
      if (other.SignatureIndex != 0L) {
        SignatureIndex = other.SignatureIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (unsignedMultisigTansaction_ == null) {
              unsignedMultisigTansaction_ = new global::Core.Transaction();
            }
            input.ReadMessage(unsignedMultisigTansaction_);
            break;
          }
          case 16: {
            SignatureIndex = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionUnion : pb::IMessage<TransactionUnion> {
    private static readonly pb::MessageParser<TransactionUnion> _parser = new pb::MessageParser<TransactionUnion>(() => new TransactionUnion());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionUnion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionUnion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionUnion(TransactionUnion other) : this() {
      switch (other.TransactionCase) {
        case TransactionOneofCase.Unsigned:
          Unsigned = other.Unsigned.Clone();
          break;
        case TransactionOneofCase.Signed:
          Signed = other.Signed.Clone();
          break;
        case TransactionOneofCase.SignedMultisig:
          SignedMultisig = other.SignedMultisig.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionUnion Clone() {
      return new TransactionUnion(this);
    }

    /// <summary>Field number for the "unsigned" field.</summary>
    public const int UnsignedFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.Transaction Unsigned {
      get { return transactionCase_ == TransactionOneofCase.Unsigned ? (global::Core.Transaction) transaction_ : null; }
      set {
        transaction_ = value;
        transactionCase_ = value == null ? TransactionOneofCase.None : TransactionOneofCase.Unsigned;
      }
    }

    /// <summary>Field number for the "signed" field.</summary>
    public const int SignedFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.SignedTransaction Signed {
      get { return transactionCase_ == TransactionOneofCase.Signed ? (global::Core.SignedTransaction) transaction_ : null; }
      set {
        transaction_ = value;
        transactionCase_ = value == null ? TransactionOneofCase.None : TransactionOneofCase.Signed;
      }
    }

    /// <summary>Field number for the "signed_multisig" field.</summary>
    public const int SignedMultisigFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.SignedMultisigTransaction SignedMultisig {
      get { return transactionCase_ == TransactionOneofCase.SignedMultisig ? (global::Core.SignedMultisigTransaction) transaction_ : null; }
      set {
        transaction_ = value;
        transactionCase_ = value == null ? TransactionOneofCase.None : TransactionOneofCase.SignedMultisig;
      }
    }

    private object transaction_;
    /// <summary>Enum of possible cases for the "transaction" oneof.</summary>
    public enum TransactionOneofCase {
      None = 0,
      Unsigned = 1,
      Signed = 2,
      SignedMultisig = 3,
    }
    private TransactionOneofCase transactionCase_ = TransactionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionOneofCase TransactionCase {
      get { return transactionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTransaction() {
      transactionCase_ = TransactionOneofCase.None;
      transaction_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionUnion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionUnion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Unsigned, other.Unsigned)) return false;
      if (!object.Equals(Signed, other.Signed)) return false;
      if (!object.Equals(SignedMultisig, other.SignedMultisig)) return false;
      if (TransactionCase != other.TransactionCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (transactionCase_ == TransactionOneofCase.Unsigned) hash ^= Unsigned.GetHashCode();
      if (transactionCase_ == TransactionOneofCase.Signed) hash ^= Signed.GetHashCode();
      if (transactionCase_ == TransactionOneofCase.SignedMultisig) hash ^= SignedMultisig.GetHashCode();
      hash ^= (int) transactionCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (transactionCase_ == TransactionOneofCase.Unsigned) {
        output.WriteRawTag(10);
        output.WriteMessage(Unsigned);
      }
      if (transactionCase_ == TransactionOneofCase.Signed) {
        output.WriteRawTag(18);
        output.WriteMessage(Signed);
      }
      if (transactionCase_ == TransactionOneofCase.SignedMultisig) {
        output.WriteRawTag(26);
        output.WriteMessage(SignedMultisig);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (transactionCase_ == TransactionOneofCase.Unsigned) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unsigned);
      }
      if (transactionCase_ == TransactionOneofCase.Signed) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Signed);
      }
      if (transactionCase_ == TransactionOneofCase.SignedMultisig) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SignedMultisig);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionUnion other) {
      if (other == null) {
        return;
      }
      switch (other.TransactionCase) {
        case TransactionOneofCase.Unsigned:
          Unsigned = other.Unsigned;
          break;
        case TransactionOneofCase.Signed:
          Signed = other.Signed;
          break;
        case TransactionOneofCase.SignedMultisig:
          SignedMultisig = other.SignedMultisig;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Core.Transaction subBuilder = new global::Core.Transaction();
            if (transactionCase_ == TransactionOneofCase.Unsigned) {
              subBuilder.MergeFrom(Unsigned);
            }
            input.ReadMessage(subBuilder);
            Unsigned = subBuilder;
            break;
          }
          case 18: {
            global::Core.SignedTransaction subBuilder = new global::Core.SignedTransaction();
            if (transactionCase_ == TransactionOneofCase.Signed) {
              subBuilder.MergeFrom(Signed);
            }
            input.ReadMessage(subBuilder);
            Signed = subBuilder;
            break;
          }
          case 26: {
            global::Core.SignedMultisigTransaction subBuilder = new global::Core.SignedMultisigTransaction();
            if (transactionCase_ == TransactionOneofCase.SignedMultisig) {
              subBuilder.MergeFrom(SignedMultisig);
            }
            input.ReadMessage(subBuilder);
            SignedMultisig = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class VBKTransactionWithContext : pb::IMessage<VBKTransactionWithContext> {
    private static readonly pb::MessageParser<VBKTransactionWithContext> _parser = new pb::MessageParser<VBKTransactionWithContext>(() => new VBKTransactionWithContext());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VBKTransactionWithContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VBKTransactionWithContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VBKTransactionWithContext(VBKTransactionWithContext other) : this() {
      MerklePath = other.merklePath_ != null ? other.MerklePath.Clone() : null;
      switch (other.TransactionCase) {
        case TransactionOneofCase.SignedTransaction:
          SignedTransaction = other.SignedTransaction.Clone();
          break;
        case TransactionOneofCase.SignedMultisigTransaction:
          SignedMultisigTransaction = other.SignedMultisigTransaction.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VBKTransactionWithContext Clone() {
      return new VBKTransactionWithContext(this);
    }

    /// <summary>Field number for the "merkle_path" field.</summary>
    public const int MerklePathFieldNumber = 1;
    private global::Core.VBKMerklePath merklePath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.VBKMerklePath MerklePath {
      get { return merklePath_; }
      set {
        merklePath_ = value;
      }
    }

    /// <summary>Field number for the "signed_transaction" field.</summary>
    public const int SignedTransactionFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.SignedTransaction SignedTransaction {
      get { return transactionCase_ == TransactionOneofCase.SignedTransaction ? (global::Core.SignedTransaction) transaction_ : null; }
      set {
        transaction_ = value;
        transactionCase_ = value == null ? TransactionOneofCase.None : TransactionOneofCase.SignedTransaction;
      }
    }

    /// <summary>Field number for the "signed_multisig_transaction" field.</summary>
    public const int SignedMultisigTransactionFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.SignedMultisigTransaction SignedMultisigTransaction {
      get { return transactionCase_ == TransactionOneofCase.SignedMultisigTransaction ? (global::Core.SignedMultisigTransaction) transaction_ : null; }
      set {
        transaction_ = value;
        transactionCase_ = value == null ? TransactionOneofCase.None : TransactionOneofCase.SignedMultisigTransaction;
      }
    }

    private object transaction_;
    /// <summary>Enum of possible cases for the "transaction" oneof.</summary>
    public enum TransactionOneofCase {
      None = 0,
      SignedTransaction = 2,
      SignedMultisigTransaction = 3,
    }
    private TransactionOneofCase transactionCase_ = TransactionOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionOneofCase TransactionCase {
      get { return transactionCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTransaction() {
      transactionCase_ = TransactionOneofCase.None;
      transaction_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VBKTransactionWithContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VBKTransactionWithContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MerklePath, other.MerklePath)) return false;
      if (!object.Equals(SignedTransaction, other.SignedTransaction)) return false;
      if (!object.Equals(SignedMultisigTransaction, other.SignedMultisigTransaction)) return false;
      if (TransactionCase != other.TransactionCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (merklePath_ != null) hash ^= MerklePath.GetHashCode();
      if (transactionCase_ == TransactionOneofCase.SignedTransaction) hash ^= SignedTransaction.GetHashCode();
      if (transactionCase_ == TransactionOneofCase.SignedMultisigTransaction) hash ^= SignedMultisigTransaction.GetHashCode();
      hash ^= (int) transactionCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (merklePath_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MerklePath);
      }
      if (transactionCase_ == TransactionOneofCase.SignedTransaction) {
        output.WriteRawTag(18);
        output.WriteMessage(SignedTransaction);
      }
      if (transactionCase_ == TransactionOneofCase.SignedMultisigTransaction) {
        output.WriteRawTag(26);
        output.WriteMessage(SignedMultisigTransaction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (merklePath_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MerklePath);
      }
      if (transactionCase_ == TransactionOneofCase.SignedTransaction) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SignedTransaction);
      }
      if (transactionCase_ == TransactionOneofCase.SignedMultisigTransaction) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SignedMultisigTransaction);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VBKTransactionWithContext other) {
      if (other == null) {
        return;
      }
      if (other.merklePath_ != null) {
        if (merklePath_ == null) {
          merklePath_ = new global::Core.VBKMerklePath();
        }
        MerklePath.MergeFrom(other.MerklePath);
      }
      switch (other.TransactionCase) {
        case TransactionOneofCase.SignedTransaction:
          SignedTransaction = other.SignedTransaction;
          break;
        case TransactionOneofCase.SignedMultisigTransaction:
          SignedMultisigTransaction = other.SignedMultisigTransaction;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (merklePath_ == null) {
              merklePath_ = new global::Core.VBKMerklePath();
            }
            input.ReadMessage(merklePath_);
            break;
          }
          case 18: {
            global::Core.SignedTransaction subBuilder = new global::Core.SignedTransaction();
            if (transactionCase_ == TransactionOneofCase.SignedTransaction) {
              subBuilder.MergeFrom(SignedTransaction);
            }
            input.ReadMessage(subBuilder);
            SignedTransaction = subBuilder;
            break;
          }
          case 26: {
            global::Core.SignedMultisigTransaction subBuilder = new global::Core.SignedMultisigTransaction();
            if (transactionCase_ == TransactionOneofCase.SignedMultisigTransaction) {
              subBuilder.MergeFrom(SignedMultisigTransaction);
            }
            input.ReadMessage(subBuilder);
            SignedMultisigTransaction = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class VBKMerklePath : pb::IMessage<VBKMerklePath> {
    private static readonly pb::MessageParser<VBKMerklePath> _parser = new pb::MessageParser<VBKMerklePath>(() => new VBKMerklePath());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VBKMerklePath> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VBKMerklePath() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VBKMerklePath(VBKMerklePath other) : this() {
      layers_ = other.layers_.Clone();
      bottomData_ = other.bottomData_;
      bottomDataIndex_ = other.bottomDataIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VBKMerklePath Clone() {
      return new VBKMerklePath(this);
    }

    /// <summary>Field number for the "layers" field.</summary>
    public const int LayersFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_layers_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> layers_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Layers {
      get { return layers_; }
    }

    /// <summary>Field number for the "bottom_data" field.</summary>
    public const int BottomDataFieldNumber = 2;
    private pb::ByteString bottomData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BottomData {
      get { return bottomData_; }
      set {
        bottomData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bottom_data_index" field.</summary>
    public const int BottomDataIndexFieldNumber = 3;
    private int bottomDataIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BottomDataIndex {
      get { return bottomDataIndex_; }
      set {
        bottomDataIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VBKMerklePath);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VBKMerklePath other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!layers_.Equals(other.layers_)) return false;
      if (BottomData != other.BottomData) return false;
      if (BottomDataIndex != other.BottomDataIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= layers_.GetHashCode();
      if (BottomData.Length != 0) hash ^= BottomData.GetHashCode();
      if (BottomDataIndex != 0) hash ^= BottomDataIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      layers_.WriteTo(output, _repeated_layers_codec);
      if (BottomData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(BottomData);
      }
      if (BottomDataIndex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BottomDataIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += layers_.CalculateSize(_repeated_layers_codec);
      if (BottomData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BottomData);
      }
      if (BottomDataIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BottomDataIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VBKMerklePath other) {
      if (other == null) {
        return;
      }
      layers_.Add(other.layers_);
      if (other.BottomData.Length != 0) {
        BottomData = other.BottomData;
      }
      if (other.BottomDataIndex != 0) {
        BottomDataIndex = other.BottomDataIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            layers_.AddEntriesFrom(input, _repeated_layers_codec);
            break;
          }
          case 18: {
            BottomData = input.ReadBytes();
            break;
          }
          case 24: {
            BottomDataIndex = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionMeta : pb::IMessage<TransactionMeta> {
    private static readonly pb::MessageParser<TransactionMeta> _parser = new pb::MessageParser<TransactionMeta>(() => new TransactionMeta());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionMeta> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionMeta() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionMeta(TransactionMeta other) : this() {
      txId_ = other.txId_;
      blockHeader_ = other.blockHeader_;
      appearsIn_ = other.appearsIn_.Clone();
      confirmations_ = other.confirmations_;
      status_ = other.status_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionMeta Clone() {
      return new TransactionMeta(this);
    }

    /// <summary>Field number for the "tx_id" field.</summary>
    public const int TxIdFieldNumber = 1;
    private pb::ByteString txId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TxId {
      get { return txId_; }
      set {
        txId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block_header" field.</summary>
    public const int BlockHeaderFieldNumber = 2;
    private pb::ByteString blockHeader_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BlockHeader {
      get { return blockHeader_; }
      set {
        blockHeader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "appears_in" field.</summary>
    public const int AppearsInFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_appearsIn_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> appearsIn_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> AppearsIn {
      get { return appearsIn_; }
    }

    /// <summary>Field number for the "confirmations" field.</summary>
    public const int ConfirmationsFieldNumber = 4;
    private int confirmations_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Confirmations {
      get { return confirmations_; }
      set {
        confirmations_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 5;
    private global::Core.TransactionMeta.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.TransactionMeta.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionMeta);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionMeta other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TxId != other.TxId) return false;
      if (BlockHeader != other.BlockHeader) return false;
      if(!appearsIn_.Equals(other.appearsIn_)) return false;
      if (Confirmations != other.Confirmations) return false;
      if (Status != other.Status) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TxId.Length != 0) hash ^= TxId.GetHashCode();
      if (BlockHeader.Length != 0) hash ^= BlockHeader.GetHashCode();
      hash ^= appearsIn_.GetHashCode();
      if (Confirmations != 0) hash ^= Confirmations.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TxId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TxId);
      }
      if (BlockHeader.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(BlockHeader);
      }
      appearsIn_.WriteTo(output, _repeated_appearsIn_codec);
      if (Confirmations != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Confirmations);
      }
      if (Status != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TxId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TxId);
      }
      if (BlockHeader.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BlockHeader);
      }
      size += appearsIn_.CalculateSize(_repeated_appearsIn_codec);
      if (Confirmations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Confirmations);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionMeta other) {
      if (other == null) {
        return;
      }
      if (other.TxId.Length != 0) {
        TxId = other.TxId;
      }
      if (other.BlockHeader.Length != 0) {
        BlockHeader = other.BlockHeader;
      }
      appearsIn_.Add(other.appearsIn_);
      if (other.Confirmations != 0) {
        Confirmations = other.Confirmations;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TxId = input.ReadBytes();
            break;
          }
          case 18: {
            BlockHeader = input.ReadBytes();
            break;
          }
          case 26: {
            appearsIn_.AddEntriesFrom(input, _repeated_appearsIn_codec);
            break;
          }
          case 32: {
            Confirmations = input.ReadInt32();
            break;
          }
          case 40: {
            status_ = (global::Core.TransactionMeta.Types.Status) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TransactionMeta message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Status {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("PENDING")] Pending = 1,
        [pbr::OriginalName("CONFIRMED")] Confirmed = 2,
        [pbr::OriginalName("DEAD")] Dead = 3,
      }

    }
    #endregion

  }

  public sealed partial class WalletTransaction : pb::IMessage<WalletTransaction> {
    private static readonly pb::MessageParser<WalletTransaction> _parser = new pb::MessageParser<WalletTransaction>(() => new WalletTransaction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WalletTransaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletTransaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletTransaction(WalletTransaction other) : this() {
      txId_ = other.txId_;
      address_ = other.address_;
      timestamp_ = other.timestamp_;
      type_ = other.type_;
      netAmount_ = other.netAmount_;
      Input = other.input_ != null ? other.Input.Clone() : null;
      outputs_ = other.outputs_.Clone();
      Meta = other.meta_ != null ? other.Meta.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WalletTransaction Clone() {
      return new WalletTransaction(this);
    }

    /// <summary>Field number for the "tx_id" field.</summary>
    public const int TxIdFieldNumber = 1;
    private pb::ByteString txId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TxId {
      get { return txId_; }
      set {
        txId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 2;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private int timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::Core.WalletTransaction.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.WalletTransaction.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "net_amount" field.</summary>
    public const int NetAmountFieldNumber = 5;
    private long netAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NetAmount {
      get { return netAmount_; }
      set {
        netAmount_ = value;
      }
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 6;
    private global::Core.Output input_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.Output Input {
      get { return input_; }
      set {
        input_ = value;
      }
    }

    /// <summary>Field number for the "outputs" field.</summary>
    public const int OutputsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Core.Output> _repeated_outputs_codec
        = pb::FieldCodec.ForMessage(58, global::Core.Output.Parser);
    private readonly pbc::RepeatedField<global::Core.Output> outputs_ = new pbc::RepeatedField<global::Core.Output>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Output> Outputs {
      get { return outputs_; }
    }

    /// <summary>Field number for the "meta" field.</summary>
    public const int MetaFieldNumber = 8;
    private global::Core.TransactionMeta meta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.TransactionMeta Meta {
      get { return meta_; }
      set {
        meta_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WalletTransaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WalletTransaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TxId != other.TxId) return false;
      if (Address != other.Address) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Type != other.Type) return false;
      if (NetAmount != other.NetAmount) return false;
      if (!object.Equals(Input, other.Input)) return false;
      if(!outputs_.Equals(other.outputs_)) return false;
      if (!object.Equals(Meta, other.Meta)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TxId.Length != 0) hash ^= TxId.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (NetAmount != 0L) hash ^= NetAmount.GetHashCode();
      if (input_ != null) hash ^= Input.GetHashCode();
      hash ^= outputs_.GetHashCode();
      if (meta_ != null) hash ^= Meta.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TxId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TxId);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Address);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Timestamp);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (NetAmount != 0L) {
        output.WriteRawTag(40);
        output.WriteSInt64(NetAmount);
      }
      if (input_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Input);
      }
      outputs_.WriteTo(output, _repeated_outputs_codec);
      if (meta_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Meta);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TxId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TxId);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (NetAmount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(NetAmount);
      }
      if (input_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Input);
      }
      size += outputs_.CalculateSize(_repeated_outputs_codec);
      if (meta_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Meta);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WalletTransaction other) {
      if (other == null) {
        return;
      }
      if (other.TxId.Length != 0) {
        TxId = other.TxId;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.NetAmount != 0L) {
        NetAmount = other.NetAmount;
      }
      if (other.input_ != null) {
        if (input_ == null) {
          input_ = new global::Core.Output();
        }
        Input.MergeFrom(other.Input);
      }
      outputs_.Add(other.outputs_);
      if (other.meta_ != null) {
        if (meta_ == null) {
          meta_ = new global::Core.TransactionMeta();
        }
        Meta.MergeFrom(other.Meta);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TxId = input.ReadBytes();
            break;
          }
          case 18: {
            Address = input.ReadBytes();
            break;
          }
          case 24: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 32: {
            type_ = (global::Core.WalletTransaction.Types.Type) input.ReadEnum();
            break;
          }
          case 40: {
            NetAmount = input.ReadSInt64();
            break;
          }
          case 50: {
            if (input_ == null) {
              input_ = new global::Core.Output();
            }
            input.ReadMessage(input_);
            break;
          }
          case 58: {
            outputs_.AddEntriesFrom(input, _repeated_outputs_codec);
            break;
          }
          case 66: {
            if (meta_ == null) {
              meta_ = new global::Core.TransactionMeta();
            }
            input.ReadMessage(meta_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the WalletTransaction message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("NOT_SET")] NotSet = 0,
        [pbr::OriginalName("POW_COINBASE")] PowCoinbase = 1,
        [pbr::OriginalName("POP_COINBASE")] PopCoinbase = 2,
        [pbr::OriginalName("BOTH_COINBASE")] BothCoinbase = 3,
        [pbr::OriginalName("SENT")] Sent = 4,
        [pbr::OriginalName("RECEIVED")] Received = 5,
        [pbr::OriginalName("SENT_AND_RECEIVED")] SentAndReceived = 6,
        [pbr::OriginalName("POP")] Pop = 7,
      }

    }
    #endregion

  }

  public sealed partial class PoPDatastore : pb::IMessage<PoPDatastore> {
    private static readonly pb::MessageParser<PoPDatastore> _parser = new pb::MessageParser<PoPDatastore>(() => new PoPDatastore());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PoPDatastore> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoPDatastore() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoPDatastore(PoPDatastore other) : this() {
      datastoreHash_ = other.datastoreHash_;
      endorsedVeriblockHeadersHash_ = other.endorsedVeriblockHeadersHash_;
      endorsedAltchainHeadersHash_ = other.endorsedAltchainHeadersHash_;
      veriblockHeaderEndorsements_ = other.veriblockHeaderEndorsements_.Clone();
      altchainHeaderEndorsements_ = other.altchainHeaderEndorsements_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoPDatastore Clone() {
      return new PoPDatastore(this);
    }

    /// <summary>Field number for the "datastore_hash" field.</summary>
    public const int DatastoreHashFieldNumber = 1;
    private pb::ByteString datastoreHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DatastoreHash {
      get { return datastoreHash_; }
      set {
        datastoreHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endorsed_veriblock_headers_hash" field.</summary>
    public const int EndorsedVeriblockHeadersHashFieldNumber = 2;
    private pb::ByteString endorsedVeriblockHeadersHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EndorsedVeriblockHeadersHash {
      get { return endorsedVeriblockHeadersHash_; }
      set {
        endorsedVeriblockHeadersHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endorsed_altchain_headers_hash" field.</summary>
    public const int EndorsedAltchainHeadersHashFieldNumber = 3;
    private pb::ByteString endorsedAltchainHeadersHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EndorsedAltchainHeadersHash {
      get { return endorsedAltchainHeadersHash_; }
      set {
        endorsedAltchainHeadersHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "veriblock_header_endorsements" field.</summary>
    public const int VeriblockHeaderEndorsementsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Core.BitcoinHeaderVeriBlockEndorsementCountsPair> _repeated_veriblockHeaderEndorsements_codec
        = pb::FieldCodec.ForMessage(34, global::Core.BitcoinHeaderVeriBlockEndorsementCountsPair.Parser);
    private readonly pbc::RepeatedField<global::Core.BitcoinHeaderVeriBlockEndorsementCountsPair> veriblockHeaderEndorsements_ = new pbc::RepeatedField<global::Core.BitcoinHeaderVeriBlockEndorsementCountsPair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.BitcoinHeaderVeriBlockEndorsementCountsPair> VeriblockHeaderEndorsements {
      get { return veriblockHeaderEndorsements_; }
    }

    /// <summary>Field number for the "altchain_header_endorsements" field.</summary>
    public const int AltchainHeaderEndorsementsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Core.AltchainIdAltchainHeaderEndorsementCountsPair> _repeated_altchainHeaderEndorsements_codec
        = pb::FieldCodec.ForMessage(42, global::Core.AltchainIdAltchainHeaderEndorsementCountsPair.Parser);
    private readonly pbc::RepeatedField<global::Core.AltchainIdAltchainHeaderEndorsementCountsPair> altchainHeaderEndorsements_ = new pbc::RepeatedField<global::Core.AltchainIdAltchainHeaderEndorsementCountsPair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.AltchainIdAltchainHeaderEndorsementCountsPair> AltchainHeaderEndorsements {
      get { return altchainHeaderEndorsements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PoPDatastore);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PoPDatastore other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DatastoreHash != other.DatastoreHash) return false;
      if (EndorsedVeriblockHeadersHash != other.EndorsedVeriblockHeadersHash) return false;
      if (EndorsedAltchainHeadersHash != other.EndorsedAltchainHeadersHash) return false;
      if(!veriblockHeaderEndorsements_.Equals(other.veriblockHeaderEndorsements_)) return false;
      if(!altchainHeaderEndorsements_.Equals(other.altchainHeaderEndorsements_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DatastoreHash.Length != 0) hash ^= DatastoreHash.GetHashCode();
      if (EndorsedVeriblockHeadersHash.Length != 0) hash ^= EndorsedVeriblockHeadersHash.GetHashCode();
      if (EndorsedAltchainHeadersHash.Length != 0) hash ^= EndorsedAltchainHeadersHash.GetHashCode();
      hash ^= veriblockHeaderEndorsements_.GetHashCode();
      hash ^= altchainHeaderEndorsements_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DatastoreHash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(DatastoreHash);
      }
      if (EndorsedVeriblockHeadersHash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(EndorsedVeriblockHeadersHash);
      }
      if (EndorsedAltchainHeadersHash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(EndorsedAltchainHeadersHash);
      }
      veriblockHeaderEndorsements_.WriteTo(output, _repeated_veriblockHeaderEndorsements_codec);
      altchainHeaderEndorsements_.WriteTo(output, _repeated_altchainHeaderEndorsements_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DatastoreHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DatastoreHash);
      }
      if (EndorsedVeriblockHeadersHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EndorsedVeriblockHeadersHash);
      }
      if (EndorsedAltchainHeadersHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EndorsedAltchainHeadersHash);
      }
      size += veriblockHeaderEndorsements_.CalculateSize(_repeated_veriblockHeaderEndorsements_codec);
      size += altchainHeaderEndorsements_.CalculateSize(_repeated_altchainHeaderEndorsements_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PoPDatastore other) {
      if (other == null) {
        return;
      }
      if (other.DatastoreHash.Length != 0) {
        DatastoreHash = other.DatastoreHash;
      }
      if (other.EndorsedVeriblockHeadersHash.Length != 0) {
        EndorsedVeriblockHeadersHash = other.EndorsedVeriblockHeadersHash;
      }
      if (other.EndorsedAltchainHeadersHash.Length != 0) {
        EndorsedAltchainHeadersHash = other.EndorsedAltchainHeadersHash;
      }
      veriblockHeaderEndorsements_.Add(other.veriblockHeaderEndorsements_);
      altchainHeaderEndorsements_.Add(other.altchainHeaderEndorsements_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            DatastoreHash = input.ReadBytes();
            break;
          }
          case 18: {
            EndorsedVeriblockHeadersHash = input.ReadBytes();
            break;
          }
          case 26: {
            EndorsedAltchainHeadersHash = input.ReadBytes();
            break;
          }
          case 34: {
            veriblockHeaderEndorsements_.AddEntriesFrom(input, _repeated_veriblockHeaderEndorsements_codec);
            break;
          }
          case 42: {
            altchainHeaderEndorsements_.AddEntriesFrom(input, _repeated_altchainHeaderEndorsements_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AltchainIdAltchainHeaderEndorsementCountsPair : pb::IMessage<AltchainIdAltchainHeaderEndorsementCountsPair> {
    private static readonly pb::MessageParser<AltchainIdAltchainHeaderEndorsementCountsPair> _parser = new pb::MessageParser<AltchainIdAltchainHeaderEndorsementCountsPair>(() => new AltchainIdAltchainHeaderEndorsementCountsPair());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AltchainIdAltchainHeaderEndorsementCountsPair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AltchainIdAltchainHeaderEndorsementCountsPair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AltchainIdAltchainHeaderEndorsementCountsPair(AltchainIdAltchainHeaderEndorsementCountsPair other) : this() {
      altchainIdentifier_ = other.altchainIdentifier_;
      altchainHeaderEndorsementCountPairs_ = other.altchainHeaderEndorsementCountPairs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AltchainIdAltchainHeaderEndorsementCountsPair Clone() {
      return new AltchainIdAltchainHeaderEndorsementCountsPair(this);
    }

    /// <summary>Field number for the "altchain_identifier" field.</summary>
    public const int AltchainIdentifierFieldNumber = 1;
    private long altchainIdentifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AltchainIdentifier {
      get { return altchainIdentifier_; }
      set {
        altchainIdentifier_ = value;
      }
    }

    /// <summary>Field number for the "altchain_header_endorsement_count_pairs" field.</summary>
    public const int AltchainHeaderEndorsementCountPairsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.AltchainHeaderEndorsementCountPair> _repeated_altchainHeaderEndorsementCountPairs_codec
        = pb::FieldCodec.ForMessage(18, global::Core.AltchainHeaderEndorsementCountPair.Parser);
    private readonly pbc::RepeatedField<global::Core.AltchainHeaderEndorsementCountPair> altchainHeaderEndorsementCountPairs_ = new pbc::RepeatedField<global::Core.AltchainHeaderEndorsementCountPair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.AltchainHeaderEndorsementCountPair> AltchainHeaderEndorsementCountPairs {
      get { return altchainHeaderEndorsementCountPairs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AltchainIdAltchainHeaderEndorsementCountsPair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AltchainIdAltchainHeaderEndorsementCountsPair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AltchainIdentifier != other.AltchainIdentifier) return false;
      if(!altchainHeaderEndorsementCountPairs_.Equals(other.altchainHeaderEndorsementCountPairs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AltchainIdentifier != 0L) hash ^= AltchainIdentifier.GetHashCode();
      hash ^= altchainHeaderEndorsementCountPairs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AltchainIdentifier != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(AltchainIdentifier);
      }
      altchainHeaderEndorsementCountPairs_.WriteTo(output, _repeated_altchainHeaderEndorsementCountPairs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AltchainIdentifier != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AltchainIdentifier);
      }
      size += altchainHeaderEndorsementCountPairs_.CalculateSize(_repeated_altchainHeaderEndorsementCountPairs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AltchainIdAltchainHeaderEndorsementCountsPair other) {
      if (other == null) {
        return;
      }
      if (other.AltchainIdentifier != 0L) {
        AltchainIdentifier = other.AltchainIdentifier;
      }
      altchainHeaderEndorsementCountPairs_.Add(other.altchainHeaderEndorsementCountPairs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AltchainIdentifier = input.ReadInt64();
            break;
          }
          case 18: {
            altchainHeaderEndorsementCountPairs_.AddEntriesFrom(input, _repeated_altchainHeaderEndorsementCountPairs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BitcoinHeaderVeriBlockEndorsementCountsPair : pb::IMessage<BitcoinHeaderVeriBlockEndorsementCountsPair> {
    private static readonly pb::MessageParser<BitcoinHeaderVeriBlockEndorsementCountsPair> _parser = new pb::MessageParser<BitcoinHeaderVeriBlockEndorsementCountsPair>(() => new BitcoinHeaderVeriBlockEndorsementCountsPair());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BitcoinHeaderVeriBlockEndorsementCountsPair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BitcoinHeaderVeriBlockEndorsementCountsPair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BitcoinHeaderVeriBlockEndorsementCountsPair(BitcoinHeaderVeriBlockEndorsementCountsPair other) : this() {
      bitcoinHeader_ = other.bitcoinHeader_;
      veriblockHeaderEndorsementCountPairs_ = other.veriblockHeaderEndorsementCountPairs_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BitcoinHeaderVeriBlockEndorsementCountsPair Clone() {
      return new BitcoinHeaderVeriBlockEndorsementCountsPair(this);
    }

    /// <summary>Field number for the "bitcoin_header" field.</summary>
    public const int BitcoinHeaderFieldNumber = 1;
    private pb::ByteString bitcoinHeader_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BitcoinHeader {
      get { return bitcoinHeader_; }
      set {
        bitcoinHeader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "veriblock_header_endorsement_count_pairs" field.</summary>
    public const int VeriblockHeaderEndorsementCountPairsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.VeriBlockHeaderEndorsementCountPair> _repeated_veriblockHeaderEndorsementCountPairs_codec
        = pb::FieldCodec.ForMessage(18, global::Core.VeriBlockHeaderEndorsementCountPair.Parser);
    private readonly pbc::RepeatedField<global::Core.VeriBlockHeaderEndorsementCountPair> veriblockHeaderEndorsementCountPairs_ = new pbc::RepeatedField<global::Core.VeriBlockHeaderEndorsementCountPair>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.VeriBlockHeaderEndorsementCountPair> VeriblockHeaderEndorsementCountPairs {
      get { return veriblockHeaderEndorsementCountPairs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BitcoinHeaderVeriBlockEndorsementCountsPair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BitcoinHeaderVeriBlockEndorsementCountsPair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BitcoinHeader != other.BitcoinHeader) return false;
      if(!veriblockHeaderEndorsementCountPairs_.Equals(other.veriblockHeaderEndorsementCountPairs_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BitcoinHeader.Length != 0) hash ^= BitcoinHeader.GetHashCode();
      hash ^= veriblockHeaderEndorsementCountPairs_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BitcoinHeader.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(BitcoinHeader);
      }
      veriblockHeaderEndorsementCountPairs_.WriteTo(output, _repeated_veriblockHeaderEndorsementCountPairs_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BitcoinHeader.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BitcoinHeader);
      }
      size += veriblockHeaderEndorsementCountPairs_.CalculateSize(_repeated_veriblockHeaderEndorsementCountPairs_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BitcoinHeaderVeriBlockEndorsementCountsPair other) {
      if (other == null) {
        return;
      }
      if (other.BitcoinHeader.Length != 0) {
        BitcoinHeader = other.BitcoinHeader;
      }
      veriblockHeaderEndorsementCountPairs_.Add(other.veriblockHeaderEndorsementCountPairs_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BitcoinHeader = input.ReadBytes();
            break;
          }
          case 18: {
            veriblockHeaderEndorsementCountPairs_.AddEntriesFrom(input, _repeated_veriblockHeaderEndorsementCountPairs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VeriBlockHeaderEndorsementCountPair : pb::IMessage<VeriBlockHeaderEndorsementCountPair> {
    private static readonly pb::MessageParser<VeriBlockHeaderEndorsementCountPair> _parser = new pb::MessageParser<VeriBlockHeaderEndorsementCountPair>(() => new VeriBlockHeaderEndorsementCountPair());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VeriBlockHeaderEndorsementCountPair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VeriBlockHeaderEndorsementCountPair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VeriBlockHeaderEndorsementCountPair(VeriBlockHeaderEndorsementCountPair other) : this() {
      veriblockHeader_ = other.veriblockHeader_;
      endorsementCount_ = other.endorsementCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VeriBlockHeaderEndorsementCountPair Clone() {
      return new VeriBlockHeaderEndorsementCountPair(this);
    }

    /// <summary>Field number for the "veriblock_header" field.</summary>
    public const int VeriblockHeaderFieldNumber = 1;
    private pb::ByteString veriblockHeader_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString VeriblockHeader {
      get { return veriblockHeader_; }
      set {
        veriblockHeader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endorsement_count" field.</summary>
    public const int EndorsementCountFieldNumber = 2;
    private int endorsementCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndorsementCount {
      get { return endorsementCount_; }
      set {
        endorsementCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VeriBlockHeaderEndorsementCountPair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VeriBlockHeaderEndorsementCountPair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VeriblockHeader != other.VeriblockHeader) return false;
      if (EndorsementCount != other.EndorsementCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VeriblockHeader.Length != 0) hash ^= VeriblockHeader.GetHashCode();
      if (EndorsementCount != 0) hash ^= EndorsementCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VeriblockHeader.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(VeriblockHeader);
      }
      if (EndorsementCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EndorsementCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VeriblockHeader.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(VeriblockHeader);
      }
      if (EndorsementCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndorsementCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VeriBlockHeaderEndorsementCountPair other) {
      if (other == null) {
        return;
      }
      if (other.VeriblockHeader.Length != 0) {
        VeriblockHeader = other.VeriblockHeader;
      }
      if (other.EndorsementCount != 0) {
        EndorsementCount = other.EndorsementCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            VeriblockHeader = input.ReadBytes();
            break;
          }
          case 16: {
            EndorsementCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AltchainHeaderEndorsementCountPair : pb::IMessage<AltchainHeaderEndorsementCountPair> {
    private static readonly pb::MessageParser<AltchainHeaderEndorsementCountPair> _parser = new pb::MessageParser<AltchainHeaderEndorsementCountPair>(() => new AltchainHeaderEndorsementCountPair());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AltchainHeaderEndorsementCountPair> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AltchainHeaderEndorsementCountPair() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AltchainHeaderEndorsementCountPair(AltchainHeaderEndorsementCountPair other) : this() {
      altchainHeader_ = other.altchainHeader_;
      endorsementCount_ = other.endorsementCount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AltchainHeaderEndorsementCountPair Clone() {
      return new AltchainHeaderEndorsementCountPair(this);
    }

    /// <summary>Field number for the "altchain_header" field.</summary>
    public const int AltchainHeaderFieldNumber = 1;
    private pb::ByteString altchainHeader_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString AltchainHeader {
      get { return altchainHeader_; }
      set {
        altchainHeader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endorsement_count" field.</summary>
    public const int EndorsementCountFieldNumber = 2;
    private int endorsementCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndorsementCount {
      get { return endorsementCount_; }
      set {
        endorsementCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AltchainHeaderEndorsementCountPair);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AltchainHeaderEndorsementCountPair other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AltchainHeader != other.AltchainHeader) return false;
      if (EndorsementCount != other.EndorsementCount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AltchainHeader.Length != 0) hash ^= AltchainHeader.GetHashCode();
      if (EndorsementCount != 0) hash ^= EndorsementCount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AltchainHeader.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(AltchainHeader);
      }
      if (EndorsementCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EndorsementCount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AltchainHeader.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(AltchainHeader);
      }
      if (EndorsementCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndorsementCount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AltchainHeaderEndorsementCountPair other) {
      if (other == null) {
        return;
      }
      if (other.AltchainHeader.Length != 0) {
        AltchainHeader = other.AltchainHeader;
      }
      if (other.EndorsementCount != 0) {
        EndorsementCount = other.EndorsementCount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AltchainHeader = input.ReadBytes();
            break;
          }
          case 16: {
            EndorsementCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockFeeTable : pb::IMessage<BlockFeeTable> {
    private static readonly pb::MessageParser<BlockFeeTable> _parser = new pb::MessageParser<BlockFeeTable>(() => new BlockFeeTable());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockFeeTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockFeeTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockFeeTable(BlockFeeTable other) : this() {
      popFeeShare_ = other.popFeeShare_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockFeeTable Clone() {
      return new BlockFeeTable(this);
    }

    /// <summary>Field number for the "pop_fee_share" field.</summary>
    public const int PopFeeShareFieldNumber = 1;
    private long popFeeShare_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PopFeeShare {
      get { return popFeeShare_; }
      set {
        popFeeShare_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockFeeTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockFeeTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PopFeeShare != other.PopFeeShare) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PopFeeShare != 0L) hash ^= PopFeeShare.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PopFeeShare != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PopFeeShare);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PopFeeShare != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PopFeeShare);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockFeeTable other) {
      if (other == null) {
        return;
      }
      if (other.PopFeeShare != 0L) {
        PopFeeShare = other.PopFeeShare;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PopFeeShare = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockContentMetapackage : pb::IMessage<BlockContentMetapackage> {
    private static readonly pb::MessageParser<BlockContentMetapackage> _parser = new pb::MessageParser<BlockContentMetapackage>(() => new BlockContentMetapackage());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockContentMetapackage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockContentMetapackage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockContentMetapackage(BlockContentMetapackage other) : this() {
      CoinbaseTransaction = other.coinbaseTransaction_ != null ? other.CoinbaseTransaction.Clone() : null;
      PopDatastore = other.popDatastore_ != null ? other.PopDatastore.Clone() : null;
      minerComment_ = other.minerComment_;
      ledgerHash_ = other.ledgerHash_;
      extraNonce_ = other.extraNonce_;
      hash_ = other.hash_;
      BlockFeeTable = other.blockFeeTable_ != null ? other.BlockFeeTable.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockContentMetapackage Clone() {
      return new BlockContentMetapackage(this);
    }

    /// <summary>Field number for the "coinbase_transaction" field.</summary>
    public const int CoinbaseTransactionFieldNumber = 1;
    private global::Core.CoinbaseTransaction coinbaseTransaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.CoinbaseTransaction CoinbaseTransaction {
      get { return coinbaseTransaction_; }
      set {
        coinbaseTransaction_ = value;
      }
    }

    /// <summary>Field number for the "pop_datastore" field.</summary>
    public const int PopDatastoreFieldNumber = 2;
    private global::Core.PoPDatastore popDatastore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.PoPDatastore PopDatastore {
      get { return popDatastore_; }
      set {
        popDatastore_ = value;
      }
    }

    /// <summary>Field number for the "miner_comment" field.</summary>
    public const int MinerCommentFieldNumber = 3;
    private pb::ByteString minerComment_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MinerComment {
      get { return minerComment_; }
      set {
        minerComment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ledger_hash" field.</summary>
    public const int LedgerHashFieldNumber = 4;
    private pb::ByteString ledgerHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LedgerHash {
      get { return ledgerHash_; }
      set {
        ledgerHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "extra_nonce" field.</summary>
    public const int ExtraNonceFieldNumber = 5;
    private long extraNonce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ExtraNonce {
      get { return extraNonce_; }
      set {
        extraNonce_ = value;
      }
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 6;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "block_fee_table" field.</summary>
    public const int BlockFeeTableFieldNumber = 7;
    private global::Core.BlockFeeTable blockFeeTable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.BlockFeeTable BlockFeeTable {
      get { return blockFeeTable_; }
      set {
        blockFeeTable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockContentMetapackage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockContentMetapackage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CoinbaseTransaction, other.CoinbaseTransaction)) return false;
      if (!object.Equals(PopDatastore, other.PopDatastore)) return false;
      if (MinerComment != other.MinerComment) return false;
      if (LedgerHash != other.LedgerHash) return false;
      if (ExtraNonce != other.ExtraNonce) return false;
      if (Hash != other.Hash) return false;
      if (!object.Equals(BlockFeeTable, other.BlockFeeTable)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (coinbaseTransaction_ != null) hash ^= CoinbaseTransaction.GetHashCode();
      if (popDatastore_ != null) hash ^= PopDatastore.GetHashCode();
      if (MinerComment.Length != 0) hash ^= MinerComment.GetHashCode();
      if (LedgerHash.Length != 0) hash ^= LedgerHash.GetHashCode();
      if (ExtraNonce != 0L) hash ^= ExtraNonce.GetHashCode();
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (blockFeeTable_ != null) hash ^= BlockFeeTable.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (coinbaseTransaction_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CoinbaseTransaction);
      }
      if (popDatastore_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PopDatastore);
      }
      if (MinerComment.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(MinerComment);
      }
      if (LedgerHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(LedgerHash);
      }
      if (ExtraNonce != 0L) {
        output.WriteRawTag(40);
        output.WriteSInt64(ExtraNonce);
      }
      if (Hash.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Hash);
      }
      if (blockFeeTable_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(BlockFeeTable);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (coinbaseTransaction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CoinbaseTransaction);
      }
      if (popDatastore_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PopDatastore);
      }
      if (MinerComment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MinerComment);
      }
      if (LedgerHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LedgerHash);
      }
      if (ExtraNonce != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeSInt64Size(ExtraNonce);
      }
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      if (blockFeeTable_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockFeeTable);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockContentMetapackage other) {
      if (other == null) {
        return;
      }
      if (other.coinbaseTransaction_ != null) {
        if (coinbaseTransaction_ == null) {
          coinbaseTransaction_ = new global::Core.CoinbaseTransaction();
        }
        CoinbaseTransaction.MergeFrom(other.CoinbaseTransaction);
      }
      if (other.popDatastore_ != null) {
        if (popDatastore_ == null) {
          popDatastore_ = new global::Core.PoPDatastore();
        }
        PopDatastore.MergeFrom(other.PopDatastore);
      }
      if (other.MinerComment.Length != 0) {
        MinerComment = other.MinerComment;
      }
      if (other.LedgerHash.Length != 0) {
        LedgerHash = other.LedgerHash;
      }
      if (other.ExtraNonce != 0L) {
        ExtraNonce = other.ExtraNonce;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.blockFeeTable_ != null) {
        if (blockFeeTable_ == null) {
          blockFeeTable_ = new global::Core.BlockFeeTable();
        }
        BlockFeeTable.MergeFrom(other.BlockFeeTable);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (coinbaseTransaction_ == null) {
              coinbaseTransaction_ = new global::Core.CoinbaseTransaction();
            }
            input.ReadMessage(coinbaseTransaction_);
            break;
          }
          case 18: {
            if (popDatastore_ == null) {
              popDatastore_ = new global::Core.PoPDatastore();
            }
            input.ReadMessage(popDatastore_);
            break;
          }
          case 26: {
            MinerComment = input.ReadBytes();
            break;
          }
          case 34: {
            LedgerHash = input.ReadBytes();
            break;
          }
          case 40: {
            ExtraNonce = input.ReadSInt64();
            break;
          }
          case 50: {
            Hash = input.ReadBytes();
            break;
          }
          case 58: {
            if (blockFeeTable_ == null) {
              blockFeeTable_ = new global::Core.BlockFeeTable();
            }
            input.ReadMessage(blockFeeTable_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockSummary : pb::IMessage<BlockSummary> {
    private static readonly pb::MessageParser<BlockSummary> _parser = new pb::MessageParser<BlockSummary>(() => new BlockSummary());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockSummary(BlockSummary other) : this() {
      number_ = other.number_;
      timestamp_ = other.timestamp_;
      hash_ = other.hash_;
      previousHash_ = other.previousHash_;
      secondPreviousHash_ = other.secondPreviousHash_;
      thirdPreviousHash_ = other.thirdPreviousHash_;
      decodedDifficulty_ = other.decodedDifficulty_;
      winningNonce_ = other.winningNonce_;
      numRegularTransactions_ = other.numRegularTransactions_;
      numPopTransactions_ = other.numPopTransactions_;
      totalFees_ = other.totalFees_;
      powCoinbaseReward_ = other.powCoinbaseReward_;
      popCoinbaseReward_ = other.popCoinbaseReward_;
      size_ = other.size_;
      ledgerHash_ = other.ledgerHash_;
      minerComment_ = other.minerComment_;
      version_ = other.version_;
      merkleRoot_ = other.merkleRoot_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockSummary Clone() {
      return new BlockSummary(this);
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 1;
    private int number_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private int timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 3;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "previous_hash" field.</summary>
    public const int PreviousHashFieldNumber = 4;
    private pb::ByteString previousHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PreviousHash {
      get { return previousHash_; }
      set {
        previousHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "second_previous_hash" field.</summary>
    public const int SecondPreviousHashFieldNumber = 5;
    private pb::ByteString secondPreviousHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SecondPreviousHash {
      get { return secondPreviousHash_; }
      set {
        secondPreviousHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "third_previous_hash" field.</summary>
    public const int ThirdPreviousHashFieldNumber = 6;
    private pb::ByteString thirdPreviousHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ThirdPreviousHash {
      get { return thirdPreviousHash_; }
      set {
        thirdPreviousHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "decoded_difficulty" field.</summary>
    public const int DecodedDifficultyFieldNumber = 7;
    private ulong decodedDifficulty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DecodedDifficulty {
      get { return decodedDifficulty_; }
      set {
        decodedDifficulty_ = value;
      }
    }

    /// <summary>Field number for the "winning_nonce" field.</summary>
    public const int WinningNonceFieldNumber = 8;
    private int winningNonce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinningNonce {
      get { return winningNonce_; }
      set {
        winningNonce_ = value;
      }
    }

    /// <summary>Field number for the "num_regular_transactions" field.</summary>
    public const int NumRegularTransactionsFieldNumber = 9;
    private int numRegularTransactions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumRegularTransactions {
      get { return numRegularTransactions_; }
      set {
        numRegularTransactions_ = value;
      }
    }

    /// <summary>Field number for the "num_pop_transactions" field.</summary>
    public const int NumPopTransactionsFieldNumber = 10;
    private int numPopTransactions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumPopTransactions {
      get { return numPopTransactions_; }
      set {
        numPopTransactions_ = value;
      }
    }

    /// <summary>Field number for the "total_fees" field.</summary>
    public const int TotalFeesFieldNumber = 11;
    private long totalFees_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalFees {
      get { return totalFees_; }
      set {
        totalFees_ = value;
      }
    }

    /// <summary>Field number for the "pow_coinbase_reward" field.</summary>
    public const int PowCoinbaseRewardFieldNumber = 12;
    private long powCoinbaseReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PowCoinbaseReward {
      get { return powCoinbaseReward_; }
      set {
        powCoinbaseReward_ = value;
      }
    }

    /// <summary>Field number for the "pop_coinbase_reward" field.</summary>
    public const int PopCoinbaseRewardFieldNumber = 13;
    private long popCoinbaseReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PopCoinbaseReward {
      get { return popCoinbaseReward_; }
      set {
        popCoinbaseReward_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 14;
    private int size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "ledger_hash" field.</summary>
    public const int LedgerHashFieldNumber = 15;
    private pb::ByteString ledgerHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LedgerHash {
      get { return ledgerHash_; }
      set {
        ledgerHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "miner_comment" field.</summary>
    public const int MinerCommentFieldNumber = 16;
    private pb::ByteString minerComment_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MinerComment {
      get { return minerComment_; }
      set {
        minerComment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 17;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "merkle_root" field.</summary>
    public const int MerkleRootFieldNumber = 18;
    private pb::ByteString merkleRoot_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MerkleRoot {
      get { return merkleRoot_; }
      set {
        merkleRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Number != other.Number) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Hash != other.Hash) return false;
      if (PreviousHash != other.PreviousHash) return false;
      if (SecondPreviousHash != other.SecondPreviousHash) return false;
      if (ThirdPreviousHash != other.ThirdPreviousHash) return false;
      if (DecodedDifficulty != other.DecodedDifficulty) return false;
      if (WinningNonce != other.WinningNonce) return false;
      if (NumRegularTransactions != other.NumRegularTransactions) return false;
      if (NumPopTransactions != other.NumPopTransactions) return false;
      if (TotalFees != other.TotalFees) return false;
      if (PowCoinbaseReward != other.PowCoinbaseReward) return false;
      if (PopCoinbaseReward != other.PopCoinbaseReward) return false;
      if (Size != other.Size) return false;
      if (LedgerHash != other.LedgerHash) return false;
      if (MinerComment != other.MinerComment) return false;
      if (Version != other.Version) return false;
      if (MerkleRoot != other.MerkleRoot) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Number != 0) hash ^= Number.GetHashCode();
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (PreviousHash.Length != 0) hash ^= PreviousHash.GetHashCode();
      if (SecondPreviousHash.Length != 0) hash ^= SecondPreviousHash.GetHashCode();
      if (ThirdPreviousHash.Length != 0) hash ^= ThirdPreviousHash.GetHashCode();
      if (DecodedDifficulty != 0UL) hash ^= DecodedDifficulty.GetHashCode();
      if (WinningNonce != 0) hash ^= WinningNonce.GetHashCode();
      if (NumRegularTransactions != 0) hash ^= NumRegularTransactions.GetHashCode();
      if (NumPopTransactions != 0) hash ^= NumPopTransactions.GetHashCode();
      if (TotalFees != 0L) hash ^= TotalFees.GetHashCode();
      if (PowCoinbaseReward != 0L) hash ^= PowCoinbaseReward.GetHashCode();
      if (PopCoinbaseReward != 0L) hash ^= PopCoinbaseReward.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (LedgerHash.Length != 0) hash ^= LedgerHash.GetHashCode();
      if (MinerComment.Length != 0) hash ^= MinerComment.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (MerkleRoot.Length != 0) hash ^= MerkleRoot.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Number != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Number);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Timestamp);
      }
      if (Hash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Hash);
      }
      if (PreviousHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(PreviousHash);
      }
      if (SecondPreviousHash.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(SecondPreviousHash);
      }
      if (ThirdPreviousHash.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(ThirdPreviousHash);
      }
      if (DecodedDifficulty != 0UL) {
        output.WriteRawTag(57);
        output.WriteFixed64(DecodedDifficulty);
      }
      if (WinningNonce != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(WinningNonce);
      }
      if (NumRegularTransactions != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(NumRegularTransactions);
      }
      if (NumPopTransactions != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(NumPopTransactions);
      }
      if (TotalFees != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(TotalFees);
      }
      if (PowCoinbaseReward != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(PowCoinbaseReward);
      }
      if (PopCoinbaseReward != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(PopCoinbaseReward);
      }
      if (Size != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Size);
      }
      if (LedgerHash.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(LedgerHash);
      }
      if (MinerComment.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteBytes(MinerComment);
      }
      if (Version != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Version);
      }
      if (MerkleRoot.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteBytes(MerkleRoot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      if (PreviousHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PreviousHash);
      }
      if (SecondPreviousHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SecondPreviousHash);
      }
      if (ThirdPreviousHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ThirdPreviousHash);
      }
      if (DecodedDifficulty != 0UL) {
        size += 1 + 8;
      }
      if (WinningNonce != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(WinningNonce);
      }
      if (NumRegularTransactions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumRegularTransactions);
      }
      if (NumPopTransactions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumPopTransactions);
      }
      if (TotalFees != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalFees);
      }
      if (PowCoinbaseReward != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PowCoinbaseReward);
      }
      if (PopCoinbaseReward != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PopCoinbaseReward);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      if (LedgerHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LedgerHash);
      }
      if (MinerComment.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(MinerComment);
      }
      if (Version != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (MerkleRoot.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(MerkleRoot);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockSummary other) {
      if (other == null) {
        return;
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.PreviousHash.Length != 0) {
        PreviousHash = other.PreviousHash;
      }
      if (other.SecondPreviousHash.Length != 0) {
        SecondPreviousHash = other.SecondPreviousHash;
      }
      if (other.ThirdPreviousHash.Length != 0) {
        ThirdPreviousHash = other.ThirdPreviousHash;
      }
      if (other.DecodedDifficulty != 0UL) {
        DecodedDifficulty = other.DecodedDifficulty;
      }
      if (other.WinningNonce != 0) {
        WinningNonce = other.WinningNonce;
      }
      if (other.NumRegularTransactions != 0) {
        NumRegularTransactions = other.NumRegularTransactions;
      }
      if (other.NumPopTransactions != 0) {
        NumPopTransactions = other.NumPopTransactions;
      }
      if (other.TotalFees != 0L) {
        TotalFees = other.TotalFees;
      }
      if (other.PowCoinbaseReward != 0L) {
        PowCoinbaseReward = other.PowCoinbaseReward;
      }
      if (other.PopCoinbaseReward != 0L) {
        PopCoinbaseReward = other.PopCoinbaseReward;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.LedgerHash.Length != 0) {
        LedgerHash = other.LedgerHash;
      }
      if (other.MinerComment.Length != 0) {
        MinerComment = other.MinerComment;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.MerkleRoot.Length != 0) {
        MerkleRoot = other.MerkleRoot;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Number = input.ReadInt32();
            break;
          }
          case 16: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 26: {
            Hash = input.ReadBytes();
            break;
          }
          case 34: {
            PreviousHash = input.ReadBytes();
            break;
          }
          case 42: {
            SecondPreviousHash = input.ReadBytes();
            break;
          }
          case 50: {
            ThirdPreviousHash = input.ReadBytes();
            break;
          }
          case 57: {
            DecodedDifficulty = input.ReadFixed64();
            break;
          }
          case 64: {
            WinningNonce = input.ReadSInt32();
            break;
          }
          case 72: {
            NumRegularTransactions = input.ReadInt32();
            break;
          }
          case 80: {
            NumPopTransactions = input.ReadInt32();
            break;
          }
          case 88: {
            TotalFees = input.ReadInt64();
            break;
          }
          case 96: {
            PowCoinbaseReward = input.ReadInt64();
            break;
          }
          case 104: {
            PopCoinbaseReward = input.ReadInt64();
            break;
          }
          case 112: {
            Size = input.ReadInt32();
            break;
          }
          case 122: {
            LedgerHash = input.ReadBytes();
            break;
          }
          case 130: {
            MinerComment = input.ReadBytes();
            break;
          }
          case 136: {
            Version = input.ReadInt32();
            break;
          }
          case 146: {
            MerkleRoot = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LightBlockSummary : pb::IMessage<LightBlockSummary> {
    private static readonly pb::MessageParser<LightBlockSummary> _parser = new pb::MessageParser<LightBlockSummary>(() => new LightBlockSummary());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LightBlockSummary> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightBlockSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightBlockSummary(LightBlockSummary other) : this() {
      number_ = other.number_;
      timestamp_ = other.timestamp_;
      hash_ = other.hash_;
      previousHash_ = other.previousHash_;
      secondPreviousHash_ = other.secondPreviousHash_;
      thirdPreviousHash_ = other.thirdPreviousHash_;
      decodedDifficulty_ = other.decodedDifficulty_;
      winningNonce_ = other.winningNonce_;
      numKnownRegularTransactions_ = other.numKnownRegularTransactions_;
      numPopTransactions_ = other.numPopTransactions_;
      powCoinbaseReward_ = other.powCoinbaseReward_;
      popCoinbaseReward_ = other.popCoinbaseReward_;
      ledgerHash_ = other.ledgerHash_;
      minerComment_ = other.minerComment_;
      normalTransactionMerkleRoot_ = other.normalTransactionMerkleRoot_;
      version_ = other.version_;
      merkleRoot_ = other.merkleRoot_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightBlockSummary Clone() {
      return new LightBlockSummary(this);
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 1;
    private int number_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private int timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 3;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "previous_hash" field.</summary>
    public const int PreviousHashFieldNumber = 4;
    private pb::ByteString previousHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PreviousHash {
      get { return previousHash_; }
      set {
        previousHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "second_previous_hash" field.</summary>
    public const int SecondPreviousHashFieldNumber = 5;
    private pb::ByteString secondPreviousHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SecondPreviousHash {
      get { return secondPreviousHash_; }
      set {
        secondPreviousHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "third_previous_hash" field.</summary>
    public const int ThirdPreviousHashFieldNumber = 6;
    private pb::ByteString thirdPreviousHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ThirdPreviousHash {
      get { return thirdPreviousHash_; }
      set {
        thirdPreviousHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "decoded_difficulty" field.</summary>
    public const int DecodedDifficultyFieldNumber = 7;
    private ulong decodedDifficulty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DecodedDifficulty {
      get { return decodedDifficulty_; }
      set {
        decodedDifficulty_ = value;
      }
    }

    /// <summary>Field number for the "winning_nonce" field.</summary>
    public const int WinningNonceFieldNumber = 8;
    private int winningNonce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinningNonce {
      get { return winningNonce_; }
      set {
        winningNonce_ = value;
      }
    }

    /// <summary>Field number for the "num_known_regular_transactions" field.</summary>
    public const int NumKnownRegularTransactionsFieldNumber = 9;
    private int numKnownRegularTransactions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumKnownRegularTransactions {
      get { return numKnownRegularTransactions_; }
      set {
        numKnownRegularTransactions_ = value;
      }
    }

    /// <summary>Field number for the "num_pop_transactions" field.</summary>
    public const int NumPopTransactionsFieldNumber = 10;
    private int numPopTransactions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumPopTransactions {
      get { return numPopTransactions_; }
      set {
        numPopTransactions_ = value;
      }
    }

    /// <summary>Field number for the "pow_coinbase_reward" field.</summary>
    public const int PowCoinbaseRewardFieldNumber = 11;
    private long powCoinbaseReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PowCoinbaseReward {
      get { return powCoinbaseReward_; }
      set {
        powCoinbaseReward_ = value;
      }
    }

    /// <summary>Field number for the "pop_coinbase_reward" field.</summary>
    public const int PopCoinbaseRewardFieldNumber = 12;
    private long popCoinbaseReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PopCoinbaseReward {
      get { return popCoinbaseReward_; }
      set {
        popCoinbaseReward_ = value;
      }
    }

    /// <summary>Field number for the "ledger_hash" field.</summary>
    public const int LedgerHashFieldNumber = 13;
    private pb::ByteString ledgerHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LedgerHash {
      get { return ledgerHash_; }
      set {
        ledgerHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "miner_comment" field.</summary>
    public const int MinerCommentFieldNumber = 14;
    private pb::ByteString minerComment_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MinerComment {
      get { return minerComment_; }
      set {
        minerComment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "normal_transaction_merkle_root" field.</summary>
    public const int NormalTransactionMerkleRootFieldNumber = 15;
    private pb::ByteString normalTransactionMerkleRoot_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NormalTransactionMerkleRoot {
      get { return normalTransactionMerkleRoot_; }
      set {
        normalTransactionMerkleRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 16;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "merkle_root" field.</summary>
    public const int MerkleRootFieldNumber = 17;
    private pb::ByteString merkleRoot_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MerkleRoot {
      get { return merkleRoot_; }
      set {
        merkleRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LightBlockSummary);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LightBlockSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Number != other.Number) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Hash != other.Hash) return false;
      if (PreviousHash != other.PreviousHash) return false;
      if (SecondPreviousHash != other.SecondPreviousHash) return false;
      if (ThirdPreviousHash != other.ThirdPreviousHash) return false;
      if (DecodedDifficulty != other.DecodedDifficulty) return false;
      if (WinningNonce != other.WinningNonce) return false;
      if (NumKnownRegularTransactions != other.NumKnownRegularTransactions) return false;
      if (NumPopTransactions != other.NumPopTransactions) return false;
      if (PowCoinbaseReward != other.PowCoinbaseReward) return false;
      if (PopCoinbaseReward != other.PopCoinbaseReward) return false;
      if (LedgerHash != other.LedgerHash) return false;
      if (MinerComment != other.MinerComment) return false;
      if (NormalTransactionMerkleRoot != other.NormalTransactionMerkleRoot) return false;
      if (Version != other.Version) return false;
      if (MerkleRoot != other.MerkleRoot) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Number != 0) hash ^= Number.GetHashCode();
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (PreviousHash.Length != 0) hash ^= PreviousHash.GetHashCode();
      if (SecondPreviousHash.Length != 0) hash ^= SecondPreviousHash.GetHashCode();
      if (ThirdPreviousHash.Length != 0) hash ^= ThirdPreviousHash.GetHashCode();
      if (DecodedDifficulty != 0UL) hash ^= DecodedDifficulty.GetHashCode();
      if (WinningNonce != 0) hash ^= WinningNonce.GetHashCode();
      if (NumKnownRegularTransactions != 0) hash ^= NumKnownRegularTransactions.GetHashCode();
      if (NumPopTransactions != 0) hash ^= NumPopTransactions.GetHashCode();
      if (PowCoinbaseReward != 0L) hash ^= PowCoinbaseReward.GetHashCode();
      if (PopCoinbaseReward != 0L) hash ^= PopCoinbaseReward.GetHashCode();
      if (LedgerHash.Length != 0) hash ^= LedgerHash.GetHashCode();
      if (MinerComment.Length != 0) hash ^= MinerComment.GetHashCode();
      if (NormalTransactionMerkleRoot.Length != 0) hash ^= NormalTransactionMerkleRoot.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (MerkleRoot.Length != 0) hash ^= MerkleRoot.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Number != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Number);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Timestamp);
      }
      if (Hash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Hash);
      }
      if (PreviousHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(PreviousHash);
      }
      if (SecondPreviousHash.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(SecondPreviousHash);
      }
      if (ThirdPreviousHash.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(ThirdPreviousHash);
      }
      if (DecodedDifficulty != 0UL) {
        output.WriteRawTag(57);
        output.WriteFixed64(DecodedDifficulty);
      }
      if (WinningNonce != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(WinningNonce);
      }
      if (NumKnownRegularTransactions != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(NumKnownRegularTransactions);
      }
      if (NumPopTransactions != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(NumPopTransactions);
      }
      if (PowCoinbaseReward != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(PowCoinbaseReward);
      }
      if (PopCoinbaseReward != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(PopCoinbaseReward);
      }
      if (LedgerHash.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(LedgerHash);
      }
      if (MinerComment.Length != 0) {
        output.WriteRawTag(114);
        output.WriteBytes(MinerComment);
      }
      if (NormalTransactionMerkleRoot.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(NormalTransactionMerkleRoot);
      }
      if (Version != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Version);
      }
      if (MerkleRoot.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteBytes(MerkleRoot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      if (PreviousHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PreviousHash);
      }
      if (SecondPreviousHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SecondPreviousHash);
      }
      if (ThirdPreviousHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ThirdPreviousHash);
      }
      if (DecodedDifficulty != 0UL) {
        size += 1 + 8;
      }
      if (WinningNonce != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(WinningNonce);
      }
      if (NumKnownRegularTransactions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumKnownRegularTransactions);
      }
      if (NumPopTransactions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumPopTransactions);
      }
      if (PowCoinbaseReward != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PowCoinbaseReward);
      }
      if (PopCoinbaseReward != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PopCoinbaseReward);
      }
      if (LedgerHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LedgerHash);
      }
      if (MinerComment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MinerComment);
      }
      if (NormalTransactionMerkleRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NormalTransactionMerkleRoot);
      }
      if (Version != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (MerkleRoot.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(MerkleRoot);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LightBlockSummary other) {
      if (other == null) {
        return;
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.PreviousHash.Length != 0) {
        PreviousHash = other.PreviousHash;
      }
      if (other.SecondPreviousHash.Length != 0) {
        SecondPreviousHash = other.SecondPreviousHash;
      }
      if (other.ThirdPreviousHash.Length != 0) {
        ThirdPreviousHash = other.ThirdPreviousHash;
      }
      if (other.DecodedDifficulty != 0UL) {
        DecodedDifficulty = other.DecodedDifficulty;
      }
      if (other.WinningNonce != 0) {
        WinningNonce = other.WinningNonce;
      }
      if (other.NumKnownRegularTransactions != 0) {
        NumKnownRegularTransactions = other.NumKnownRegularTransactions;
      }
      if (other.NumPopTransactions != 0) {
        NumPopTransactions = other.NumPopTransactions;
      }
      if (other.PowCoinbaseReward != 0L) {
        PowCoinbaseReward = other.PowCoinbaseReward;
      }
      if (other.PopCoinbaseReward != 0L) {
        PopCoinbaseReward = other.PopCoinbaseReward;
      }
      if (other.LedgerHash.Length != 0) {
        LedgerHash = other.LedgerHash;
      }
      if (other.MinerComment.Length != 0) {
        MinerComment = other.MinerComment;
      }
      if (other.NormalTransactionMerkleRoot.Length != 0) {
        NormalTransactionMerkleRoot = other.NormalTransactionMerkleRoot;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.MerkleRoot.Length != 0) {
        MerkleRoot = other.MerkleRoot;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Number = input.ReadInt32();
            break;
          }
          case 16: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 26: {
            Hash = input.ReadBytes();
            break;
          }
          case 34: {
            PreviousHash = input.ReadBytes();
            break;
          }
          case 42: {
            SecondPreviousHash = input.ReadBytes();
            break;
          }
          case 50: {
            ThirdPreviousHash = input.ReadBytes();
            break;
          }
          case 57: {
            DecodedDifficulty = input.ReadFixed64();
            break;
          }
          case 64: {
            WinningNonce = input.ReadSInt32();
            break;
          }
          case 72: {
            NumKnownRegularTransactions = input.ReadInt32();
            break;
          }
          case 80: {
            NumPopTransactions = input.ReadInt32();
            break;
          }
          case 88: {
            PowCoinbaseReward = input.ReadInt64();
            break;
          }
          case 96: {
            PopCoinbaseReward = input.ReadInt64();
            break;
          }
          case 106: {
            LedgerHash = input.ReadBytes();
            break;
          }
          case 114: {
            MinerComment = input.ReadBytes();
            break;
          }
          case 122: {
            NormalTransactionMerkleRoot = input.ReadBytes();
            break;
          }
          case 128: {
            Version = input.ReadInt32();
            break;
          }
          case 138: {
            MerkleRoot = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Block : pb::IMessage<Block> {
    private static readonly pb::MessageParser<Block> _parser = new pb::MessageParser<Block>(() => new Block());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Block> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block(Block other) : this() {
      number_ = other.number_;
      timestamp_ = other.timestamp_;
      hash_ = other.hash_;
      previousHash_ = other.previousHash_;
      secondPreviousHash_ = other.secondPreviousHash_;
      thirdPreviousHash_ = other.thirdPreviousHash_;
      encodedDifficulty_ = other.encodedDifficulty_;
      winningNonce_ = other.winningNonce_;
      regularTransactions_ = other.regularTransactions_.Clone();
      popTransactions_ = other.popTransactions_.Clone();
      totalFees_ = other.totalFees_;
      powCoinbaseReward_ = other.powCoinbaseReward_;
      popCoinbaseReward_ = other.popCoinbaseReward_;
      bitcoinBlockHeaders_ = other.bitcoinBlockHeaders_.Clone();
      BlockContentMetapackage = other.blockContentMetapackage_ != null ? other.BlockContentMetapackage.Clone() : null;
      size_ = other.size_;
      version_ = other.version_;
      merkleRoot_ = other.merkleRoot_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Block Clone() {
      return new Block(this);
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 1;
    private int number_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private int timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 3;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "previous_hash" field.</summary>
    public const int PreviousHashFieldNumber = 4;
    private pb::ByteString previousHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PreviousHash {
      get { return previousHash_; }
      set {
        previousHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "second_previous_hash" field.</summary>
    public const int SecondPreviousHashFieldNumber = 5;
    private pb::ByteString secondPreviousHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SecondPreviousHash {
      get { return secondPreviousHash_; }
      set {
        secondPreviousHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "third_previous_hash" field.</summary>
    public const int ThirdPreviousHashFieldNumber = 6;
    private pb::ByteString thirdPreviousHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ThirdPreviousHash {
      get { return thirdPreviousHash_; }
      set {
        thirdPreviousHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encoded_difficulty" field.</summary>
    public const int EncodedDifficultyFieldNumber = 7;
    private int encodedDifficulty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EncodedDifficulty {
      get { return encodedDifficulty_; }
      set {
        encodedDifficulty_ = value;
      }
    }

    /// <summary>Field number for the "winning_nonce" field.</summary>
    public const int WinningNonceFieldNumber = 8;
    private int winningNonce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinningNonce {
      get { return winningNonce_; }
      set {
        winningNonce_ = value;
      }
    }

    /// <summary>Field number for the "regular_transactions" field.</summary>
    public const int RegularTransactionsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Core.TransactionUnion> _repeated_regularTransactions_codec
        = pb::FieldCodec.ForMessage(74, global::Core.TransactionUnion.Parser);
    private readonly pbc::RepeatedField<global::Core.TransactionUnion> regularTransactions_ = new pbc::RepeatedField<global::Core.TransactionUnion>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.TransactionUnion> RegularTransactions {
      get { return regularTransactions_; }
    }

    /// <summary>Field number for the "pop_transactions" field.</summary>
    public const int PopTransactionsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Core.TransactionUnion> _repeated_popTransactions_codec
        = pb::FieldCodec.ForMessage(82, global::Core.TransactionUnion.Parser);
    private readonly pbc::RepeatedField<global::Core.TransactionUnion> popTransactions_ = new pbc::RepeatedField<global::Core.TransactionUnion>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.TransactionUnion> PopTransactions {
      get { return popTransactions_; }
    }

    /// <summary>Field number for the "total_fees" field.</summary>
    public const int TotalFeesFieldNumber = 11;
    private long totalFees_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalFees {
      get { return totalFees_; }
      set {
        totalFees_ = value;
      }
    }

    /// <summary>Field number for the "pow_coinbase_reward" field.</summary>
    public const int PowCoinbaseRewardFieldNumber = 12;
    private long powCoinbaseReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PowCoinbaseReward {
      get { return powCoinbaseReward_; }
      set {
        powCoinbaseReward_ = value;
      }
    }

    /// <summary>Field number for the "pop_coinbase_reward" field.</summary>
    public const int PopCoinbaseRewardFieldNumber = 13;
    private long popCoinbaseReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PopCoinbaseReward {
      get { return popCoinbaseReward_; }
      set {
        popCoinbaseReward_ = value;
      }
    }

    /// <summary>Field number for the "bitcoin_block_headers" field.</summary>
    public const int BitcoinBlockHeadersFieldNumber = 14;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_bitcoinBlockHeaders_codec
        = pb::FieldCodec.ForBytes(114);
    private readonly pbc::RepeatedField<pb::ByteString> bitcoinBlockHeaders_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> BitcoinBlockHeaders {
      get { return bitcoinBlockHeaders_; }
    }

    /// <summary>Field number for the "block_content_metapackage" field.</summary>
    public const int BlockContentMetapackageFieldNumber = 15;
    private global::Core.BlockContentMetapackage blockContentMetapackage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.BlockContentMetapackage BlockContentMetapackage {
      get { return blockContentMetapackage_; }
      set {
        blockContentMetapackage_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 16;
    private int size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 17;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "merkle_root" field.</summary>
    public const int MerkleRootFieldNumber = 18;
    private pb::ByteString merkleRoot_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MerkleRoot {
      get { return merkleRoot_; }
      set {
        merkleRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Block);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Block other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Number != other.Number) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Hash != other.Hash) return false;
      if (PreviousHash != other.PreviousHash) return false;
      if (SecondPreviousHash != other.SecondPreviousHash) return false;
      if (ThirdPreviousHash != other.ThirdPreviousHash) return false;
      if (EncodedDifficulty != other.EncodedDifficulty) return false;
      if (WinningNonce != other.WinningNonce) return false;
      if(!regularTransactions_.Equals(other.regularTransactions_)) return false;
      if(!popTransactions_.Equals(other.popTransactions_)) return false;
      if (TotalFees != other.TotalFees) return false;
      if (PowCoinbaseReward != other.PowCoinbaseReward) return false;
      if (PopCoinbaseReward != other.PopCoinbaseReward) return false;
      if(!bitcoinBlockHeaders_.Equals(other.bitcoinBlockHeaders_)) return false;
      if (!object.Equals(BlockContentMetapackage, other.BlockContentMetapackage)) return false;
      if (Size != other.Size) return false;
      if (Version != other.Version) return false;
      if (MerkleRoot != other.MerkleRoot) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Number != 0) hash ^= Number.GetHashCode();
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (PreviousHash.Length != 0) hash ^= PreviousHash.GetHashCode();
      if (SecondPreviousHash.Length != 0) hash ^= SecondPreviousHash.GetHashCode();
      if (ThirdPreviousHash.Length != 0) hash ^= ThirdPreviousHash.GetHashCode();
      if (EncodedDifficulty != 0) hash ^= EncodedDifficulty.GetHashCode();
      if (WinningNonce != 0) hash ^= WinningNonce.GetHashCode();
      hash ^= regularTransactions_.GetHashCode();
      hash ^= popTransactions_.GetHashCode();
      if (TotalFees != 0L) hash ^= TotalFees.GetHashCode();
      if (PowCoinbaseReward != 0L) hash ^= PowCoinbaseReward.GetHashCode();
      if (PopCoinbaseReward != 0L) hash ^= PopCoinbaseReward.GetHashCode();
      hash ^= bitcoinBlockHeaders_.GetHashCode();
      if (blockContentMetapackage_ != null) hash ^= BlockContentMetapackage.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (MerkleRoot.Length != 0) hash ^= MerkleRoot.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Number != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Number);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Timestamp);
      }
      if (Hash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Hash);
      }
      if (PreviousHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(PreviousHash);
      }
      if (SecondPreviousHash.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(SecondPreviousHash);
      }
      if (ThirdPreviousHash.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(ThirdPreviousHash);
      }
      if (EncodedDifficulty != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(EncodedDifficulty);
      }
      if (WinningNonce != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(WinningNonce);
      }
      regularTransactions_.WriteTo(output, _repeated_regularTransactions_codec);
      popTransactions_.WriteTo(output, _repeated_popTransactions_codec);
      if (TotalFees != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(TotalFees);
      }
      if (PowCoinbaseReward != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(PowCoinbaseReward);
      }
      if (PopCoinbaseReward != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(PopCoinbaseReward);
      }
      bitcoinBlockHeaders_.WriteTo(output, _repeated_bitcoinBlockHeaders_codec);
      if (blockContentMetapackage_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(BlockContentMetapackage);
      }
      if (Size != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Size);
      }
      if (Version != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(Version);
      }
      if (MerkleRoot.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteBytes(MerkleRoot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      if (PreviousHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PreviousHash);
      }
      if (SecondPreviousHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SecondPreviousHash);
      }
      if (ThirdPreviousHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ThirdPreviousHash);
      }
      if (EncodedDifficulty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EncodedDifficulty);
      }
      if (WinningNonce != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(WinningNonce);
      }
      size += regularTransactions_.CalculateSize(_repeated_regularTransactions_codec);
      size += popTransactions_.CalculateSize(_repeated_popTransactions_codec);
      if (TotalFees != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalFees);
      }
      if (PowCoinbaseReward != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PowCoinbaseReward);
      }
      if (PopCoinbaseReward != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PopCoinbaseReward);
      }
      size += bitcoinBlockHeaders_.CalculateSize(_repeated_bitcoinBlockHeaders_codec);
      if (blockContentMetapackage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockContentMetapackage);
      }
      if (Size != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      if (Version != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (MerkleRoot.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(MerkleRoot);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Block other) {
      if (other == null) {
        return;
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.PreviousHash.Length != 0) {
        PreviousHash = other.PreviousHash;
      }
      if (other.SecondPreviousHash.Length != 0) {
        SecondPreviousHash = other.SecondPreviousHash;
      }
      if (other.ThirdPreviousHash.Length != 0) {
        ThirdPreviousHash = other.ThirdPreviousHash;
      }
      if (other.EncodedDifficulty != 0) {
        EncodedDifficulty = other.EncodedDifficulty;
      }
      if (other.WinningNonce != 0) {
        WinningNonce = other.WinningNonce;
      }
      regularTransactions_.Add(other.regularTransactions_);
      popTransactions_.Add(other.popTransactions_);
      if (other.TotalFees != 0L) {
        TotalFees = other.TotalFees;
      }
      if (other.PowCoinbaseReward != 0L) {
        PowCoinbaseReward = other.PowCoinbaseReward;
      }
      if (other.PopCoinbaseReward != 0L) {
        PopCoinbaseReward = other.PopCoinbaseReward;
      }
      bitcoinBlockHeaders_.Add(other.bitcoinBlockHeaders_);
      if (other.blockContentMetapackage_ != null) {
        if (blockContentMetapackage_ == null) {
          blockContentMetapackage_ = new global::Core.BlockContentMetapackage();
        }
        BlockContentMetapackage.MergeFrom(other.BlockContentMetapackage);
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.MerkleRoot.Length != 0) {
        MerkleRoot = other.MerkleRoot;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Number = input.ReadInt32();
            break;
          }
          case 16: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 26: {
            Hash = input.ReadBytes();
            break;
          }
          case 34: {
            PreviousHash = input.ReadBytes();
            break;
          }
          case 42: {
            SecondPreviousHash = input.ReadBytes();
            break;
          }
          case 50: {
            ThirdPreviousHash = input.ReadBytes();
            break;
          }
          case 56: {
            EncodedDifficulty = input.ReadInt32();
            break;
          }
          case 64: {
            WinningNonce = input.ReadSInt32();
            break;
          }
          case 74: {
            regularTransactions_.AddEntriesFrom(input, _repeated_regularTransactions_codec);
            break;
          }
          case 82: {
            popTransactions_.AddEntriesFrom(input, _repeated_popTransactions_codec);
            break;
          }
          case 88: {
            TotalFees = input.ReadInt64();
            break;
          }
          case 96: {
            PowCoinbaseReward = input.ReadInt64();
            break;
          }
          case 104: {
            PopCoinbaseReward = input.ReadInt64();
            break;
          }
          case 114: {
            bitcoinBlockHeaders_.AddEntriesFrom(input, _repeated_bitcoinBlockHeaders_codec);
            break;
          }
          case 122: {
            if (blockContentMetapackage_ == null) {
              blockContentMetapackage_ = new global::Core.BlockContentMetapackage();
            }
            input.ReadMessage(blockContentMetapackage_);
            break;
          }
          case 128: {
            Size = input.ReadInt32();
            break;
          }
          case 136: {
            Version = input.ReadInt32();
            break;
          }
          case 146: {
            MerkleRoot = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockHeader : pb::IMessage<BlockHeader> {
    private static readonly pb::MessageParser<BlockHeader> _parser = new pb::MessageParser<BlockHeader>(() => new BlockHeader());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockHeader(BlockHeader other) : this() {
      header_ = other.header_;
      hash_ = other.hash_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockHeader Clone() {
      return new BlockHeader(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private pb::ByteString header_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Header {
      get { return header_; }
      set {
        header_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 2;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Header != other.Header) return false;
      if (Hash != other.Hash) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Header.Length != 0) hash ^= Header.GetHashCode();
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Header.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Header);
      }
      if (Hash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Hash);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Header.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Header);
      }
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockHeader other) {
      if (other == null) {
        return;
      }
      if (other.Header.Length != 0) {
        Header = other.Header;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Header = input.ReadBytes();
            break;
          }
          case 18: {
            Hash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FilteredBlock : pb::IMessage<FilteredBlock> {
    private static readonly pb::MessageParser<FilteredBlock> _parser = new pb::MessageParser<FilteredBlock>(() => new FilteredBlock());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FilteredBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilteredBlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilteredBlock(FilteredBlock other) : this() {
      number_ = other.number_;
      version_ = other.version_;
      previousHash_ = other.previousHash_;
      secondPreviousHash_ = other.secondPreviousHash_;
      thirdPreviousHash_ = other.thirdPreviousHash_;
      merkleRoot_ = other.merkleRoot_;
      timestamp_ = other.timestamp_;
      difficulty_ = other.difficulty_;
      nonce_ = other.nonce_;
      totalRegularTransactions_ = other.totalRegularTransactions_;
      totalPopTransactions_ = other.totalPopTransactions_;
      merkleHashes_ = other.merkleHashes_.Clone();
      merkleFlags_ = other.merkleFlags_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FilteredBlock Clone() {
      return new FilteredBlock(this);
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 1;
    private int number_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "previous_hash" field.</summary>
    public const int PreviousHashFieldNumber = 3;
    private pb::ByteString previousHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PreviousHash {
      get { return previousHash_; }
      set {
        previousHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "second_previous_hash" field.</summary>
    public const int SecondPreviousHashFieldNumber = 4;
    private pb::ByteString secondPreviousHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SecondPreviousHash {
      get { return secondPreviousHash_; }
      set {
        secondPreviousHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "third_previous_hash" field.</summary>
    public const int ThirdPreviousHashFieldNumber = 5;
    private pb::ByteString thirdPreviousHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ThirdPreviousHash {
      get { return thirdPreviousHash_; }
      set {
        thirdPreviousHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "merkle_root" field.</summary>
    public const int MerkleRootFieldNumber = 6;
    private pb::ByteString merkleRoot_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MerkleRoot {
      get { return merkleRoot_; }
      set {
        merkleRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 7;
    private int timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "difficulty" field.</summary>
    public const int DifficultyFieldNumber = 8;
    private int difficulty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Difficulty {
      get { return difficulty_; }
      set {
        difficulty_ = value;
      }
    }

    /// <summary>Field number for the "nonce" field.</summary>
    public const int NonceFieldNumber = 9;
    private int nonce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Nonce {
      get { return nonce_; }
      set {
        nonce_ = value;
      }
    }

    /// <summary>Field number for the "total_regular_transactions" field.</summary>
    public const int TotalRegularTransactionsFieldNumber = 10;
    private int totalRegularTransactions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalRegularTransactions {
      get { return totalRegularTransactions_; }
      set {
        totalRegularTransactions_ = value;
      }
    }

    /// <summary>Field number for the "total_pop_transactions" field.</summary>
    public const int TotalPopTransactionsFieldNumber = 11;
    private int totalPopTransactions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TotalPopTransactions {
      get { return totalPopTransactions_; }
      set {
        totalPopTransactions_ = value;
      }
    }

    /// <summary>Field number for the "merkle_hashes" field.</summary>
    public const int MerkleHashesFieldNumber = 12;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_merkleHashes_codec
        = pb::FieldCodec.ForBytes(98);
    private readonly pbc::RepeatedField<pb::ByteString> merkleHashes_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> MerkleHashes {
      get { return merkleHashes_; }
    }

    /// <summary>Field number for the "merkle_flags" field.</summary>
    public const int MerkleFlagsFieldNumber = 13;
    private pb::ByteString merkleFlags_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MerkleFlags {
      get { return merkleFlags_; }
      set {
        merkleFlags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FilteredBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FilteredBlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Number != other.Number) return false;
      if (Version != other.Version) return false;
      if (PreviousHash != other.PreviousHash) return false;
      if (SecondPreviousHash != other.SecondPreviousHash) return false;
      if (ThirdPreviousHash != other.ThirdPreviousHash) return false;
      if (MerkleRoot != other.MerkleRoot) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Difficulty != other.Difficulty) return false;
      if (Nonce != other.Nonce) return false;
      if (TotalRegularTransactions != other.TotalRegularTransactions) return false;
      if (TotalPopTransactions != other.TotalPopTransactions) return false;
      if(!merkleHashes_.Equals(other.merkleHashes_)) return false;
      if (MerkleFlags != other.MerkleFlags) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Number != 0) hash ^= Number.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (PreviousHash.Length != 0) hash ^= PreviousHash.GetHashCode();
      if (SecondPreviousHash.Length != 0) hash ^= SecondPreviousHash.GetHashCode();
      if (ThirdPreviousHash.Length != 0) hash ^= ThirdPreviousHash.GetHashCode();
      if (MerkleRoot.Length != 0) hash ^= MerkleRoot.GetHashCode();
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (Difficulty != 0) hash ^= Difficulty.GetHashCode();
      if (Nonce != 0) hash ^= Nonce.GetHashCode();
      if (TotalRegularTransactions != 0) hash ^= TotalRegularTransactions.GetHashCode();
      if (TotalPopTransactions != 0) hash ^= TotalPopTransactions.GetHashCode();
      hash ^= merkleHashes_.GetHashCode();
      if (MerkleFlags.Length != 0) hash ^= MerkleFlags.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Number != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Number);
      }
      if (Version != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Version);
      }
      if (PreviousHash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(PreviousHash);
      }
      if (SecondPreviousHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(SecondPreviousHash);
      }
      if (ThirdPreviousHash.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(ThirdPreviousHash);
      }
      if (MerkleRoot.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(MerkleRoot);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Timestamp);
      }
      if (Difficulty != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Difficulty);
      }
      if (Nonce != 0) {
        output.WriteRawTag(72);
        output.WriteSInt32(Nonce);
      }
      if (TotalRegularTransactions != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TotalRegularTransactions);
      }
      if (TotalPopTransactions != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(TotalPopTransactions);
      }
      merkleHashes_.WriteTo(output, _repeated_merkleHashes_codec);
      if (MerkleFlags.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(MerkleFlags);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (PreviousHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PreviousHash);
      }
      if (SecondPreviousHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SecondPreviousHash);
      }
      if (ThirdPreviousHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ThirdPreviousHash);
      }
      if (MerkleRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MerkleRoot);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      if (Difficulty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Difficulty);
      }
      if (Nonce != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Nonce);
      }
      if (TotalRegularTransactions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalRegularTransactions);
      }
      if (TotalPopTransactions != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalPopTransactions);
      }
      size += merkleHashes_.CalculateSize(_repeated_merkleHashes_codec);
      if (MerkleFlags.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MerkleFlags);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FilteredBlock other) {
      if (other == null) {
        return;
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.PreviousHash.Length != 0) {
        PreviousHash = other.PreviousHash;
      }
      if (other.SecondPreviousHash.Length != 0) {
        SecondPreviousHash = other.SecondPreviousHash;
      }
      if (other.ThirdPreviousHash.Length != 0) {
        ThirdPreviousHash = other.ThirdPreviousHash;
      }
      if (other.MerkleRoot.Length != 0) {
        MerkleRoot = other.MerkleRoot;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.Difficulty != 0) {
        Difficulty = other.Difficulty;
      }
      if (other.Nonce != 0) {
        Nonce = other.Nonce;
      }
      if (other.TotalRegularTransactions != 0) {
        TotalRegularTransactions = other.TotalRegularTransactions;
      }
      if (other.TotalPopTransactions != 0) {
        TotalPopTransactions = other.TotalPopTransactions;
      }
      merkleHashes_.Add(other.merkleHashes_);
      if (other.MerkleFlags.Length != 0) {
        MerkleFlags = other.MerkleFlags;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Number = input.ReadInt32();
            break;
          }
          case 16: {
            Version = input.ReadInt32();
            break;
          }
          case 26: {
            PreviousHash = input.ReadBytes();
            break;
          }
          case 34: {
            SecondPreviousHash = input.ReadBytes();
            break;
          }
          case 42: {
            ThirdPreviousHash = input.ReadBytes();
            break;
          }
          case 50: {
            MerkleRoot = input.ReadBytes();
            break;
          }
          case 56: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 64: {
            Difficulty = input.ReadInt32();
            break;
          }
          case 72: {
            Nonce = input.ReadSInt32();
            break;
          }
          case 80: {
            TotalRegularTransactions = input.ReadInt32();
            break;
          }
          case 88: {
            TotalPopTransactions = input.ReadInt32();
            break;
          }
          case 98: {
            merkleHashes_.AddEntriesFrom(input, _repeated_merkleHashes_codec);
            break;
          }
          case 106: {
            MerkleFlags = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LightVBKBlock : pb::IMessage<LightVBKBlock> {
    private static readonly pb::MessageParser<LightVBKBlock> _parser = new pb::MessageParser<LightVBKBlock>(() => new LightVBKBlock());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LightVBKBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightVBKBlock() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightVBKBlock(LightVBKBlock other) : this() {
      number_ = other.number_;
      timestamp_ = other.timestamp_;
      hash_ = other.hash_;
      previousHash_ = other.previousHash_;
      secondPreviousHash_ = other.secondPreviousHash_;
      thirdPreviousHash_ = other.thirdPreviousHash_;
      encodedDifficulty_ = other.encodedDifficulty_;
      winningNonce_ = other.winningNonce_;
      knownRegularTransactions_ = other.knownRegularTransactions_.Clone();
      popTransactions_ = other.popTransactions_.Clone();
      powCoinbaseReward_ = other.powCoinbaseReward_;
      popCoinbaseReward_ = other.popCoinbaseReward_;
      bitcoinBlockHeaders_ = other.bitcoinBlockHeaders_.Clone();
      BlockContentMetapackage = other.blockContentMetapackage_ != null ? other.BlockContentMetapackage.Clone() : null;
      normalTransactionMerkleRoot_ = other.normalTransactionMerkleRoot_;
      version_ = other.version_;
      merkleRoot_ = other.merkleRoot_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LightVBKBlock Clone() {
      return new LightVBKBlock(this);
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 1;
    private int number_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private int timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 3;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "previous_hash" field.</summary>
    public const int PreviousHashFieldNumber = 4;
    private pb::ByteString previousHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PreviousHash {
      get { return previousHash_; }
      set {
        previousHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "second_previous_hash" field.</summary>
    public const int SecondPreviousHashFieldNumber = 5;
    private pb::ByteString secondPreviousHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SecondPreviousHash {
      get { return secondPreviousHash_; }
      set {
        secondPreviousHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "third_previous_hash" field.</summary>
    public const int ThirdPreviousHashFieldNumber = 6;
    private pb::ByteString thirdPreviousHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ThirdPreviousHash {
      get { return thirdPreviousHash_; }
      set {
        thirdPreviousHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encoded_difficulty" field.</summary>
    public const int EncodedDifficultyFieldNumber = 7;
    private int encodedDifficulty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EncodedDifficulty {
      get { return encodedDifficulty_; }
      set {
        encodedDifficulty_ = value;
      }
    }

    /// <summary>Field number for the "winning_nonce" field.</summary>
    public const int WinningNonceFieldNumber = 8;
    private int winningNonce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WinningNonce {
      get { return winningNonce_; }
      set {
        winningNonce_ = value;
      }
    }

    /// <summary>Field number for the "known_regular_transactions" field.</summary>
    public const int KnownRegularTransactionsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Core.VBKTransactionWithContext> _repeated_knownRegularTransactions_codec
        = pb::FieldCodec.ForMessage(74, global::Core.VBKTransactionWithContext.Parser);
    private readonly pbc::RepeatedField<global::Core.VBKTransactionWithContext> knownRegularTransactions_ = new pbc::RepeatedField<global::Core.VBKTransactionWithContext>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.VBKTransactionWithContext> KnownRegularTransactions {
      get { return knownRegularTransactions_; }
    }

    /// <summary>Field number for the "pop_transactions" field.</summary>
    public const int PopTransactionsFieldNumber = 10;
    private static readonly pb::FieldCodec<global::Core.TransactionUnion> _repeated_popTransactions_codec
        = pb::FieldCodec.ForMessage(82, global::Core.TransactionUnion.Parser);
    private readonly pbc::RepeatedField<global::Core.TransactionUnion> popTransactions_ = new pbc::RepeatedField<global::Core.TransactionUnion>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.TransactionUnion> PopTransactions {
      get { return popTransactions_; }
    }

    /// <summary>Field number for the "pow_coinbase_reward" field.</summary>
    public const int PowCoinbaseRewardFieldNumber = 11;
    private long powCoinbaseReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PowCoinbaseReward {
      get { return powCoinbaseReward_; }
      set {
        powCoinbaseReward_ = value;
      }
    }

    /// <summary>Field number for the "pop_coinbase_reward" field.</summary>
    public const int PopCoinbaseRewardFieldNumber = 12;
    private long popCoinbaseReward_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PopCoinbaseReward {
      get { return popCoinbaseReward_; }
      set {
        popCoinbaseReward_ = value;
      }
    }

    /// <summary>Field number for the "bitcoin_block_headers" field.</summary>
    public const int BitcoinBlockHeadersFieldNumber = 13;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_bitcoinBlockHeaders_codec
        = pb::FieldCodec.ForBytes(106);
    private readonly pbc::RepeatedField<pb::ByteString> bitcoinBlockHeaders_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> BitcoinBlockHeaders {
      get { return bitcoinBlockHeaders_; }
    }

    /// <summary>Field number for the "block_content_metapackage" field.</summary>
    public const int BlockContentMetapackageFieldNumber = 14;
    private global::Core.BlockContentMetapackage blockContentMetapackage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.BlockContentMetapackage BlockContentMetapackage {
      get { return blockContentMetapackage_; }
      set {
        blockContentMetapackage_ = value;
      }
    }

    /// <summary>Field number for the "normal_transaction_merkle_root" field.</summary>
    public const int NormalTransactionMerkleRootFieldNumber = 15;
    private pb::ByteString normalTransactionMerkleRoot_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString NormalTransactionMerkleRoot {
      get { return normalTransactionMerkleRoot_; }
      set {
        normalTransactionMerkleRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 16;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "merkle_root" field.</summary>
    public const int MerkleRootFieldNumber = 17;
    private pb::ByteString merkleRoot_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MerkleRoot {
      get { return merkleRoot_; }
      set {
        merkleRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LightVBKBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LightVBKBlock other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Number != other.Number) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Hash != other.Hash) return false;
      if (PreviousHash != other.PreviousHash) return false;
      if (SecondPreviousHash != other.SecondPreviousHash) return false;
      if (ThirdPreviousHash != other.ThirdPreviousHash) return false;
      if (EncodedDifficulty != other.EncodedDifficulty) return false;
      if (WinningNonce != other.WinningNonce) return false;
      if(!knownRegularTransactions_.Equals(other.knownRegularTransactions_)) return false;
      if(!popTransactions_.Equals(other.popTransactions_)) return false;
      if (PowCoinbaseReward != other.PowCoinbaseReward) return false;
      if (PopCoinbaseReward != other.PopCoinbaseReward) return false;
      if(!bitcoinBlockHeaders_.Equals(other.bitcoinBlockHeaders_)) return false;
      if (!object.Equals(BlockContentMetapackage, other.BlockContentMetapackage)) return false;
      if (NormalTransactionMerkleRoot != other.NormalTransactionMerkleRoot) return false;
      if (Version != other.Version) return false;
      if (MerkleRoot != other.MerkleRoot) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Number != 0) hash ^= Number.GetHashCode();
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      if (PreviousHash.Length != 0) hash ^= PreviousHash.GetHashCode();
      if (SecondPreviousHash.Length != 0) hash ^= SecondPreviousHash.GetHashCode();
      if (ThirdPreviousHash.Length != 0) hash ^= ThirdPreviousHash.GetHashCode();
      if (EncodedDifficulty != 0) hash ^= EncodedDifficulty.GetHashCode();
      if (WinningNonce != 0) hash ^= WinningNonce.GetHashCode();
      hash ^= knownRegularTransactions_.GetHashCode();
      hash ^= popTransactions_.GetHashCode();
      if (PowCoinbaseReward != 0L) hash ^= PowCoinbaseReward.GetHashCode();
      if (PopCoinbaseReward != 0L) hash ^= PopCoinbaseReward.GetHashCode();
      hash ^= bitcoinBlockHeaders_.GetHashCode();
      if (blockContentMetapackage_ != null) hash ^= BlockContentMetapackage.GetHashCode();
      if (NormalTransactionMerkleRoot.Length != 0) hash ^= NormalTransactionMerkleRoot.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (MerkleRoot.Length != 0) hash ^= MerkleRoot.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Number != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Number);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Timestamp);
      }
      if (Hash.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Hash);
      }
      if (PreviousHash.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(PreviousHash);
      }
      if (SecondPreviousHash.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(SecondPreviousHash);
      }
      if (ThirdPreviousHash.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(ThirdPreviousHash);
      }
      if (EncodedDifficulty != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(EncodedDifficulty);
      }
      if (WinningNonce != 0) {
        output.WriteRawTag(64);
        output.WriteSInt32(WinningNonce);
      }
      knownRegularTransactions_.WriteTo(output, _repeated_knownRegularTransactions_codec);
      popTransactions_.WriteTo(output, _repeated_popTransactions_codec);
      if (PowCoinbaseReward != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(PowCoinbaseReward);
      }
      if (PopCoinbaseReward != 0L) {
        output.WriteRawTag(96);
        output.WriteInt64(PopCoinbaseReward);
      }
      bitcoinBlockHeaders_.WriteTo(output, _repeated_bitcoinBlockHeaders_codec);
      if (blockContentMetapackage_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(BlockContentMetapackage);
      }
      if (NormalTransactionMerkleRoot.Length != 0) {
        output.WriteRawTag(122);
        output.WriteBytes(NormalTransactionMerkleRoot);
      }
      if (Version != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Version);
      }
      if (MerkleRoot.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteBytes(MerkleRoot);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      if (PreviousHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PreviousHash);
      }
      if (SecondPreviousHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SecondPreviousHash);
      }
      if (ThirdPreviousHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ThirdPreviousHash);
      }
      if (EncodedDifficulty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EncodedDifficulty);
      }
      if (WinningNonce != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(WinningNonce);
      }
      size += knownRegularTransactions_.CalculateSize(_repeated_knownRegularTransactions_codec);
      size += popTransactions_.CalculateSize(_repeated_popTransactions_codec);
      if (PowCoinbaseReward != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PowCoinbaseReward);
      }
      if (PopCoinbaseReward != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PopCoinbaseReward);
      }
      size += bitcoinBlockHeaders_.CalculateSize(_repeated_bitcoinBlockHeaders_codec);
      if (blockContentMetapackage_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockContentMetapackage);
      }
      if (NormalTransactionMerkleRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(NormalTransactionMerkleRoot);
      }
      if (Version != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (MerkleRoot.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(MerkleRoot);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LightVBKBlock other) {
      if (other == null) {
        return;
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
      if (other.PreviousHash.Length != 0) {
        PreviousHash = other.PreviousHash;
      }
      if (other.SecondPreviousHash.Length != 0) {
        SecondPreviousHash = other.SecondPreviousHash;
      }
      if (other.ThirdPreviousHash.Length != 0) {
        ThirdPreviousHash = other.ThirdPreviousHash;
      }
      if (other.EncodedDifficulty != 0) {
        EncodedDifficulty = other.EncodedDifficulty;
      }
      if (other.WinningNonce != 0) {
        WinningNonce = other.WinningNonce;
      }
      knownRegularTransactions_.Add(other.knownRegularTransactions_);
      popTransactions_.Add(other.popTransactions_);
      if (other.PowCoinbaseReward != 0L) {
        PowCoinbaseReward = other.PowCoinbaseReward;
      }
      if (other.PopCoinbaseReward != 0L) {
        PopCoinbaseReward = other.PopCoinbaseReward;
      }
      bitcoinBlockHeaders_.Add(other.bitcoinBlockHeaders_);
      if (other.blockContentMetapackage_ != null) {
        if (blockContentMetapackage_ == null) {
          blockContentMetapackage_ = new global::Core.BlockContentMetapackage();
        }
        BlockContentMetapackage.MergeFrom(other.BlockContentMetapackage);
      }
      if (other.NormalTransactionMerkleRoot.Length != 0) {
        NormalTransactionMerkleRoot = other.NormalTransactionMerkleRoot;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.MerkleRoot.Length != 0) {
        MerkleRoot = other.MerkleRoot;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Number = input.ReadInt32();
            break;
          }
          case 16: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 26: {
            Hash = input.ReadBytes();
            break;
          }
          case 34: {
            PreviousHash = input.ReadBytes();
            break;
          }
          case 42: {
            SecondPreviousHash = input.ReadBytes();
            break;
          }
          case 50: {
            ThirdPreviousHash = input.ReadBytes();
            break;
          }
          case 56: {
            EncodedDifficulty = input.ReadInt32();
            break;
          }
          case 64: {
            WinningNonce = input.ReadSInt32();
            break;
          }
          case 74: {
            knownRegularTransactions_.AddEntriesFrom(input, _repeated_knownRegularTransactions_codec);
            break;
          }
          case 82: {
            popTransactions_.AddEntriesFrom(input, _repeated_popTransactions_codec);
            break;
          }
          case 88: {
            PowCoinbaseReward = input.ReadInt64();
            break;
          }
          case 96: {
            PopCoinbaseReward = input.ReadInt64();
            break;
          }
          case 106: {
            bitcoinBlockHeaders_.AddEntriesFrom(input, _repeated_bitcoinBlockHeaders_codec);
            break;
          }
          case 114: {
            if (blockContentMetapackage_ == null) {
              blockContentMetapackage_ = new global::Core.BlockContentMetapackage();
            }
            input.ReadMessage(blockContentMetapackage_);
            break;
          }
          case 122: {
            NormalTransactionMerkleRoot = input.ReadBytes();
            break;
          }
          case 128: {
            Version = input.ReadInt32();
            break;
          }
          case 138: {
            MerkleRoot = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockFilter : pb::IMessage<BlockFilter> {
    private static readonly pb::MessageParser<BlockFilter> _parser = new pb::MessageParser<BlockFilter>(() => new BlockFilter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockFilter(BlockFilter other) : this() {
      switch (other.FiltersCase) {
        case FiltersOneofCase.Hash:
          Hash = other.Hash;
          break;
        case FiltersOneofCase.Index:
          Index = other.Index;
          break;
        case FiltersOneofCase.Number:
          Number = other.Number;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockFilter Clone() {
      return new BlockFilter(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash {
      get { return filtersCase_ == FiltersOneofCase.Hash ? (pb::ByteString) filters_ : pb::ByteString.Empty; }
      set {
        filters_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        filtersCase_ = FiltersOneofCase.Hash;
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return filtersCase_ == FiltersOneofCase.Index ? (int) filters_ : 0; }
      set {
        filters_ = value;
        filtersCase_ = FiltersOneofCase.Index;
      }
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return filtersCase_ == FiltersOneofCase.Number ? (int) filters_ : 0; }
      set {
        filters_ = value;
        filtersCase_ = FiltersOneofCase.Number;
      }
    }

    private object filters_;
    /// <summary>Enum of possible cases for the "filters" oneof.</summary>
    public enum FiltersOneofCase {
      None = 0,
      Hash = 1,
      Index = 2,
      Number = 3,
    }
    private FiltersOneofCase filtersCase_ = FiltersOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FiltersOneofCase FiltersCase {
      get { return filtersCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearFilters() {
      filtersCase_ = FiltersOneofCase.None;
      filters_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      if (Index != other.Index) return false;
      if (Number != other.Number) return false;
      if (FiltersCase != other.FiltersCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (filtersCase_ == FiltersOneofCase.Hash) hash ^= Hash.GetHashCode();
      if (filtersCase_ == FiltersOneofCase.Index) hash ^= Index.GetHashCode();
      if (filtersCase_ == FiltersOneofCase.Number) hash ^= Number.GetHashCode();
      hash ^= (int) filtersCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (filtersCase_ == FiltersOneofCase.Hash) {
        output.WriteRawTag(10);
        output.WriteBytes(Hash);
      }
      if (filtersCase_ == FiltersOneofCase.Index) {
        output.WriteRawTag(16);
        output.WriteInt32(Index);
      }
      if (filtersCase_ == FiltersOneofCase.Number) {
        output.WriteRawTag(24);
        output.WriteInt32(Number);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (filtersCase_ == FiltersOneofCase.Hash) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      if (filtersCase_ == FiltersOneofCase.Index) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (filtersCase_ == FiltersOneofCase.Number) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockFilter other) {
      if (other == null) {
        return;
      }
      switch (other.FiltersCase) {
        case FiltersOneofCase.Hash:
          Hash = other.Hash;
          break;
        case FiltersOneofCase.Index:
          Index = other.Index;
          break;
        case FiltersOneofCase.Number:
          Number = other.Number;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Hash = input.ReadBytes();
            break;
          }
          case 16: {
            Index = input.ReadInt32();
            break;
          }
          case 24: {
            Number = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBlocksRequest : pb::IMessage<GetBlocksRequest> {
    private static readonly pb::MessageParser<GetBlocksRequest> _parser = new pb::MessageParser<GetBlocksRequest>(() => new GetBlocksRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBlocksRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlocksRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlocksRequest(GetBlocksRequest other) : this() {
      searchLength_ = other.searchLength_;
      filters_ = other.filters_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlocksRequest Clone() {
      return new GetBlocksRequest(this);
    }

    /// <summary>Field number for the "search_length" field.</summary>
    public const int SearchLengthFieldNumber = 1;
    private int searchLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SearchLength {
      get { return searchLength_; }
      set {
        searchLength_ = value;
      }
    }

    /// <summary>Field number for the "filters" field.</summary>
    public const int FiltersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.BlockFilter> _repeated_filters_codec
        = pb::FieldCodec.ForMessage(18, global::Core.BlockFilter.Parser);
    private readonly pbc::RepeatedField<global::Core.BlockFilter> filters_ = new pbc::RepeatedField<global::Core.BlockFilter>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.BlockFilter> Filters {
      get { return filters_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBlocksRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBlocksRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SearchLength != other.SearchLength) return false;
      if(!filters_.Equals(other.filters_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SearchLength != 0) hash ^= SearchLength.GetHashCode();
      hash ^= filters_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SearchLength != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SearchLength);
      }
      filters_.WriteTo(output, _repeated_filters_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SearchLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SearchLength);
      }
      size += filters_.CalculateSize(_repeated_filters_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBlocksRequest other) {
      if (other == null) {
        return;
      }
      if (other.SearchLength != 0) {
        SearchLength = other.SearchLength;
      }
      filters_.Add(other.filters_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SearchLength = input.ReadInt32();
            break;
          }
          case 18: {
            filters_.AddEntriesFrom(input, _repeated_filters_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Result : pb::IMessage<Result> {
    private static readonly pb::MessageParser<Result> _parser = new pb::MessageParser<Result>(() => new Result());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Result> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Result() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Result(Result other) : this() {
      error_ = other.error_;
      code_ = other.code_;
      message_ = other.message_;
      details_ = other.details_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Result Clone() {
      return new Result(this);
    }

    /// <summary>Field number for the "error" field.</summary>
    public const int ErrorFieldNumber = 1;
    private bool error_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    /// <summary>Field number for the "code" field.</summary>
    public const int CodeFieldNumber = 2;
    private string code_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Code {
      get { return code_; }
      set {
        code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 3;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "details" field.</summary>
    public const int DetailsFieldNumber = 4;
    private string details_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Details {
      get { return details_; }
      set {
        details_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Result);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Result other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Error != other.Error) return false;
      if (Code != other.Code) return false;
      if (Message != other.Message) return false;
      if (Details != other.Details) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Error != false) hash ^= Error.GetHashCode();
      if (Code.Length != 0) hash ^= Code.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Details.Length != 0) hash ^= Details.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Error != false) {
        output.WriteRawTag(8);
        output.WriteBool(Error);
      }
      if (Code.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Code);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Message);
      }
      if (Details.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Details);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Error != false) {
        size += 1 + 1;
      }
      if (Code.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Details.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Details);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Result other) {
      if (other == null) {
        return;
      }
      if (other.Error != false) {
        Error = other.Error;
      }
      if (other.Code.Length != 0) {
        Code = other.Code;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Details.Length != 0) {
        Details = other.Details;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Error = input.ReadBool();
            break;
          }
          case 18: {
            Code = input.ReadString();
            break;
          }
          case 26: {
            Message = input.ReadString();
            break;
          }
          case 34: {
            Details = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ProtocolReply : pb::IMessage<ProtocolReply> {
    private static readonly pb::MessageParser<ProtocolReply> _parser = new pb::MessageParser<ProtocolReply>(() => new ProtocolReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtocolReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtocolReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtocolReply(ProtocolReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtocolReply Clone() {
      return new ProtocolReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtocolReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtocolReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtocolReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBlocksReply : pb::IMessage<GetBlocksReply> {
    private static readonly pb::MessageParser<GetBlocksReply> _parser = new pb::MessageParser<GetBlocksReply>(() => new GetBlocksReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBlocksReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlocksReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlocksReply(GetBlocksReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      blocks_ = other.blocks_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlocksReply Clone() {
      return new GetBlocksReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "blocks" field.</summary>
    public const int BlocksFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Core.Block> _repeated_blocks_codec
        = pb::FieldCodec.ForMessage(26, global::Core.Block.Parser);
    private readonly pbc::RepeatedField<global::Core.Block> blocks_ = new pbc::RepeatedField<global::Core.Block>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Block> Blocks {
      get { return blocks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBlocksReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBlocksReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if(!blocks_.Equals(other.blocks_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      hash ^= blocks_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      blocks_.WriteTo(output, _repeated_blocks_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      size += blocks_.CalculateSize(_repeated_blocks_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBlocksReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      blocks_.Add(other.blocks_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            blocks_.AddEntriesFrom(input, _repeated_blocks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BackupWalletRequest : pb::IMessage<BackupWalletRequest> {
    private static readonly pb::MessageParser<BackupWalletRequest> _parser = new pb::MessageParser<BackupWalletRequest>(() => new BackupWalletRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BackupWalletRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupWalletRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupWalletRequest(BackupWalletRequest other) : this() {
      targetLocation_ = other.targetLocation_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupWalletRequest Clone() {
      return new BackupWalletRequest(this);
    }

    /// <summary>Field number for the "target_location" field.</summary>
    public const int TargetLocationFieldNumber = 1;
    private pb::ByteString targetLocation_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TargetLocation {
      get { return targetLocation_; }
      set {
        targetLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BackupWalletRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BackupWalletRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TargetLocation != other.TargetLocation) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TargetLocation.Length != 0) hash ^= TargetLocation.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TargetLocation.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(TargetLocation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TargetLocation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TargetLocation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BackupWalletRequest other) {
      if (other == null) {
        return;
      }
      if (other.TargetLocation.Length != 0) {
        TargetLocation = other.TargetLocation;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TargetLocation = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BackupWalletReply : pb::IMessage<BackupWalletReply> {
    private static readonly pb::MessageParser<BackupWalletReply> _parser = new pb::MessageParser<BackupWalletReply>(() => new BackupWalletReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BackupWalletReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupWalletReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupWalletReply(BackupWalletReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BackupWalletReply Clone() {
      return new BackupWalletReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BackupWalletReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BackupWalletReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BackupWalletReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ImportWalletRequest : pb::IMessage<ImportWalletRequest> {
    private static readonly pb::MessageParser<ImportWalletRequest> _parser = new pb::MessageParser<ImportWalletRequest>(() => new ImportWalletRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImportWalletRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportWalletRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportWalletRequest(ImportWalletRequest other) : this() {
      sourceLocation_ = other.sourceLocation_;
      passphrase_ = other.passphrase_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportWalletRequest Clone() {
      return new ImportWalletRequest(this);
    }

    /// <summary>Field number for the "source_location" field.</summary>
    public const int SourceLocationFieldNumber = 1;
    private pb::ByteString sourceLocation_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SourceLocation {
      get { return sourceLocation_; }
      set {
        sourceLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "passphrase" field.</summary>
    public const int PassphraseFieldNumber = 2;
    private string passphrase_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Passphrase {
      get { return passphrase_; }
      set {
        passphrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImportWalletRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImportWalletRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceLocation != other.SourceLocation) return false;
      if (Passphrase != other.Passphrase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourceLocation.Length != 0) hash ^= SourceLocation.GetHashCode();
      if (Passphrase.Length != 0) hash ^= Passphrase.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SourceLocation.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(SourceLocation);
      }
      if (Passphrase.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Passphrase);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourceLocation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SourceLocation);
      }
      if (Passphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passphrase);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImportWalletRequest other) {
      if (other == null) {
        return;
      }
      if (other.SourceLocation.Length != 0) {
        SourceLocation = other.SourceLocation;
      }
      if (other.Passphrase.Length != 0) {
        Passphrase = other.Passphrase;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SourceLocation = input.ReadBytes();
            break;
          }
          case 18: {
            Passphrase = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ImportWalletReply : pb::IMessage<ImportWalletReply> {
    private static readonly pb::MessageParser<ImportWalletReply> _parser = new pb::MessageParser<ImportWalletReply>(() => new ImportWalletReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImportWalletReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportWalletReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportWalletReply(ImportWalletReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportWalletReply Clone() {
      return new ImportWalletReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImportWalletReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImportWalletReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImportWalletReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Announce : pb::IMessage<Announce> {
    private static readonly pb::MessageParser<Announce> _parser = new pb::MessageParser<Announce>(() => new Announce());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Announce> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Announce() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Announce(Announce other) : this() {
      reply_ = other.reply_;
      NodeInfo = other.nodeInfo_ != null ? other.NodeInfo.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Announce Clone() {
      return new Announce(this);
    }

    /// <summary>Field number for the "reply" field.</summary>
    public const int ReplyFieldNumber = 1;
    private bool reply_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reply {
      get { return reply_; }
      set {
        reply_ = value;
      }
    }

    /// <summary>Field number for the "node_info" field.</summary>
    public const int NodeInfoFieldNumber = 2;
    private global::Core.NodeInfo nodeInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.NodeInfo NodeInfo {
      get { return nodeInfo_; }
      set {
        nodeInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Announce);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Announce other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Reply != other.Reply) return false;
      if (!object.Equals(NodeInfo, other.NodeInfo)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Reply != false) hash ^= Reply.GetHashCode();
      if (nodeInfo_ != null) hash ^= NodeInfo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Reply != false) {
        output.WriteRawTag(8);
        output.WriteBool(Reply);
      }
      if (nodeInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(NodeInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Reply != false) {
        size += 1 + 1;
      }
      if (nodeInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NodeInfo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Announce other) {
      if (other == null) {
        return;
      }
      if (other.Reply != false) {
        Reply = other.Reply;
      }
      if (other.nodeInfo_ != null) {
        if (nodeInfo_ == null) {
          nodeInfo_ = new global::Core.NodeInfo();
        }
        NodeInfo.MergeFrom(other.NodeInfo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Reply = input.ReadBool();
            break;
          }
          case 18: {
            if (nodeInfo_ == null) {
              nodeInfo_ = new global::Core.NodeInfo();
            }
            input.ReadMessage(nodeInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeInfo : pb::IMessage<NodeInfo> {
    private static readonly pb::MessageParser<NodeInfo> _parser = new pb::MessageParser<NodeInfo>(() => new NodeInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfo(NodeInfo other) : this() {
      address_ = other.address_;
      port_ = other.port_;
      application_ = other.application_;
      protocolVersion_ = other.protocolVersion_;
      platform_ = other.platform_;
      startTimestamp_ = other.startTimestamp_;
      id_ = other.id_;
      share_ = other.share_;
      capabilities_ = other.capabilities_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeInfo Clone() {
      return new NodeInfo(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private string address_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    /// <summary>Field number for the "application" field.</summary>
    public const int ApplicationFieldNumber = 3;
    private string application_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Application {
      get { return application_; }
      set {
        application_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "protocol_version" field.</summary>
    public const int ProtocolVersionFieldNumber = 4;
    private int protocolVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ProtocolVersion {
      get { return protocolVersion_; }
      set {
        protocolVersion_ = value;
      }
    }

    /// <summary>Field number for the "platform" field.</summary>
    public const int PlatformFieldNumber = 5;
    private string platform_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Platform {
      get { return platform_; }
      set {
        platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "start_timestamp" field.</summary>
    public const int StartTimestampFieldNumber = 6;
    private int startTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartTimestamp {
      get { return startTimestamp_; }
      set {
        startTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 7;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "share" field.</summary>
    public const int ShareFieldNumber = 8;
    private bool share_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Share {
      get { return share_; }
      set {
        share_ = value;
      }
    }

    /// <summary>Field number for the "capabilities" field.</summary>
    public const int CapabilitiesFieldNumber = 9;
    private long capabilities_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Capabilities {
      get { return capabilities_; }
      set {
        capabilities_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (Port != other.Port) return false;
      if (Application != other.Application) return false;
      if (ProtocolVersion != other.ProtocolVersion) return false;
      if (Platform != other.Platform) return false;
      if (StartTimestamp != other.StartTimestamp) return false;
      if (Id != other.Id) return false;
      if (Share != other.Share) return false;
      if (Capabilities != other.Capabilities) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (Application.Length != 0) hash ^= Application.GetHashCode();
      if (ProtocolVersion != 0) hash ^= ProtocolVersion.GetHashCode();
      if (Platform.Length != 0) hash ^= Platform.GetHashCode();
      if (StartTimestamp != 0) hash ^= StartTimestamp.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Share != false) hash ^= Share.GetHashCode();
      if (Capabilities != 0L) hash ^= Capabilities.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
      if (Application.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Application);
      }
      if (ProtocolVersion != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ProtocolVersion);
      }
      if (Platform.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Platform);
      }
      if (StartTimestamp != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(StartTimestamp);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Id);
      }
      if (Share != false) {
        output.WriteRawTag(64);
        output.WriteBool(Share);
      }
      if (Capabilities != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(Capabilities);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (Application.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Application);
      }
      if (ProtocolVersion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProtocolVersion);
      }
      if (Platform.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
      }
      if (StartTimestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartTimestamp);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Share != false) {
        size += 1 + 1;
      }
      if (Capabilities != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Capabilities);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeInfo other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      if (other.Application.Length != 0) {
        Application = other.Application;
      }
      if (other.ProtocolVersion != 0) {
        ProtocolVersion = other.ProtocolVersion;
      }
      if (other.Platform.Length != 0) {
        Platform = other.Platform;
      }
      if (other.StartTimestamp != 0) {
        StartTimestamp = other.StartTimestamp;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Share != false) {
        Share = other.Share;
      }
      if (other.Capabilities != 0L) {
        Capabilities = other.Capabilities;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
          case 26: {
            Application = input.ReadString();
            break;
          }
          case 32: {
            ProtocolVersion = input.ReadInt32();
            break;
          }
          case 42: {
            Platform = input.ReadString();
            break;
          }
          case 48: {
            StartTimestamp = input.ReadInt32();
            break;
          }
          case 58: {
            Id = input.ReadString();
            break;
          }
          case 64: {
            Share = input.ReadBool();
            break;
          }
          case 72: {
            Capabilities = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddBlocksRequest : pb::IMessage<AddBlocksRequest> {
    private static readonly pb::MessageParser<AddBlocksRequest> _parser = new pb::MessageParser<AddBlocksRequest>(() => new AddBlocksRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddBlocksRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddBlocksRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddBlocksRequest(AddBlocksRequest other) : this() {
      blocks_ = other.blocks_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddBlocksRequest Clone() {
      return new AddBlocksRequest(this);
    }

    /// <summary>Field number for the "blocks" field.</summary>
    public const int BlocksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Core.Block> _repeated_blocks_codec
        = pb::FieldCodec.ForMessage(10, global::Core.Block.Parser);
    private readonly pbc::RepeatedField<global::Core.Block> blocks_ = new pbc::RepeatedField<global::Core.Block>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Block> Blocks {
      get { return blocks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddBlocksRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddBlocksRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!blocks_.Equals(other.blocks_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= blocks_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      blocks_.WriteTo(output, _repeated_blocks_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += blocks_.CalculateSize(_repeated_blocks_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddBlocksRequest other) {
      if (other == null) {
        return;
      }
      blocks_.Add(other.blocks_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            blocks_.AddEntriesFrom(input, _repeated_blocks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockInfo : pb::IMessage<BlockInfo> {
    private static readonly pb::MessageParser<BlockInfo> _parser = new pb::MessageParser<BlockInfo>(() => new BlockInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockInfo(BlockInfo other) : this() {
      number_ = other.number_;
      hash_ = other.hash_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockInfo Clone() {
      return new BlockInfo(this);
    }

    /// <summary>Field number for the "number" field.</summary>
    public const int NumberFieldNumber = 1;
    private int number_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Number {
      get { return number_; }
      set {
        number_ = value;
      }
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 2;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Number != other.Number) return false;
      if (Hash != other.Hash) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Number != 0) hash ^= Number.GetHashCode();
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Number != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Number);
      }
      if (Hash.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Hash);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Number != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Number);
      }
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockInfo other) {
      if (other == null) {
        return;
      }
      if (other.Number != 0) {
        Number = other.Number;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Number = input.ReadInt32();
            break;
          }
          case 18: {
            Hash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddTransactionsReply : pb::IMessage<AddTransactionsReply> {
    private static readonly pb::MessageParser<AddTransactionsReply> _parser = new pb::MessageParser<AddTransactionsReply>(() => new AddTransactionsReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddTransactionsReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddTransactionsReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddTransactionsReply(AddTransactionsReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      txIds_ = other.txIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddTransactionsReply Clone() {
      return new AddTransactionsReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "tx_ids" field.</summary>
    public const int TxIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_txIds_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> txIds_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> TxIds {
      get { return txIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddTransactionsReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddTransactionsReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if(!txIds_.Equals(other.txIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      hash ^= txIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      txIds_.WriteTo(output, _repeated_txIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      size += txIds_.CalculateSize(_repeated_txIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddTransactionsReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      txIds_.Add(other.txIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            txIds_.AddEntriesFrom(input, _repeated_txIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Heartbeat : pb::IMessage<Heartbeat> {
    private static readonly pb::MessageParser<Heartbeat> _parser = new pb::MessageParser<Heartbeat>(() => new Heartbeat());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Heartbeat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat(Heartbeat other) : this() {
      Block = other.block_ != null ? other.Block.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Heartbeat Clone() {
      return new Heartbeat(this);
    }

    /// <summary>Field number for the "block" field.</summary>
    public const int BlockFieldNumber = 1;
    private global::Core.BlockInfo block_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.BlockInfo Block {
      get { return block_; }
      set {
        block_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Heartbeat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Heartbeat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Block, other.Block)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (block_ != null) hash ^= Block.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (block_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Block);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (block_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Block);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Heartbeat other) {
      if (other == null) {
        return;
      }
      if (other.block_ != null) {
        if (block_ == null) {
          block_ = new global::Core.BlockInfo();
        }
        Block.MergeFrom(other.Block);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (block_ == null) {
              block_ = new global::Core.BlockInfo();
            }
            input.ReadMessage(block_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockQuery : pb::IMessage<BlockQuery> {
    private static readonly pb::MessageParser<BlockQuery> _parser = new pb::MessageParser<BlockQuery>(() => new BlockQuery());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockQuery(BlockQuery other) : this() {
      Block = other.block_ != null ? other.Block.Clone() : null;
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockQuery Clone() {
      return new BlockQuery(this);
    }

    /// <summary>Field number for the "block" field.</summary>
    public const int BlockFieldNumber = 1;
    private global::Core.BlockInfo block_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.BlockInfo Block {
      get { return block_; }
      set {
        block_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Block, other.Block)) return false;
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (block_ != null) hash ^= Block.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (block_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Block);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (block_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Block);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockQuery other) {
      if (other == null) {
        return;
      }
      if (other.block_ != null) {
        if (block_ == null) {
          block_ = new global::Core.BlockInfo();
        }
        Block.MergeFrom(other.Block);
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (block_ == null) {
              block_ = new global::Core.BlockInfo();
            }
            input.ReadMessage(block_);
            break;
          }
          case 18: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockQueryReply : pb::IMessage<BlockQueryReply> {
    private static readonly pb::MessageParser<BlockQueryReply> _parser = new pb::MessageParser<BlockQueryReply>(() => new BlockQueryReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockQueryReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockQueryReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockQueryReply(BlockQueryReply other) : this() {
      matched_ = other.matched_;
      Block = other.block_ != null ? other.Block.Clone() : null;
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockQueryReply Clone() {
      return new BlockQueryReply(this);
    }

    /// <summary>Field number for the "matched" field.</summary>
    public const int MatchedFieldNumber = 1;
    private bool matched_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Matched {
      get { return matched_; }
      set {
        matched_ = value;
      }
    }

    /// <summary>Field number for the "block" field.</summary>
    public const int BlockFieldNumber = 2;
    private global::Core.BlockInfo block_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.BlockInfo Block {
      get { return block_; }
      set {
        block_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockQueryReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockQueryReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Matched != other.Matched) return false;
      if (!object.Equals(Block, other.Block)) return false;
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Matched != false) hash ^= Matched.GetHashCode();
      if (block_ != null) hash ^= Block.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Matched != false) {
        output.WriteRawTag(8);
        output.WriteBool(Matched);
      }
      if (block_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Block);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Matched != false) {
        size += 1 + 1;
      }
      if (block_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Block);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockQueryReply other) {
      if (other == null) {
        return;
      }
      if (other.Matched != false) {
        Matched = other.Matched;
      }
      if (other.block_ != null) {
        if (block_ == null) {
          block_ = new global::Core.BlockInfo();
        }
        Block.MergeFrom(other.Block);
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Matched = input.ReadBool();
            break;
          }
          case 18: {
            if (block_ == null) {
              block_ = new global::Core.BlockInfo();
            }
            input.ReadMessage(block_);
            break;
          }
          case 26: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SyncRequest : pb::IMessage<SyncRequest> {
    private static readonly pb::MessageParser<SyncRequest> _parser = new pb::MessageParser<SyncRequest>(() => new SyncRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncRequest(SyncRequest other) : this() {
      startingBlockHeight_ = other.startingBlockHeight_;
      syncTransactions_ = other.syncTransactions_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncRequest Clone() {
      return new SyncRequest(this);
    }

    /// <summary>Field number for the "starting_block_height" field.</summary>
    public const int StartingBlockHeightFieldNumber = 1;
    private int startingBlockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartingBlockHeight {
      get { return startingBlockHeight_; }
      set {
        startingBlockHeight_ = value;
      }
    }

    /// <summary>Field number for the "sync_transactions" field.</summary>
    public const int SyncTransactionsFieldNumber = 2;
    private bool syncTransactions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SyncTransactions {
      get { return syncTransactions_; }
      set {
        syncTransactions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartingBlockHeight != other.StartingBlockHeight) return false;
      if (SyncTransactions != other.SyncTransactions) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartingBlockHeight != 0) hash ^= StartingBlockHeight.GetHashCode();
      if (SyncTransactions != false) hash ^= SyncTransactions.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartingBlockHeight != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StartingBlockHeight);
      }
      if (SyncTransactions != false) {
        output.WriteRawTag(16);
        output.WriteBool(SyncTransactions);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartingBlockHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartingBlockHeight);
      }
      if (SyncTransactions != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncRequest other) {
      if (other == null) {
        return;
      }
      if (other.StartingBlockHeight != 0) {
        StartingBlockHeight = other.StartingBlockHeight;
      }
      if (other.SyncTransactions != false) {
        SyncTransactions = other.SyncTransactions;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StartingBlockHeight = input.ReadInt32();
            break;
          }
          case 16: {
            SyncTransactions = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetworkInfoRequest : pb::IMessage<NetworkInfoRequest> {
    private static readonly pb::MessageParser<NetworkInfoRequest> _parser = new pb::MessageParser<NetworkInfoRequest>(() => new NetworkInfoRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfoRequest(NetworkInfoRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfoRequest Clone() {
      return new NetworkInfoRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkInfoRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class NetworkInfoReply : pb::IMessage<NetworkInfoReply> {
    private static readonly pb::MessageParser<NetworkInfoReply> _parser = new pb::MessageParser<NetworkInfoReply>(() => new NetworkInfoReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkInfoReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfoReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfoReply(NetworkInfoReply other) : this() {
      availableNodes_ = other.availableNodes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkInfoReply Clone() {
      return new NetworkInfoReply(this);
    }

    /// <summary>Field number for the "available_nodes" field.</summary>
    public const int AvailableNodesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Core.NodeInfo> _repeated_availableNodes_codec
        = pb::FieldCodec.ForMessage(10, global::Core.NodeInfo.Parser);
    private readonly pbc::RepeatedField<global::Core.NodeInfo> availableNodes_ = new pbc::RepeatedField<global::Core.NodeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.NodeInfo> AvailableNodes {
      get { return availableNodes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkInfoReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkInfoReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!availableNodes_.Equals(other.availableNodes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= availableNodes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      availableNodes_.WriteTo(output, _repeated_availableNodes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += availableNodes_.CalculateSize(_repeated_availableNodes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkInfoReply other) {
      if (other == null) {
        return;
      }
      availableNodes_.Add(other.availableNodes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            availableNodes_.AddEntriesFrom(input, _repeated_availableNodes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Acknowledgement : pb::IMessage<Acknowledgement> {
    private static readonly pb::MessageParser<Acknowledgement> _parser = new pb::MessageParser<Acknowledgement>(() => new Acknowledgement());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Acknowledgement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Acknowledgement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Acknowledgement(Acknowledgement other) : this() {
      messageId_ = other.messageId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Acknowledgement Clone() {
      return new Acknowledgement(this);
    }

    /// <summary>Field number for the "message_id" field.</summary>
    public const int MessageIdFieldNumber = 1;
    private string messageId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MessageId {
      get { return messageId_; }
      set {
        messageId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Acknowledgement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Acknowledgement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MessageId != other.MessageId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MessageId.Length != 0) hash ^= MessageId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MessageId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(MessageId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MessageId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MessageId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Acknowledgement other) {
      if (other == null) {
        return;
      }
      if (other.MessageId.Length != 0) {
        MessageId = other.MessageId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            MessageId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AdvertiseBlocks : pb::IMessage<AdvertiseBlocks> {
    private static readonly pb::MessageParser<AdvertiseBlocks> _parser = new pb::MessageParser<AdvertiseBlocks>(() => new AdvertiseBlocks());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdvertiseBlocks> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdvertiseBlocks() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdvertiseBlocks(AdvertiseBlocks other) : this() {
      headers_ = other.headers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdvertiseBlocks Clone() {
      return new AdvertiseBlocks(this);
    }

    /// <summary>Field number for the "headers" field.</summary>
    public const int HeadersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Core.BlockHeader> _repeated_headers_codec
        = pb::FieldCodec.ForMessage(10, global::Core.BlockHeader.Parser);
    private readonly pbc::RepeatedField<global::Core.BlockHeader> headers_ = new pbc::RepeatedField<global::Core.BlockHeader>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.BlockHeader> Headers {
      get { return headers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdvertiseBlocks);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdvertiseBlocks other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!headers_.Equals(other.headers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= headers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      headers_.WriteTo(output, _repeated_headers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += headers_.CalculateSize(_repeated_headers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdvertiseBlocks other) {
      if (other == null) {
        return;
      }
      headers_.Add(other.headers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            headers_.AddEntriesFrom(input, _repeated_headers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionAnnounce : pb::IMessage<TransactionAnnounce> {
    private static readonly pb::MessageParser<TransactionAnnounce> _parser = new pb::MessageParser<TransactionAnnounce>(() => new TransactionAnnounce());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionAnnounce> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionAnnounce() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionAnnounce(TransactionAnnounce other) : this() {
      type_ = other.type_;
      txId_ = other.txId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionAnnounce Clone() {
      return new TransactionAnnounce(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Core.TransactionAnnounce.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.TransactionAnnounce.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "tx_id" field.</summary>
    public const int TxIdFieldNumber = 2;
    private pb::ByteString txId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TxId {
      get { return txId_; }
      set {
        txId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionAnnounce);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionAnnounce other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (TxId != other.TxId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (TxId.Length != 0) hash ^= TxId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (TxId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(TxId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (TxId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TxId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionAnnounce other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.TxId.Length != 0) {
        TxId = other.TxId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Core.TransactionAnnounce.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            TxId = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TransactionAnnounce message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("NORMAL")] Normal = 0,
        [pbr::OriginalName("PROOF_OF_PROOF")] ProofOfProof = 1,
      }

    }
    #endregion

  }

  public sealed partial class AdvertiseTransaction : pb::IMessage<AdvertiseTransaction> {
    private static readonly pb::MessageParser<AdvertiseTransaction> _parser = new pb::MessageParser<AdvertiseTransaction>(() => new AdvertiseTransaction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AdvertiseTransaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdvertiseTransaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdvertiseTransaction(AdvertiseTransaction other) : this() {
      transactions_ = other.transactions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AdvertiseTransaction Clone() {
      return new AdvertiseTransaction(this);
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Core.TransactionAnnounce> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(10, global::Core.TransactionAnnounce.Parser);
    private readonly pbc::RepeatedField<global::Core.TransactionAnnounce> transactions_ = new pbc::RepeatedField<global::Core.TransactionAnnounce>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.TransactionAnnounce> Transactions {
      get { return transactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AdvertiseTransaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AdvertiseTransaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!transactions_.Equals(other.transactions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= transactions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      transactions_.WriteTo(output, _repeated_transactions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AdvertiseTransaction other) {
      if (other == null) {
        return;
      }
      transactions_.Add(other.transactions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockRequest : pb::IMessage<BlockRequest> {
    private static readonly pb::MessageParser<BlockRequest> _parser = new pb::MessageParser<BlockRequest>(() => new BlockRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[68]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockRequest(BlockRequest other) : this() {
      headers_ = other.headers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockRequest Clone() {
      return new BlockRequest(this);
    }

    /// <summary>Field number for the "headers" field.</summary>
    public const int HeadersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Core.BlockHeader> _repeated_headers_codec
        = pb::FieldCodec.ForMessage(10, global::Core.BlockHeader.Parser);
    private readonly pbc::RepeatedField<global::Core.BlockHeader> headers_ = new pbc::RepeatedField<global::Core.BlockHeader>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.BlockHeader> Headers {
      get { return headers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!headers_.Equals(other.headers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= headers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      headers_.WriteTo(output, _repeated_headers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += headers_.CalculateSize(_repeated_headers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockRequest other) {
      if (other == null) {
        return;
      }
      headers_.Add(other.headers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            headers_.AddEntriesFrom(input, _repeated_headers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionRequest : pb::IMessage<TransactionRequest> {
    private static readonly pb::MessageParser<TransactionRequest> _parser = new pb::MessageParser<TransactionRequest>(() => new TransactionRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[69]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionRequest(TransactionRequest other) : this() {
      transactions_ = other.transactions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionRequest Clone() {
      return new TransactionRequest(this);
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Core.TransactionAnnounce> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(10, global::Core.TransactionAnnounce.Parser);
    private readonly pbc::RepeatedField<global::Core.TransactionAnnounce> transactions_ = new pbc::RepeatedField<global::Core.TransactionAnnounce>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.TransactionAnnounce> Transactions {
      get { return transactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!transactions_.Equals(other.transactions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= transactions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      transactions_.WriteTo(output, _repeated_transactions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionRequest other) {
      if (other == null) {
        return;
      }
      transactions_.Add(other.transactions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class KeystoneQuery : pb::IMessage<KeystoneQuery> {
    private static readonly pb::MessageParser<KeystoneQuery> _parser = new pb::MessageParser<KeystoneQuery>(() => new KeystoneQuery());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeystoneQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[70]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeystoneQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeystoneQuery(KeystoneQuery other) : this() {
      headers_ = other.headers_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KeystoneQuery Clone() {
      return new KeystoneQuery(this);
    }

    /// <summary>Field number for the "headers" field.</summary>
    public const int HeadersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Core.BlockHeader> _repeated_headers_codec
        = pb::FieldCodec.ForMessage(10, global::Core.BlockHeader.Parser);
    private readonly pbc::RepeatedField<global::Core.BlockHeader> headers_ = new pbc::RepeatedField<global::Core.BlockHeader>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.BlockHeader> Headers {
      get { return headers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KeystoneQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KeystoneQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!headers_.Equals(other.headers_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= headers_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      headers_.WriteTo(output, _repeated_headers_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += headers_.CalculateSize(_repeated_headers_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KeystoneQuery other) {
      if (other == null) {
        return;
      }
      headers_.Add(other.headers_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            headers_.AddEntriesFrom(input, _repeated_headers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NotFound : pb::IMessage<NotFound> {
    private static readonly pb::MessageParser<NotFound> _parser = new pb::MessageParser<NotFound>(() => new NotFound());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NotFound> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[71]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotFound() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotFound(NotFound other) : this() {
      type_ = other.type_;
      id_ = other.id_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NotFound Clone() {
      return new NotFound(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Core.NotFound.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.NotFound.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private pb::ByteString id_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NotFound);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NotFound other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Id != other.Id) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NotFound other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::Core.NotFound.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            Id = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NotFound message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("BLOCK")] Block = 0,
        [pbr::OriginalName("TX")] Tx = 1,
      }

    }
    #endregion

  }

  public sealed partial class CreateFilter : pb::IMessage<CreateFilter> {
    private static readonly pb::MessageParser<CreateFilter> _parser = new pb::MessageParser<CreateFilter>(() => new CreateFilter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[72]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateFilter(CreateFilter other) : this() {
      filter_ = other.filter_;
      hashIterations_ = other.hashIterations_;
      tweak_ = other.tweak_;
      flags_ = other.flags_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateFilter Clone() {
      return new CreateFilter(this);
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 1;
    private pb::ByteString filter_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Filter {
      get { return filter_; }
      set {
        filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hash_iterations" field.</summary>
    public const int HashIterationsFieldNumber = 2;
    private int hashIterations_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HashIterations {
      get { return hashIterations_; }
      set {
        hashIterations_ = value;
      }
    }

    /// <summary>Field number for the "tweak" field.</summary>
    public const int TweakFieldNumber = 3;
    private int tweak_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tweak {
      get { return tweak_; }
      set {
        tweak_ = value;
      }
    }

    /// <summary>Field number for the "flags" field.</summary>
    public const int FlagsFieldNumber = 4;
    private int flags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Flags {
      get { return flags_; }
      set {
        flags_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Filter != other.Filter) return false;
      if (HashIterations != other.HashIterations) return false;
      if (Tweak != other.Tweak) return false;
      if (Flags != other.Flags) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Filter.Length != 0) hash ^= Filter.GetHashCode();
      if (HashIterations != 0) hash ^= HashIterations.GetHashCode();
      if (Tweak != 0) hash ^= Tweak.GetHashCode();
      if (Flags != 0) hash ^= Flags.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Filter.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Filter);
      }
      if (HashIterations != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(HashIterations);
      }
      if (Tweak != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Tweak);
      }
      if (Flags != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Flags);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Filter.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Filter);
      }
      if (HashIterations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HashIterations);
      }
      if (Tweak != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tweak);
      }
      if (Flags != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flags);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateFilter other) {
      if (other == null) {
        return;
      }
      if (other.Filter.Length != 0) {
        Filter = other.Filter;
      }
      if (other.HashIterations != 0) {
        HashIterations = other.HashIterations;
      }
      if (other.Tweak != 0) {
        Tweak = other.Tweak;
      }
      if (other.Flags != 0) {
        Flags = other.Flags;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Filter = input.ReadBytes();
            break;
          }
          case 16: {
            HashIterations = input.ReadInt32();
            break;
          }
          case 24: {
            Tweak = input.ReadInt32();
            break;
          }
          case 32: {
            Flags = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddFilter : pb::IMessage<AddFilter> {
    private static readonly pb::MessageParser<AddFilter> _parser = new pb::MessageParser<AddFilter>(() => new AddFilter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[73]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddFilter(AddFilter other) : this() {
      data_ = other.data_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddFilter Clone() {
      return new AddFilter(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddFilter other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClearFilter : pb::IMessage<ClearFilter> {
    private static readonly pb::MessageParser<ClearFilter> _parser = new pb::MessageParser<ClearFilter>(() => new ClearFilter());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClearFilter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[74]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearFilter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearFilter(ClearFilter other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearFilter Clone() {
      return new ClearFilter(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClearFilter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClearFilter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClearFilter other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class Event : pb::IMessage<Event> {
    private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[75]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event(Event other) : this() {
      id_ = other.id_;
      acknowledge_ = other.acknowledge_;
      switch (other.ResultsCase) {
        case ResultsOneofCase.Block:
          Block = other.Block.Clone();
          break;
        case ResultsOneofCase.Transaction:
          Transaction = other.Transaction.Clone();
          break;
        case ResultsOneofCase.Announce:
          Announce = other.Announce.Clone();
          break;
        case ResultsOneofCase.Heartbeat:
          Heartbeat = other.Heartbeat.Clone();
          break;
        case ResultsOneofCase.BlockQuery:
          BlockQuery = other.BlockQuery.Clone();
          break;
        case ResultsOneofCase.BlockQueryReply:
          BlockQueryReply = other.BlockQueryReply.Clone();
          break;
        case ResultsOneofCase.NetworkInfoRequest:
          NetworkInfoRequest = other.NetworkInfoRequest.Clone();
          break;
        case ResultsOneofCase.NetworkInfoReply:
          NetworkInfoReply = other.NetworkInfoReply.Clone();
          break;
        case ResultsOneofCase.Acknowledgement:
          Acknowledgement = other.Acknowledgement.Clone();
          break;
        case ResultsOneofCase.AdvertiseBlocks:
          AdvertiseBlocks = other.AdvertiseBlocks.Clone();
          break;
        case ResultsOneofCase.BlockRequest:
          BlockRequest = other.BlockRequest.Clone();
          break;
        case ResultsOneofCase.KeystoneQuery:
          KeystoneQuery = other.KeystoneQuery.Clone();
          break;
        case ResultsOneofCase.AdvertiseTx:
          AdvertiseTx = other.AdvertiseTx.Clone();
          break;
        case ResultsOneofCase.TxRequest:
          TxRequest = other.TxRequest.Clone();
          break;
        case ResultsOneofCase.NotFound:
          NotFound = other.NotFound.Clone();
          break;
        case ResultsOneofCase.CreateFilter:
          CreateFilter = other.CreateFilter.Clone();
          break;
        case ResultsOneofCase.AddFilter:
          AddFilter = other.AddFilter.Clone();
          break;
        case ResultsOneofCase.ClearFilter:
          ClearFilter = other.ClearFilter.Clone();
          break;
        case ResultsOneofCase.FilteredBlockRequest:
          FilteredBlockRequest = other.FilteredBlockRequest.Clone();
          break;
        case ResultsOneofCase.FilteredBlock:
          FilteredBlock = other.FilteredBlock.Clone();
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event Clone() {
      return new Event(this);
    }

    /// <summary>Field number for the "block" field.</summary>
    public const int BlockFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.Block Block {
      get { return resultsCase_ == ResultsOneofCase.Block ? (global::Core.Block) results_ : null; }
      set {
        results_ = value;
        resultsCase_ = value == null ? ResultsOneofCase.None : ResultsOneofCase.Block;
      }
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.TransactionUnion Transaction {
      get { return resultsCase_ == ResultsOneofCase.Transaction ? (global::Core.TransactionUnion) results_ : null; }
      set {
        results_ = value;
        resultsCase_ = value == null ? ResultsOneofCase.None : ResultsOneofCase.Transaction;
      }
    }

    /// <summary>Field number for the "announce" field.</summary>
    public const int AnnounceFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.Announce Announce {
      get { return resultsCase_ == ResultsOneofCase.Announce ? (global::Core.Announce) results_ : null; }
      set {
        results_ = value;
        resultsCase_ = value == null ? ResultsOneofCase.None : ResultsOneofCase.Announce;
      }
    }

    /// <summary>Field number for the "heartbeat" field.</summary>
    public const int HeartbeatFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.Heartbeat Heartbeat {
      get { return resultsCase_ == ResultsOneofCase.Heartbeat ? (global::Core.Heartbeat) results_ : null; }
      set {
        results_ = value;
        resultsCase_ = value == null ? ResultsOneofCase.None : ResultsOneofCase.Heartbeat;
      }
    }

    /// <summary>Field number for the "block_query" field.</summary>
    public const int BlockQueryFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.BlockQuery BlockQuery {
      get { return resultsCase_ == ResultsOneofCase.BlockQuery ? (global::Core.BlockQuery) results_ : null; }
      set {
        results_ = value;
        resultsCase_ = value == null ? ResultsOneofCase.None : ResultsOneofCase.BlockQuery;
      }
    }

    /// <summary>Field number for the "block_query_reply" field.</summary>
    public const int BlockQueryReplyFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.BlockQueryReply BlockQueryReply {
      get { return resultsCase_ == ResultsOneofCase.BlockQueryReply ? (global::Core.BlockQueryReply) results_ : null; }
      set {
        results_ = value;
        resultsCase_ = value == null ? ResultsOneofCase.None : ResultsOneofCase.BlockQueryReply;
      }
    }

    /// <summary>Field number for the "network_info_request" field.</summary>
    public const int NetworkInfoRequestFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.NetworkInfoRequest NetworkInfoRequest {
      get { return resultsCase_ == ResultsOneofCase.NetworkInfoRequest ? (global::Core.NetworkInfoRequest) results_ : null; }
      set {
        results_ = value;
        resultsCase_ = value == null ? ResultsOneofCase.None : ResultsOneofCase.NetworkInfoRequest;
      }
    }

    /// <summary>Field number for the "network_info_reply" field.</summary>
    public const int NetworkInfoReplyFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.NetworkInfoReply NetworkInfoReply {
      get { return resultsCase_ == ResultsOneofCase.NetworkInfoReply ? (global::Core.NetworkInfoReply) results_ : null; }
      set {
        results_ = value;
        resultsCase_ = value == null ? ResultsOneofCase.None : ResultsOneofCase.NetworkInfoReply;
      }
    }

    /// <summary>Field number for the "acknowledgement" field.</summary>
    public const int AcknowledgementFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.Acknowledgement Acknowledgement {
      get { return resultsCase_ == ResultsOneofCase.Acknowledgement ? (global::Core.Acknowledgement) results_ : null; }
      set {
        results_ = value;
        resultsCase_ = value == null ? ResultsOneofCase.None : ResultsOneofCase.Acknowledgement;
      }
    }

    /// <summary>Field number for the "advertise_blocks" field.</summary>
    public const int AdvertiseBlocksFieldNumber = 13;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.AdvertiseBlocks AdvertiseBlocks {
      get { return resultsCase_ == ResultsOneofCase.AdvertiseBlocks ? (global::Core.AdvertiseBlocks) results_ : null; }
      set {
        results_ = value;
        resultsCase_ = value == null ? ResultsOneofCase.None : ResultsOneofCase.AdvertiseBlocks;
      }
    }

    /// <summary>Field number for the "block_request" field.</summary>
    public const int BlockRequestFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.BlockRequest BlockRequest {
      get { return resultsCase_ == ResultsOneofCase.BlockRequest ? (global::Core.BlockRequest) results_ : null; }
      set {
        results_ = value;
        resultsCase_ = value == null ? ResultsOneofCase.None : ResultsOneofCase.BlockRequest;
      }
    }

    /// <summary>Field number for the "keystone_query" field.</summary>
    public const int KeystoneQueryFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.KeystoneQuery KeystoneQuery {
      get { return resultsCase_ == ResultsOneofCase.KeystoneQuery ? (global::Core.KeystoneQuery) results_ : null; }
      set {
        results_ = value;
        resultsCase_ = value == null ? ResultsOneofCase.None : ResultsOneofCase.KeystoneQuery;
      }
    }

    /// <summary>Field number for the "advertise_tx" field.</summary>
    public const int AdvertiseTxFieldNumber = 16;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.AdvertiseTransaction AdvertiseTx {
      get { return resultsCase_ == ResultsOneofCase.AdvertiseTx ? (global::Core.AdvertiseTransaction) results_ : null; }
      set {
        results_ = value;
        resultsCase_ = value == null ? ResultsOneofCase.None : ResultsOneofCase.AdvertiseTx;
      }
    }

    /// <summary>Field number for the "tx_request" field.</summary>
    public const int TxRequestFieldNumber = 17;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.TransactionRequest TxRequest {
      get { return resultsCase_ == ResultsOneofCase.TxRequest ? (global::Core.TransactionRequest) results_ : null; }
      set {
        results_ = value;
        resultsCase_ = value == null ? ResultsOneofCase.None : ResultsOneofCase.TxRequest;
      }
    }

    /// <summary>Field number for the "not_found" field.</summary>
    public const int NotFoundFieldNumber = 18;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.NotFound NotFound {
      get { return resultsCase_ == ResultsOneofCase.NotFound ? (global::Core.NotFound) results_ : null; }
      set {
        results_ = value;
        resultsCase_ = value == null ? ResultsOneofCase.None : ResultsOneofCase.NotFound;
      }
    }

    /// <summary>Field number for the "create_filter" field.</summary>
    public const int CreateFilterFieldNumber = 19;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.CreateFilter CreateFilter {
      get { return resultsCase_ == ResultsOneofCase.CreateFilter ? (global::Core.CreateFilter) results_ : null; }
      set {
        results_ = value;
        resultsCase_ = value == null ? ResultsOneofCase.None : ResultsOneofCase.CreateFilter;
      }
    }

    /// <summary>Field number for the "add_filter" field.</summary>
    public const int AddFilterFieldNumber = 20;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.AddFilter AddFilter {
      get { return resultsCase_ == ResultsOneofCase.AddFilter ? (global::Core.AddFilter) results_ : null; }
      set {
        results_ = value;
        resultsCase_ = value == null ? ResultsOneofCase.None : ResultsOneofCase.AddFilter;
      }
    }

    /// <summary>Field number for the "clear_filter" field.</summary>
    public const int ClearFilterFieldNumber = 21;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.ClearFilter ClearFilter {
      get { return resultsCase_ == ResultsOneofCase.ClearFilter ? (global::Core.ClearFilter) results_ : null; }
      set {
        results_ = value;
        resultsCase_ = value == null ? ResultsOneofCase.None : ResultsOneofCase.ClearFilter;
      }
    }

    /// <summary>Field number for the "filtered_block_request" field.</summary>
    public const int FilteredBlockRequestFieldNumber = 22;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.BlockRequest FilteredBlockRequest {
      get { return resultsCase_ == ResultsOneofCase.FilteredBlockRequest ? (global::Core.BlockRequest) results_ : null; }
      set {
        results_ = value;
        resultsCase_ = value == null ? ResultsOneofCase.None : ResultsOneofCase.FilteredBlockRequest;
      }
    }

    /// <summary>Field number for the "filtered_block" field.</summary>
    public const int FilteredBlockFieldNumber = 23;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.FilteredBlock FilteredBlock {
      get { return resultsCase_ == ResultsOneofCase.FilteredBlock ? (global::Core.FilteredBlock) results_ : null; }
      set {
        results_ = value;
        resultsCase_ = value == null ? ResultsOneofCase.None : ResultsOneofCase.FilteredBlock;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 11;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "acknowledge" field.</summary>
    public const int AcknowledgeFieldNumber = 12;
    private bool acknowledge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Acknowledge {
      get { return acknowledge_; }
      set {
        acknowledge_ = value;
      }
    }

    private object results_;
    /// <summary>Enum of possible cases for the "results" oneof.</summary>
    public enum ResultsOneofCase {
      None = 0,
      Block = 1,
      Transaction = 2,
      Announce = 3,
      Heartbeat = 4,
      BlockQuery = 5,
      BlockQueryReply = 6,
      NetworkInfoRequest = 8,
      NetworkInfoReply = 9,
      Acknowledgement = 10,
      AdvertiseBlocks = 13,
      BlockRequest = 14,
      KeystoneQuery = 15,
      AdvertiseTx = 16,
      TxRequest = 17,
      NotFound = 18,
      CreateFilter = 19,
      AddFilter = 20,
      ClearFilter = 21,
      FilteredBlockRequest = 22,
      FilteredBlock = 23,
    }
    private ResultsOneofCase resultsCase_ = ResultsOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ResultsOneofCase ResultsCase {
      get { return resultsCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearResults() {
      resultsCase_ = ResultsOneofCase.None;
      results_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Block, other.Block)) return false;
      if (!object.Equals(Transaction, other.Transaction)) return false;
      if (!object.Equals(Announce, other.Announce)) return false;
      if (!object.Equals(Heartbeat, other.Heartbeat)) return false;
      if (!object.Equals(BlockQuery, other.BlockQuery)) return false;
      if (!object.Equals(BlockQueryReply, other.BlockQueryReply)) return false;
      if (!object.Equals(NetworkInfoRequest, other.NetworkInfoRequest)) return false;
      if (!object.Equals(NetworkInfoReply, other.NetworkInfoReply)) return false;
      if (!object.Equals(Acknowledgement, other.Acknowledgement)) return false;
      if (!object.Equals(AdvertiseBlocks, other.AdvertiseBlocks)) return false;
      if (!object.Equals(BlockRequest, other.BlockRequest)) return false;
      if (!object.Equals(KeystoneQuery, other.KeystoneQuery)) return false;
      if (!object.Equals(AdvertiseTx, other.AdvertiseTx)) return false;
      if (!object.Equals(TxRequest, other.TxRequest)) return false;
      if (!object.Equals(NotFound, other.NotFound)) return false;
      if (!object.Equals(CreateFilter, other.CreateFilter)) return false;
      if (!object.Equals(AddFilter, other.AddFilter)) return false;
      if (!object.Equals(ClearFilter, other.ClearFilter)) return false;
      if (!object.Equals(FilteredBlockRequest, other.FilteredBlockRequest)) return false;
      if (!object.Equals(FilteredBlock, other.FilteredBlock)) return false;
      if (Id != other.Id) return false;
      if (Acknowledge != other.Acknowledge) return false;
      if (ResultsCase != other.ResultsCase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (resultsCase_ == ResultsOneofCase.Block) hash ^= Block.GetHashCode();
      if (resultsCase_ == ResultsOneofCase.Transaction) hash ^= Transaction.GetHashCode();
      if (resultsCase_ == ResultsOneofCase.Announce) hash ^= Announce.GetHashCode();
      if (resultsCase_ == ResultsOneofCase.Heartbeat) hash ^= Heartbeat.GetHashCode();
      if (resultsCase_ == ResultsOneofCase.BlockQuery) hash ^= BlockQuery.GetHashCode();
      if (resultsCase_ == ResultsOneofCase.BlockQueryReply) hash ^= BlockQueryReply.GetHashCode();
      if (resultsCase_ == ResultsOneofCase.NetworkInfoRequest) hash ^= NetworkInfoRequest.GetHashCode();
      if (resultsCase_ == ResultsOneofCase.NetworkInfoReply) hash ^= NetworkInfoReply.GetHashCode();
      if (resultsCase_ == ResultsOneofCase.Acknowledgement) hash ^= Acknowledgement.GetHashCode();
      if (resultsCase_ == ResultsOneofCase.AdvertiseBlocks) hash ^= AdvertiseBlocks.GetHashCode();
      if (resultsCase_ == ResultsOneofCase.BlockRequest) hash ^= BlockRequest.GetHashCode();
      if (resultsCase_ == ResultsOneofCase.KeystoneQuery) hash ^= KeystoneQuery.GetHashCode();
      if (resultsCase_ == ResultsOneofCase.AdvertiseTx) hash ^= AdvertiseTx.GetHashCode();
      if (resultsCase_ == ResultsOneofCase.TxRequest) hash ^= TxRequest.GetHashCode();
      if (resultsCase_ == ResultsOneofCase.NotFound) hash ^= NotFound.GetHashCode();
      if (resultsCase_ == ResultsOneofCase.CreateFilter) hash ^= CreateFilter.GetHashCode();
      if (resultsCase_ == ResultsOneofCase.AddFilter) hash ^= AddFilter.GetHashCode();
      if (resultsCase_ == ResultsOneofCase.ClearFilter) hash ^= ClearFilter.GetHashCode();
      if (resultsCase_ == ResultsOneofCase.FilteredBlockRequest) hash ^= FilteredBlockRequest.GetHashCode();
      if (resultsCase_ == ResultsOneofCase.FilteredBlock) hash ^= FilteredBlock.GetHashCode();
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Acknowledge != false) hash ^= Acknowledge.GetHashCode();
      hash ^= (int) resultsCase_;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (resultsCase_ == ResultsOneofCase.Block) {
        output.WriteRawTag(10);
        output.WriteMessage(Block);
      }
      if (resultsCase_ == ResultsOneofCase.Transaction) {
        output.WriteRawTag(18);
        output.WriteMessage(Transaction);
      }
      if (resultsCase_ == ResultsOneofCase.Announce) {
        output.WriteRawTag(26);
        output.WriteMessage(Announce);
      }
      if (resultsCase_ == ResultsOneofCase.Heartbeat) {
        output.WriteRawTag(34);
        output.WriteMessage(Heartbeat);
      }
      if (resultsCase_ == ResultsOneofCase.BlockQuery) {
        output.WriteRawTag(42);
        output.WriteMessage(BlockQuery);
      }
      if (resultsCase_ == ResultsOneofCase.BlockQueryReply) {
        output.WriteRawTag(50);
        output.WriteMessage(BlockQueryReply);
      }
      if (resultsCase_ == ResultsOneofCase.NetworkInfoRequest) {
        output.WriteRawTag(66);
        output.WriteMessage(NetworkInfoRequest);
      }
      if (resultsCase_ == ResultsOneofCase.NetworkInfoReply) {
        output.WriteRawTag(74);
        output.WriteMessage(NetworkInfoReply);
      }
      if (resultsCase_ == ResultsOneofCase.Acknowledgement) {
        output.WriteRawTag(82);
        output.WriteMessage(Acknowledgement);
      }
      if (Id.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Id);
      }
      if (Acknowledge != false) {
        output.WriteRawTag(96);
        output.WriteBool(Acknowledge);
      }
      if (resultsCase_ == ResultsOneofCase.AdvertiseBlocks) {
        output.WriteRawTag(106);
        output.WriteMessage(AdvertiseBlocks);
      }
      if (resultsCase_ == ResultsOneofCase.BlockRequest) {
        output.WriteRawTag(114);
        output.WriteMessage(BlockRequest);
      }
      if (resultsCase_ == ResultsOneofCase.KeystoneQuery) {
        output.WriteRawTag(122);
        output.WriteMessage(KeystoneQuery);
      }
      if (resultsCase_ == ResultsOneofCase.AdvertiseTx) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(AdvertiseTx);
      }
      if (resultsCase_ == ResultsOneofCase.TxRequest) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(TxRequest);
      }
      if (resultsCase_ == ResultsOneofCase.NotFound) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(NotFound);
      }
      if (resultsCase_ == ResultsOneofCase.CreateFilter) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(CreateFilter);
      }
      if (resultsCase_ == ResultsOneofCase.AddFilter) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(AddFilter);
      }
      if (resultsCase_ == ResultsOneofCase.ClearFilter) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(ClearFilter);
      }
      if (resultsCase_ == ResultsOneofCase.FilteredBlockRequest) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(FilteredBlockRequest);
      }
      if (resultsCase_ == ResultsOneofCase.FilteredBlock) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(FilteredBlock);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (resultsCase_ == ResultsOneofCase.Block) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Block);
      }
      if (resultsCase_ == ResultsOneofCase.Transaction) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transaction);
      }
      if (resultsCase_ == ResultsOneofCase.Announce) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Announce);
      }
      if (resultsCase_ == ResultsOneofCase.Heartbeat) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Heartbeat);
      }
      if (resultsCase_ == ResultsOneofCase.BlockQuery) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockQuery);
      }
      if (resultsCase_ == ResultsOneofCase.BlockQueryReply) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockQueryReply);
      }
      if (resultsCase_ == ResultsOneofCase.NetworkInfoRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetworkInfoRequest);
      }
      if (resultsCase_ == ResultsOneofCase.NetworkInfoReply) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetworkInfoReply);
      }
      if (resultsCase_ == ResultsOneofCase.Acknowledgement) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Acknowledgement);
      }
      if (resultsCase_ == ResultsOneofCase.AdvertiseBlocks) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdvertiseBlocks);
      }
      if (resultsCase_ == ResultsOneofCase.BlockRequest) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockRequest);
      }
      if (resultsCase_ == ResultsOneofCase.KeystoneQuery) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(KeystoneQuery);
      }
      if (resultsCase_ == ResultsOneofCase.AdvertiseTx) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AdvertiseTx);
      }
      if (resultsCase_ == ResultsOneofCase.TxRequest) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TxRequest);
      }
      if (resultsCase_ == ResultsOneofCase.NotFound) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NotFound);
      }
      if (resultsCase_ == ResultsOneofCase.CreateFilter) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CreateFilter);
      }
      if (resultsCase_ == ResultsOneofCase.AddFilter) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AddFilter);
      }
      if (resultsCase_ == ResultsOneofCase.ClearFilter) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ClearFilter);
      }
      if (resultsCase_ == ResultsOneofCase.FilteredBlockRequest) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FilteredBlockRequest);
      }
      if (resultsCase_ == ResultsOneofCase.FilteredBlock) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FilteredBlock);
      }
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Acknowledge != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Event other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Acknowledge != false) {
        Acknowledge = other.Acknowledge;
      }
      switch (other.ResultsCase) {
        case ResultsOneofCase.Block:
          Block = other.Block;
          break;
        case ResultsOneofCase.Transaction:
          Transaction = other.Transaction;
          break;
        case ResultsOneofCase.Announce:
          Announce = other.Announce;
          break;
        case ResultsOneofCase.Heartbeat:
          Heartbeat = other.Heartbeat;
          break;
        case ResultsOneofCase.BlockQuery:
          BlockQuery = other.BlockQuery;
          break;
        case ResultsOneofCase.BlockQueryReply:
          BlockQueryReply = other.BlockQueryReply;
          break;
        case ResultsOneofCase.NetworkInfoRequest:
          NetworkInfoRequest = other.NetworkInfoRequest;
          break;
        case ResultsOneofCase.NetworkInfoReply:
          NetworkInfoReply = other.NetworkInfoReply;
          break;
        case ResultsOneofCase.Acknowledgement:
          Acknowledgement = other.Acknowledgement;
          break;
        case ResultsOneofCase.AdvertiseBlocks:
          AdvertiseBlocks = other.AdvertiseBlocks;
          break;
        case ResultsOneofCase.BlockRequest:
          BlockRequest = other.BlockRequest;
          break;
        case ResultsOneofCase.KeystoneQuery:
          KeystoneQuery = other.KeystoneQuery;
          break;
        case ResultsOneofCase.AdvertiseTx:
          AdvertiseTx = other.AdvertiseTx;
          break;
        case ResultsOneofCase.TxRequest:
          TxRequest = other.TxRequest;
          break;
        case ResultsOneofCase.NotFound:
          NotFound = other.NotFound;
          break;
        case ResultsOneofCase.CreateFilter:
          CreateFilter = other.CreateFilter;
          break;
        case ResultsOneofCase.AddFilter:
          AddFilter = other.AddFilter;
          break;
        case ResultsOneofCase.ClearFilter:
          ClearFilter = other.ClearFilter;
          break;
        case ResultsOneofCase.FilteredBlockRequest:
          FilteredBlockRequest = other.FilteredBlockRequest;
          break;
        case ResultsOneofCase.FilteredBlock:
          FilteredBlock = other.FilteredBlock;
          break;
      }

    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            global::Core.Block subBuilder = new global::Core.Block();
            if (resultsCase_ == ResultsOneofCase.Block) {
              subBuilder.MergeFrom(Block);
            }
            input.ReadMessage(subBuilder);
            Block = subBuilder;
            break;
          }
          case 18: {
            global::Core.TransactionUnion subBuilder = new global::Core.TransactionUnion();
            if (resultsCase_ == ResultsOneofCase.Transaction) {
              subBuilder.MergeFrom(Transaction);
            }
            input.ReadMessage(subBuilder);
            Transaction = subBuilder;
            break;
          }
          case 26: {
            global::Core.Announce subBuilder = new global::Core.Announce();
            if (resultsCase_ == ResultsOneofCase.Announce) {
              subBuilder.MergeFrom(Announce);
            }
            input.ReadMessage(subBuilder);
            Announce = subBuilder;
            break;
          }
          case 34: {
            global::Core.Heartbeat subBuilder = new global::Core.Heartbeat();
            if (resultsCase_ == ResultsOneofCase.Heartbeat) {
              subBuilder.MergeFrom(Heartbeat);
            }
            input.ReadMessage(subBuilder);
            Heartbeat = subBuilder;
            break;
          }
          case 42: {
            global::Core.BlockQuery subBuilder = new global::Core.BlockQuery();
            if (resultsCase_ == ResultsOneofCase.BlockQuery) {
              subBuilder.MergeFrom(BlockQuery);
            }
            input.ReadMessage(subBuilder);
            BlockQuery = subBuilder;
            break;
          }
          case 50: {
            global::Core.BlockQueryReply subBuilder = new global::Core.BlockQueryReply();
            if (resultsCase_ == ResultsOneofCase.BlockQueryReply) {
              subBuilder.MergeFrom(BlockQueryReply);
            }
            input.ReadMessage(subBuilder);
            BlockQueryReply = subBuilder;
            break;
          }
          case 66: {
            global::Core.NetworkInfoRequest subBuilder = new global::Core.NetworkInfoRequest();
            if (resultsCase_ == ResultsOneofCase.NetworkInfoRequest) {
              subBuilder.MergeFrom(NetworkInfoRequest);
            }
            input.ReadMessage(subBuilder);
            NetworkInfoRequest = subBuilder;
            break;
          }
          case 74: {
            global::Core.NetworkInfoReply subBuilder = new global::Core.NetworkInfoReply();
            if (resultsCase_ == ResultsOneofCase.NetworkInfoReply) {
              subBuilder.MergeFrom(NetworkInfoReply);
            }
            input.ReadMessage(subBuilder);
            NetworkInfoReply = subBuilder;
            break;
          }
          case 82: {
            global::Core.Acknowledgement subBuilder = new global::Core.Acknowledgement();
            if (resultsCase_ == ResultsOneofCase.Acknowledgement) {
              subBuilder.MergeFrom(Acknowledgement);
            }
            input.ReadMessage(subBuilder);
            Acknowledgement = subBuilder;
            break;
          }
          case 90: {
            Id = input.ReadString();
            break;
          }
          case 96: {
            Acknowledge = input.ReadBool();
            break;
          }
          case 106: {
            global::Core.AdvertiseBlocks subBuilder = new global::Core.AdvertiseBlocks();
            if (resultsCase_ == ResultsOneofCase.AdvertiseBlocks) {
              subBuilder.MergeFrom(AdvertiseBlocks);
            }
            input.ReadMessage(subBuilder);
            AdvertiseBlocks = subBuilder;
            break;
          }
          case 114: {
            global::Core.BlockRequest subBuilder = new global::Core.BlockRequest();
            if (resultsCase_ == ResultsOneofCase.BlockRequest) {
              subBuilder.MergeFrom(BlockRequest);
            }
            input.ReadMessage(subBuilder);
            BlockRequest = subBuilder;
            break;
          }
          case 122: {
            global::Core.KeystoneQuery subBuilder = new global::Core.KeystoneQuery();
            if (resultsCase_ == ResultsOneofCase.KeystoneQuery) {
              subBuilder.MergeFrom(KeystoneQuery);
            }
            input.ReadMessage(subBuilder);
            KeystoneQuery = subBuilder;
            break;
          }
          case 130: {
            global::Core.AdvertiseTransaction subBuilder = new global::Core.AdvertiseTransaction();
            if (resultsCase_ == ResultsOneofCase.AdvertiseTx) {
              subBuilder.MergeFrom(AdvertiseTx);
            }
            input.ReadMessage(subBuilder);
            AdvertiseTx = subBuilder;
            break;
          }
          case 138: {
            global::Core.TransactionRequest subBuilder = new global::Core.TransactionRequest();
            if (resultsCase_ == ResultsOneofCase.TxRequest) {
              subBuilder.MergeFrom(TxRequest);
            }
            input.ReadMessage(subBuilder);
            TxRequest = subBuilder;
            break;
          }
          case 146: {
            global::Core.NotFound subBuilder = new global::Core.NotFound();
            if (resultsCase_ == ResultsOneofCase.NotFound) {
              subBuilder.MergeFrom(NotFound);
            }
            input.ReadMessage(subBuilder);
            NotFound = subBuilder;
            break;
          }
          case 154: {
            global::Core.CreateFilter subBuilder = new global::Core.CreateFilter();
            if (resultsCase_ == ResultsOneofCase.CreateFilter) {
              subBuilder.MergeFrom(CreateFilter);
            }
            input.ReadMessage(subBuilder);
            CreateFilter = subBuilder;
            break;
          }
          case 162: {
            global::Core.AddFilter subBuilder = new global::Core.AddFilter();
            if (resultsCase_ == ResultsOneofCase.AddFilter) {
              subBuilder.MergeFrom(AddFilter);
            }
            input.ReadMessage(subBuilder);
            AddFilter = subBuilder;
            break;
          }
          case 170: {
            global::Core.ClearFilter subBuilder = new global::Core.ClearFilter();
            if (resultsCase_ == ResultsOneofCase.ClearFilter) {
              subBuilder.MergeFrom(ClearFilter);
            }
            input.ReadMessage(subBuilder);
            ClearFilter = subBuilder;
            break;
          }
          case 178: {
            global::Core.BlockRequest subBuilder = new global::Core.BlockRequest();
            if (resultsCase_ == ResultsOneofCase.FilteredBlockRequest) {
              subBuilder.MergeFrom(FilteredBlockRequest);
            }
            input.ReadMessage(subBuilder);
            FilteredBlockRequest = subBuilder;
            break;
          }
          case 186: {
            global::Core.FilteredBlock subBuilder = new global::Core.FilteredBlock();
            if (resultsCase_ == ResultsOneofCase.FilteredBlock) {
              subBuilder.MergeFrom(FilteredBlock);
            }
            input.ReadMessage(subBuilder);
            FilteredBlock = subBuilder;
            break;
          }
        }
      }
    }

  }

  public sealed partial class NodeRequest : pb::IMessage<NodeRequest> {
    private static readonly pb::MessageParser<NodeRequest> _parser = new pb::MessageParser<NodeRequest>(() => new NodeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[76]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeRequest(NodeRequest other) : this() {
      endpoint_ = other.endpoint_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeRequest Clone() {
      return new NodeRequest(this);
    }

    /// <summary>Field number for the "endpoint" field.</summary>
    public const int EndpointFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Core.Endpoint> _repeated_endpoint_codec
        = pb::FieldCodec.ForMessage(10, global::Core.Endpoint.Parser);
    private readonly pbc::RepeatedField<global::Core.Endpoint> endpoint_ = new pbc::RepeatedField<global::Core.Endpoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Endpoint> Endpoint {
      get { return endpoint_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!endpoint_.Equals(other.endpoint_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= endpoint_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      endpoint_.WriteTo(output, _repeated_endpoint_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += endpoint_.CalculateSize(_repeated_endpoint_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeRequest other) {
      if (other == null) {
        return;
      }
      endpoint_.Add(other.endpoint_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            endpoint_.AddEntriesFrom(input, _repeated_endpoint_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StartPoolRequest : pb::IMessage<StartPoolRequest> {
    private static readonly pb::MessageParser<StartPoolRequest> _parser = new pb::MessageParser<StartPoolRequest>(() => new StartPoolRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartPoolRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[77]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartPoolRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartPoolRequest(StartPoolRequest other) : this() {
      type_ = other.type_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartPoolRequest Clone() {
      return new StartPoolRequest(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private pb::ByteString type_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartPoolRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartPoolRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Type);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Type);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartPoolRequest other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Type = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StartPoolReply : pb::IMessage<StartPoolReply> {
    private static readonly pb::MessageParser<StartPoolReply> _parser = new pb::MessageParser<StartPoolReply>(() => new StartPoolReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartPoolReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[78]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartPoolReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartPoolReply(StartPoolReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartPoolReply Clone() {
      return new StartPoolReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartPoolReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartPoolReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartPoolReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StopPoolRequest : pb::IMessage<StopPoolRequest> {
    private static readonly pb::MessageParser<StopPoolRequest> _parser = new pb::MessageParser<StopPoolRequest>(() => new StopPoolRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopPoolRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[79]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopPoolRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopPoolRequest(StopPoolRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopPoolRequest Clone() {
      return new StopPoolRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopPoolRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopPoolRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopPoolRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class StopPoolReply : pb::IMessage<StopPoolReply> {
    private static readonly pb::MessageParser<StopPoolReply> _parser = new pb::MessageParser<StopPoolReply>(() => new StopPoolReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopPoolReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[80]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopPoolReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopPoolReply(StopPoolReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopPoolReply Clone() {
      return new StopPoolReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopPoolReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopPoolReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopPoolReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RestartPoolWebServerRequest : pb::IMessage<RestartPoolWebServerRequest> {
    private static readonly pb::MessageParser<RestartPoolWebServerRequest> _parser = new pb::MessageParser<RestartPoolWebServerRequest>(() => new RestartPoolWebServerRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RestartPoolWebServerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[81]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestartPoolWebServerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestartPoolWebServerRequest(RestartPoolWebServerRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestartPoolWebServerRequest Clone() {
      return new RestartPoolWebServerRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RestartPoolWebServerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RestartPoolWebServerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RestartPoolWebServerRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RestartPoolWebServerReply : pb::IMessage<RestartPoolWebServerReply> {
    private static readonly pb::MessageParser<RestartPoolWebServerReply> _parser = new pb::MessageParser<RestartPoolWebServerReply>(() => new RestartPoolWebServerReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RestartPoolWebServerReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[82]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestartPoolWebServerReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestartPoolWebServerReply(RestartPoolWebServerReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RestartPoolWebServerReply Clone() {
      return new RestartPoolWebServerReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RestartPoolWebServerReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RestartPoolWebServerReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RestartPoolWebServerReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetPopRequest : pb::IMessage<GetPopRequest> {
    private static readonly pb::MessageParser<GetPopRequest> _parser = new pb::MessageParser<GetPopRequest>(() => new GetPopRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPopRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[83]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPopRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPopRequest(GetPopRequest other) : this() {
      blockNum_ = other.blockNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPopRequest Clone() {
      return new GetPopRequest(this);
    }

    /// <summary>Field number for the "block_num" field.</summary>
    public const int BlockNumFieldNumber = 1;
    private int blockNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockNum {
      get { return blockNum_; }
      set {
        blockNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPopRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPopRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockNum != other.BlockNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockNum != 0) hash ^= BlockNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BlockNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPopRequest other) {
      if (other == null) {
        return;
      }
      if (other.BlockNum != 0) {
        BlockNum = other.BlockNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BlockNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetPopReply : pb::IMessage<GetPopReply> {
    private static readonly pb::MessageParser<GetPopReply> _parser = new pb::MessageParser<GetPopReply>(() => new GetPopReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPopReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[84]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPopReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPopReply(GetPopReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      blockHeight_ = other.blockHeight_;
      version_ = other.version_;
      previousBlockHash_ = other.previousBlockHash_;
      secondPreviousBlockHash_ = other.secondPreviousBlockHash_;
      thirdPreviousBlockHash_ = other.thirdPreviousBlockHash_;
      merkleRoot_ = other.merkleRoot_;
      timestamp_ = other.timestamp_;
      encodedDifficulty_ = other.encodedDifficulty_;
      nonce_ = other.nonce_;
      popMinerAddress_ = other.popMinerAddress_;
      fullPop_ = other.fullPop_;
      LastKnownBlock = other.lastKnownBlock_ != null ? other.LastKnownBlock.Clone() : null;
      lastKnownBlockContext_ = other.lastKnownBlockContext_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPopReply Clone() {
      return new GetPopReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "block_height" field.</summary>
    public const int BlockHeightFieldNumber = 3;
    private int blockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockHeight {
      get { return blockHeight_; }
      set {
        blockHeight_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "previous_block_hash" field.</summary>
    public const int PreviousBlockHashFieldNumber = 5;
    private pb::ByteString previousBlockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PreviousBlockHash {
      get { return previousBlockHash_; }
      set {
        previousBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "second_previous_block_hash" field.</summary>
    public const int SecondPreviousBlockHashFieldNumber = 6;
    private pb::ByteString secondPreviousBlockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SecondPreviousBlockHash {
      get { return secondPreviousBlockHash_; }
      set {
        secondPreviousBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "third_previous_block_hash" field.</summary>
    public const int ThirdPreviousBlockHashFieldNumber = 7;
    private pb::ByteString thirdPreviousBlockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ThirdPreviousBlockHash {
      get { return thirdPreviousBlockHash_; }
      set {
        thirdPreviousBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "merkle_root" field.</summary>
    public const int MerkleRootFieldNumber = 8;
    private pb::ByteString merkleRoot_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MerkleRoot {
      get { return merkleRoot_; }
      set {
        merkleRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 9;
    private int timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "encoded_difficulty" field.</summary>
    public const int EncodedDifficultyFieldNumber = 10;
    private int encodedDifficulty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EncodedDifficulty {
      get { return encodedDifficulty_; }
      set {
        encodedDifficulty_ = value;
      }
    }

    /// <summary>Field number for the "nonce" field.</summary>
    public const int NonceFieldNumber = 11;
    private int nonce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Nonce {
      get { return nonce_; }
      set {
        nonce_ = value;
      }
    }

    /// <summary>Field number for the "pop_miner_address" field.</summary>
    public const int PopMinerAddressFieldNumber = 12;
    private pb::ByteString popMinerAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PopMinerAddress {
      get { return popMinerAddress_; }
      set {
        popMinerAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "full_pop" field.</summary>
    public const int FullPopFieldNumber = 13;
    private pb::ByteString fullPop_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString FullPop {
      get { return fullPop_; }
      set {
        fullPop_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_known_block" field.</summary>
    public const int LastKnownBlockFieldNumber = 14;
    private global::Core.BitcoinBlockHeader lastKnownBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.BitcoinBlockHeader LastKnownBlock {
      get { return lastKnownBlock_; }
      set {
        lastKnownBlock_ = value;
      }
    }

    /// <summary>Field number for the "last_known_block_context" field.</summary>
    public const int LastKnownBlockContextFieldNumber = 15;
    private static readonly pb::FieldCodec<global::Core.BitcoinBlockHeader> _repeated_lastKnownBlockContext_codec
        = pb::FieldCodec.ForMessage(122, global::Core.BitcoinBlockHeader.Parser);
    private readonly pbc::RepeatedField<global::Core.BitcoinBlockHeader> lastKnownBlockContext_ = new pbc::RepeatedField<global::Core.BitcoinBlockHeader>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.BitcoinBlockHeader> LastKnownBlockContext {
      get { return lastKnownBlockContext_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPopReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPopReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if (BlockHeight != other.BlockHeight) return false;
      if (Version != other.Version) return false;
      if (PreviousBlockHash != other.PreviousBlockHash) return false;
      if (SecondPreviousBlockHash != other.SecondPreviousBlockHash) return false;
      if (ThirdPreviousBlockHash != other.ThirdPreviousBlockHash) return false;
      if (MerkleRoot != other.MerkleRoot) return false;
      if (Timestamp != other.Timestamp) return false;
      if (EncodedDifficulty != other.EncodedDifficulty) return false;
      if (Nonce != other.Nonce) return false;
      if (PopMinerAddress != other.PopMinerAddress) return false;
      if (FullPop != other.FullPop) return false;
      if (!object.Equals(LastKnownBlock, other.LastKnownBlock)) return false;
      if(!lastKnownBlockContext_.Equals(other.lastKnownBlockContext_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      if (BlockHeight != 0) hash ^= BlockHeight.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (PreviousBlockHash.Length != 0) hash ^= PreviousBlockHash.GetHashCode();
      if (SecondPreviousBlockHash.Length != 0) hash ^= SecondPreviousBlockHash.GetHashCode();
      if (ThirdPreviousBlockHash.Length != 0) hash ^= ThirdPreviousBlockHash.GetHashCode();
      if (MerkleRoot.Length != 0) hash ^= MerkleRoot.GetHashCode();
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (EncodedDifficulty != 0) hash ^= EncodedDifficulty.GetHashCode();
      if (Nonce != 0) hash ^= Nonce.GetHashCode();
      if (PopMinerAddress.Length != 0) hash ^= PopMinerAddress.GetHashCode();
      if (FullPop.Length != 0) hash ^= FullPop.GetHashCode();
      if (lastKnownBlock_ != null) hash ^= LastKnownBlock.GetHashCode();
      hash ^= lastKnownBlockContext_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      if (BlockHeight != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BlockHeight);
      }
      if (Version != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Version);
      }
      if (PreviousBlockHash.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(PreviousBlockHash);
      }
      if (SecondPreviousBlockHash.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(SecondPreviousBlockHash);
      }
      if (ThirdPreviousBlockHash.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(ThirdPreviousBlockHash);
      }
      if (MerkleRoot.Length != 0) {
        output.WriteRawTag(66);
        output.WriteBytes(MerkleRoot);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Timestamp);
      }
      if (EncodedDifficulty != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(EncodedDifficulty);
      }
      if (Nonce != 0) {
        output.WriteRawTag(88);
        output.WriteSInt32(Nonce);
      }
      if (PopMinerAddress.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(PopMinerAddress);
      }
      if (FullPop.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(FullPop);
      }
      if (lastKnownBlock_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(LastKnownBlock);
      }
      lastKnownBlockContext_.WriteTo(output, _repeated_lastKnownBlockContext_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      if (BlockHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockHeight);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (PreviousBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PreviousBlockHash);
      }
      if (SecondPreviousBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SecondPreviousBlockHash);
      }
      if (ThirdPreviousBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ThirdPreviousBlockHash);
      }
      if (MerkleRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MerkleRoot);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      if (EncodedDifficulty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EncodedDifficulty);
      }
      if (Nonce != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(Nonce);
      }
      if (PopMinerAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PopMinerAddress);
      }
      if (FullPop.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(FullPop);
      }
      if (lastKnownBlock_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastKnownBlock);
      }
      size += lastKnownBlockContext_.CalculateSize(_repeated_lastKnownBlockContext_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPopReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      if (other.BlockHeight != 0) {
        BlockHeight = other.BlockHeight;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.PreviousBlockHash.Length != 0) {
        PreviousBlockHash = other.PreviousBlockHash;
      }
      if (other.SecondPreviousBlockHash.Length != 0) {
        SecondPreviousBlockHash = other.SecondPreviousBlockHash;
      }
      if (other.ThirdPreviousBlockHash.Length != 0) {
        ThirdPreviousBlockHash = other.ThirdPreviousBlockHash;
      }
      if (other.MerkleRoot.Length != 0) {
        MerkleRoot = other.MerkleRoot;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.EncodedDifficulty != 0) {
        EncodedDifficulty = other.EncodedDifficulty;
      }
      if (other.Nonce != 0) {
        Nonce = other.Nonce;
      }
      if (other.PopMinerAddress.Length != 0) {
        PopMinerAddress = other.PopMinerAddress;
      }
      if (other.FullPop.Length != 0) {
        FullPop = other.FullPop;
      }
      if (other.lastKnownBlock_ != null) {
        if (lastKnownBlock_ == null) {
          lastKnownBlock_ = new global::Core.BitcoinBlockHeader();
        }
        LastKnownBlock.MergeFrom(other.LastKnownBlock);
      }
      lastKnownBlockContext_.Add(other.lastKnownBlockContext_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 24: {
            BlockHeight = input.ReadInt32();
            break;
          }
          case 32: {
            Version = input.ReadInt32();
            break;
          }
          case 42: {
            PreviousBlockHash = input.ReadBytes();
            break;
          }
          case 50: {
            SecondPreviousBlockHash = input.ReadBytes();
            break;
          }
          case 58: {
            ThirdPreviousBlockHash = input.ReadBytes();
            break;
          }
          case 66: {
            MerkleRoot = input.ReadBytes();
            break;
          }
          case 72: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 80: {
            EncodedDifficulty = input.ReadInt32();
            break;
          }
          case 88: {
            Nonce = input.ReadSInt32();
            break;
          }
          case 98: {
            PopMinerAddress = input.ReadBytes();
            break;
          }
          case 106: {
            FullPop = input.ReadBytes();
            break;
          }
          case 114: {
            if (lastKnownBlock_ == null) {
              lastKnownBlock_ = new global::Core.BitcoinBlockHeader();
            }
            input.ReadMessage(lastKnownBlock_);
            break;
          }
          case 122: {
            lastKnownBlockContext_.AddEntriesFrom(input, _repeated_lastKnownBlockContext_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetInfoRequest : pb::IMessage<GetInfoRequest> {
    private static readonly pb::MessageParser<GetInfoRequest> _parser = new pb::MessageParser<GetInfoRequest>(() => new GetInfoRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[85]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoRequest(GetInfoRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoRequest Clone() {
      return new GetInfoRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetInfoRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetDiagnosticInfoRequest : pb::IMessage<GetDiagnosticInfoRequest> {
    private static readonly pb::MessageParser<GetDiagnosticInfoRequest> _parser = new pb::MessageParser<GetDiagnosticInfoRequest>(() => new GetDiagnosticInfoRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDiagnosticInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[86]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDiagnosticInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDiagnosticInfoRequest(GetDiagnosticInfoRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDiagnosticInfoRequest Clone() {
      return new GetDiagnosticInfoRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDiagnosticInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDiagnosticInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDiagnosticInfoRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetBalanceRequest : pb::IMessage<GetBalanceRequest> {
    private static readonly pb::MessageParser<GetBalanceRequest> _parser = new pb::MessageParser<GetBalanceRequest>(() => new GetBalanceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBalanceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[87]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceRequest(GetBalanceRequest other) : this() {
      addresses_ = other.addresses_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceRequest Clone() {
      return new GetBalanceRequest(this);
    }

    /// <summary>Field number for the "addresses" field.</summary>
    public const int AddressesFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_addresses_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> addresses_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Addresses {
      get { return addresses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBalanceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBalanceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!addresses_.Equals(other.addresses_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= addresses_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      addresses_.WriteTo(output, _repeated_addresses_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += addresses_.CalculateSize(_repeated_addresses_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBalanceRequest other) {
      if (other == null) {
        return;
      }
      addresses_.Add(other.addresses_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            addresses_.AddEntriesFrom(input, _repeated_addresses_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBalanceReply : pb::IMessage<GetBalanceReply> {
    private static readonly pb::MessageParser<GetBalanceReply> _parser = new pb::MessageParser<GetBalanceReply>(() => new GetBalanceReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBalanceReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[88]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceReply(GetBalanceReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      confirmed_ = other.confirmed_.Clone();
      unconfirmed_ = other.unconfirmed_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceReply Clone() {
      return new GetBalanceReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "confirmed" field.</summary>
    public const int ConfirmedFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Core.AddressBalance> _repeated_confirmed_codec
        = pb::FieldCodec.ForMessage(26, global::Core.AddressBalance.Parser);
    private readonly pbc::RepeatedField<global::Core.AddressBalance> confirmed_ = new pbc::RepeatedField<global::Core.AddressBalance>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.AddressBalance> Confirmed {
      get { return confirmed_; }
    }

    /// <summary>Field number for the "unconfirmed" field.</summary>
    public const int UnconfirmedFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Core.Output> _repeated_unconfirmed_codec
        = pb::FieldCodec.ForMessage(34, global::Core.Output.Parser);
    private readonly pbc::RepeatedField<global::Core.Output> unconfirmed_ = new pbc::RepeatedField<global::Core.Output>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Output> Unconfirmed {
      get { return unconfirmed_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBalanceReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBalanceReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if(!confirmed_.Equals(other.confirmed_)) return false;
      if(!unconfirmed_.Equals(other.unconfirmed_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      hash ^= confirmed_.GetHashCode();
      hash ^= unconfirmed_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      confirmed_.WriteTo(output, _repeated_confirmed_codec);
      unconfirmed_.WriteTo(output, _repeated_unconfirmed_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      size += confirmed_.CalculateSize(_repeated_confirmed_codec);
      size += unconfirmed_.CalculateSize(_repeated_unconfirmed_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBalanceReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      confirmed_.Add(other.confirmed_);
      unconfirmed_.Add(other.unconfirmed_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            confirmed_.AddEntriesFrom(input, _repeated_confirmed_codec);
            break;
          }
          case 34: {
            unconfirmed_.AddEntriesFrom(input, _repeated_unconfirmed_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubmitPopRequest : pb::IMessage<SubmitPopRequest> {
    private static readonly pb::MessageParser<SubmitPopRequest> _parser = new pb::MessageParser<SubmitPopRequest>(() => new SubmitPopRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubmitPopRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[89]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitPopRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitPopRequest(SubmitPopRequest other) : this() {
      endorsedBlockHeader_ = other.endorsedBlockHeader_;
      bitcoinTransaction_ = other.bitcoinTransaction_;
      bitcoinMerklePathToRoot_ = other.bitcoinMerklePathToRoot_;
      BitcoinBlockHeaderOfProof = other.bitcoinBlockHeaderOfProof_ != null ? other.BitcoinBlockHeaderOfProof.Clone() : null;
      contextBitcoinBlockHeaders_ = other.contextBitcoinBlockHeaders_.Clone();
      address_ = other.address_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitPopRequest Clone() {
      return new SubmitPopRequest(this);
    }

    /// <summary>Field number for the "endorsed_block_header" field.</summary>
    public const int EndorsedBlockHeaderFieldNumber = 1;
    private pb::ByteString endorsedBlockHeader_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EndorsedBlockHeader {
      get { return endorsedBlockHeader_; }
      set {
        endorsedBlockHeader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bitcoin_transaction" field.</summary>
    public const int BitcoinTransactionFieldNumber = 2;
    private pb::ByteString bitcoinTransaction_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BitcoinTransaction {
      get { return bitcoinTransaction_; }
      set {
        bitcoinTransaction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bitcoin_merkle_path_to_root" field.</summary>
    public const int BitcoinMerklePathToRootFieldNumber = 3;
    private pb::ByteString bitcoinMerklePathToRoot_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BitcoinMerklePathToRoot {
      get { return bitcoinMerklePathToRoot_; }
      set {
        bitcoinMerklePathToRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bitcoin_block_header_of_proof" field.</summary>
    public const int BitcoinBlockHeaderOfProofFieldNumber = 4;
    private global::Core.BitcoinBlockHeader bitcoinBlockHeaderOfProof_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.BitcoinBlockHeader BitcoinBlockHeaderOfProof {
      get { return bitcoinBlockHeaderOfProof_; }
      set {
        bitcoinBlockHeaderOfProof_ = value;
      }
    }

    /// <summary>Field number for the "context_bitcoin_block_headers" field.</summary>
    public const int ContextBitcoinBlockHeadersFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Core.BitcoinBlockHeader> _repeated_contextBitcoinBlockHeaders_codec
        = pb::FieldCodec.ForMessage(42, global::Core.BitcoinBlockHeader.Parser);
    private readonly pbc::RepeatedField<global::Core.BitcoinBlockHeader> contextBitcoinBlockHeaders_ = new pbc::RepeatedField<global::Core.BitcoinBlockHeader>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.BitcoinBlockHeader> ContextBitcoinBlockHeaders {
      get { return contextBitcoinBlockHeaders_; }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 6;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubmitPopRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubmitPopRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EndorsedBlockHeader != other.EndorsedBlockHeader) return false;
      if (BitcoinTransaction != other.BitcoinTransaction) return false;
      if (BitcoinMerklePathToRoot != other.BitcoinMerklePathToRoot) return false;
      if (!object.Equals(BitcoinBlockHeaderOfProof, other.BitcoinBlockHeaderOfProof)) return false;
      if(!contextBitcoinBlockHeaders_.Equals(other.contextBitcoinBlockHeaders_)) return false;
      if (Address != other.Address) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EndorsedBlockHeader.Length != 0) hash ^= EndorsedBlockHeader.GetHashCode();
      if (BitcoinTransaction.Length != 0) hash ^= BitcoinTransaction.GetHashCode();
      if (BitcoinMerklePathToRoot.Length != 0) hash ^= BitcoinMerklePathToRoot.GetHashCode();
      if (bitcoinBlockHeaderOfProof_ != null) hash ^= BitcoinBlockHeaderOfProof.GetHashCode();
      hash ^= contextBitcoinBlockHeaders_.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EndorsedBlockHeader.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EndorsedBlockHeader);
      }
      if (BitcoinTransaction.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(BitcoinTransaction);
      }
      if (BitcoinMerklePathToRoot.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(BitcoinMerklePathToRoot);
      }
      if (bitcoinBlockHeaderOfProof_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BitcoinBlockHeaderOfProof);
      }
      contextBitcoinBlockHeaders_.WriteTo(output, _repeated_contextBitcoinBlockHeaders_codec);
      if (Address.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Address);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EndorsedBlockHeader.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EndorsedBlockHeader);
      }
      if (BitcoinTransaction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BitcoinTransaction);
      }
      if (BitcoinMerklePathToRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BitcoinMerklePathToRoot);
      }
      if (bitcoinBlockHeaderOfProof_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BitcoinBlockHeaderOfProof);
      }
      size += contextBitcoinBlockHeaders_.CalculateSize(_repeated_contextBitcoinBlockHeaders_codec);
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubmitPopRequest other) {
      if (other == null) {
        return;
      }
      if (other.EndorsedBlockHeader.Length != 0) {
        EndorsedBlockHeader = other.EndorsedBlockHeader;
      }
      if (other.BitcoinTransaction.Length != 0) {
        BitcoinTransaction = other.BitcoinTransaction;
      }
      if (other.BitcoinMerklePathToRoot.Length != 0) {
        BitcoinMerklePathToRoot = other.BitcoinMerklePathToRoot;
      }
      if (other.bitcoinBlockHeaderOfProof_ != null) {
        if (bitcoinBlockHeaderOfProof_ == null) {
          bitcoinBlockHeaderOfProof_ = new global::Core.BitcoinBlockHeader();
        }
        BitcoinBlockHeaderOfProof.MergeFrom(other.BitcoinBlockHeaderOfProof);
      }
      contextBitcoinBlockHeaders_.Add(other.contextBitcoinBlockHeaders_);
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EndorsedBlockHeader = input.ReadBytes();
            break;
          }
          case 18: {
            BitcoinTransaction = input.ReadBytes();
            break;
          }
          case 26: {
            BitcoinMerklePathToRoot = input.ReadBytes();
            break;
          }
          case 34: {
            if (bitcoinBlockHeaderOfProof_ == null) {
              bitcoinBlockHeaderOfProof_ = new global::Core.BitcoinBlockHeader();
            }
            input.ReadMessage(bitcoinBlockHeaderOfProof_);
            break;
          }
          case 42: {
            contextBitcoinBlockHeaders_.AddEntriesFrom(input, _repeated_contextBitcoinBlockHeaders_codec);
            break;
          }
          case 50: {
            Address = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PoPEndorsement : pb::IMessage<PoPEndorsement> {
    private static readonly pb::MessageParser<PoPEndorsement> _parser = new pb::MessageParser<PoPEndorsement>(() => new PoPEndorsement());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PoPEndorsement> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[90]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoPEndorsement() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoPEndorsement(PoPEndorsement other) : this() {
      endorsedBlockHeader_ = other.endorsedBlockHeader_;
      bitcoinTransaction_ = other.bitcoinTransaction_;
      bitcoinMerklePathToRoot_ = other.bitcoinMerklePathToRoot_;
      BitcoinBlockHeaderOfProof = other.bitcoinBlockHeaderOfProof_ != null ? other.BitcoinBlockHeaderOfProof.Clone() : null;
      address_ = other.address_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoPEndorsement Clone() {
      return new PoPEndorsement(this);
    }

    /// <summary>Field number for the "endorsed_block_header" field.</summary>
    public const int EndorsedBlockHeaderFieldNumber = 1;
    private pb::ByteString endorsedBlockHeader_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EndorsedBlockHeader {
      get { return endorsedBlockHeader_; }
      set {
        endorsedBlockHeader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bitcoin_transaction" field.</summary>
    public const int BitcoinTransactionFieldNumber = 2;
    private pb::ByteString bitcoinTransaction_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BitcoinTransaction {
      get { return bitcoinTransaction_; }
      set {
        bitcoinTransaction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bitcoin_merkle_path_to_root" field.</summary>
    public const int BitcoinMerklePathToRootFieldNumber = 3;
    private pb::ByteString bitcoinMerklePathToRoot_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BitcoinMerklePathToRoot {
      get { return bitcoinMerklePathToRoot_; }
      set {
        bitcoinMerklePathToRoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bitcoin_block_header_of_proof" field.</summary>
    public const int BitcoinBlockHeaderOfProofFieldNumber = 4;
    private global::Core.BitcoinBlockHeader bitcoinBlockHeaderOfProof_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.BitcoinBlockHeader BitcoinBlockHeaderOfProof {
      get { return bitcoinBlockHeaderOfProof_; }
      set {
        bitcoinBlockHeaderOfProof_ = value;
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 5;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PoPEndorsement);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PoPEndorsement other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EndorsedBlockHeader != other.EndorsedBlockHeader) return false;
      if (BitcoinTransaction != other.BitcoinTransaction) return false;
      if (BitcoinMerklePathToRoot != other.BitcoinMerklePathToRoot) return false;
      if (!object.Equals(BitcoinBlockHeaderOfProof, other.BitcoinBlockHeaderOfProof)) return false;
      if (Address != other.Address) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EndorsedBlockHeader.Length != 0) hash ^= EndorsedBlockHeader.GetHashCode();
      if (BitcoinTransaction.Length != 0) hash ^= BitcoinTransaction.GetHashCode();
      if (BitcoinMerklePathToRoot.Length != 0) hash ^= BitcoinMerklePathToRoot.GetHashCode();
      if (bitcoinBlockHeaderOfProof_ != null) hash ^= BitcoinBlockHeaderOfProof.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EndorsedBlockHeader.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(EndorsedBlockHeader);
      }
      if (BitcoinTransaction.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(BitcoinTransaction);
      }
      if (BitcoinMerklePathToRoot.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(BitcoinMerklePathToRoot);
      }
      if (bitcoinBlockHeaderOfProof_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BitcoinBlockHeaderOfProof);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(Address);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EndorsedBlockHeader.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EndorsedBlockHeader);
      }
      if (BitcoinTransaction.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BitcoinTransaction);
      }
      if (BitcoinMerklePathToRoot.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BitcoinMerklePathToRoot);
      }
      if (bitcoinBlockHeaderOfProof_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BitcoinBlockHeaderOfProof);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PoPEndorsement other) {
      if (other == null) {
        return;
      }
      if (other.EndorsedBlockHeader.Length != 0) {
        EndorsedBlockHeader = other.EndorsedBlockHeader;
      }
      if (other.BitcoinTransaction.Length != 0) {
        BitcoinTransaction = other.BitcoinTransaction;
      }
      if (other.BitcoinMerklePathToRoot.Length != 0) {
        BitcoinMerklePathToRoot = other.BitcoinMerklePathToRoot;
      }
      if (other.bitcoinBlockHeaderOfProof_ != null) {
        if (bitcoinBlockHeaderOfProof_ == null) {
          bitcoinBlockHeaderOfProof_ = new global::Core.BitcoinBlockHeader();
        }
        BitcoinBlockHeaderOfProof.MergeFrom(other.BitcoinBlockHeaderOfProof);
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            EndorsedBlockHeader = input.ReadBytes();
            break;
          }
          case 18: {
            BitcoinTransaction = input.ReadBytes();
            break;
          }
          case 26: {
            BitcoinMerklePathToRoot = input.ReadBytes();
            break;
          }
          case 34: {
            if (bitcoinBlockHeaderOfProof_ == null) {
              bitcoinBlockHeaderOfProof_ = new global::Core.BitcoinBlockHeader();
            }
            input.ReadMessage(bitcoinBlockHeaderOfProof_);
            break;
          }
          case 42: {
            Address = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetEndorsementsOfBlockRequest : pb::IMessage<GetEndorsementsOfBlockRequest> {
    private static readonly pb::MessageParser<GetEndorsementsOfBlockRequest> _parser = new pb::MessageParser<GetEndorsementsOfBlockRequest>(() => new GetEndorsementsOfBlockRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetEndorsementsOfBlockRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[91]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEndorsementsOfBlockRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEndorsementsOfBlockRequest(GetEndorsementsOfBlockRequest other) : this() {
      Filter = other.filter_ != null ? other.Filter.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEndorsementsOfBlockRequest Clone() {
      return new GetEndorsementsOfBlockRequest(this);
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 1;
    private global::Core.BlockFilter filter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.BlockFilter Filter {
      get { return filter_; }
      set {
        filter_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetEndorsementsOfBlockRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetEndorsementsOfBlockRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Filter, other.Filter)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (filter_ != null) hash ^= Filter.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (filter_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Filter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (filter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filter);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetEndorsementsOfBlockRequest other) {
      if (other == null) {
        return;
      }
      if (other.filter_ != null) {
        if (filter_ == null) {
          filter_ = new global::Core.BlockFilter();
        }
        Filter.MergeFrom(other.Filter);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (filter_ == null) {
              filter_ = new global::Core.BlockFilter();
            }
            input.ReadMessage(filter_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetEndorsementsOfBlockReply : pb::IMessage<GetEndorsementsOfBlockReply> {
    private static readonly pb::MessageParser<GetEndorsementsOfBlockReply> _parser = new pb::MessageParser<GetEndorsementsOfBlockReply>(() => new GetEndorsementsOfBlockReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetEndorsementsOfBlockReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[92]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEndorsementsOfBlockReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEndorsementsOfBlockReply(GetEndorsementsOfBlockReply other) : this() {
      success_ = other.success_;
      endorsements_ = other.endorsements_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEndorsementsOfBlockReply Clone() {
      return new GetEndorsementsOfBlockReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "endorsements" field.</summary>
    public const int EndorsementsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.PoPEndorsement> _repeated_endorsements_codec
        = pb::FieldCodec.ForMessage(18, global::Core.PoPEndorsement.Parser);
    private readonly pbc::RepeatedField<global::Core.PoPEndorsement> endorsements_ = new pbc::RepeatedField<global::Core.PoPEndorsement>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.PoPEndorsement> Endorsements {
      get { return endorsements_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetEndorsementsOfBlockReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetEndorsementsOfBlockReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!endorsements_.Equals(other.endorsements_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= endorsements_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      endorsements_.WriteTo(output, _repeated_endorsements_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += endorsements_.CalculateSize(_repeated_endorsements_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetEndorsementsOfBlockReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      endorsements_.Add(other.endorsements_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            endorsements_.AddEntriesFrom(input, _repeated_endorsements_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendCoinsRequest : pb::IMessage<SendCoinsRequest> {
    private static readonly pb::MessageParser<SendCoinsRequest> _parser = new pb::MessageParser<SendCoinsRequest>(() => new SendCoinsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendCoinsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[93]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCoinsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCoinsRequest(SendCoinsRequest other) : this() {
      sourceAddress_ = other.sourceAddress_;
      amounts_ = other.amounts_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCoinsRequest Clone() {
      return new SendCoinsRequest(this);
    }

    /// <summary>Field number for the "source_address" field.</summary>
    public const int SourceAddressFieldNumber = 1;
    private pb::ByteString sourceAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SourceAddress {
      get { return sourceAddress_; }
      set {
        sourceAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amounts" field.</summary>
    public const int AmountsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Output> _repeated_amounts_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Output.Parser);
    private readonly pbc::RepeatedField<global::Core.Output> amounts_ = new pbc::RepeatedField<global::Core.Output>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Output> Amounts {
      get { return amounts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendCoinsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendCoinsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceAddress != other.SourceAddress) return false;
      if(!amounts_.Equals(other.amounts_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourceAddress.Length != 0) hash ^= SourceAddress.GetHashCode();
      hash ^= amounts_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SourceAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(SourceAddress);
      }
      amounts_.WriteTo(output, _repeated_amounts_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourceAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SourceAddress);
      }
      size += amounts_.CalculateSize(_repeated_amounts_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendCoinsRequest other) {
      if (other == null) {
        return;
      }
      if (other.SourceAddress.Length != 0) {
        SourceAddress = other.SourceAddress;
      }
      amounts_.Add(other.amounts_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SourceAddress = input.ReadBytes();
            break;
          }
          case 18: {
            amounts_.AddEntriesFrom(input, _repeated_amounts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendCoinsReply : pb::IMessage<SendCoinsReply> {
    private static readonly pb::MessageParser<SendCoinsReply> _parser = new pb::MessageParser<SendCoinsReply>(() => new SendCoinsReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendCoinsReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[94]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCoinsReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCoinsReply(SendCoinsReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      txIds_ = other.txIds_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendCoinsReply Clone() {
      return new SendCoinsReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "tx_ids" field.</summary>
    public const int TxIdsFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_txIds_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> txIds_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> TxIds {
      get { return txIds_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendCoinsReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendCoinsReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if(!txIds_.Equals(other.txIds_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      hash ^= txIds_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      txIds_.WriteTo(output, _repeated_txIds_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      size += txIds_.CalculateSize(_repeated_txIds_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendCoinsReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      txIds_.Add(other.txIds_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            txIds_.AddEntriesFrom(input, _repeated_txIds_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendAltChainEndorsementRequest : pb::IMessage<SendAltChainEndorsementRequest> {
    private static readonly pb::MessageParser<SendAltChainEndorsementRequest> _parser = new pb::MessageParser<SendAltChainEndorsementRequest>(() => new SendAltChainEndorsementRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendAltChainEndorsementRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[95]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendAltChainEndorsementRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendAltChainEndorsementRequest(SendAltChainEndorsementRequest other) : this() {
      publicationData_ = other.publicationData_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendAltChainEndorsementRequest Clone() {
      return new SendAltChainEndorsementRequest(this);
    }

    /// <summary>Field number for the "publication_data" field.</summary>
    public const int PublicationDataFieldNumber = 1;
    private pb::ByteString publicationData_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicationData {
      get { return publicationData_; }
      set {
        publicationData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendAltChainEndorsementRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendAltChainEndorsementRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PublicationData != other.PublicationData) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PublicationData.Length != 0) hash ^= PublicationData.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PublicationData.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PublicationData);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PublicationData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicationData);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendAltChainEndorsementRequest other) {
      if (other == null) {
        return;
      }
      if (other.PublicationData.Length != 0) {
        PublicationData = other.PublicationData;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PublicationData = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SendAltChainEndorsementReply : pb::IMessage<SendAltChainEndorsementReply> {
    private static readonly pb::MessageParser<SendAltChainEndorsementReply> _parser = new pb::MessageParser<SendAltChainEndorsementReply>(() => new SendAltChainEndorsementReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SendAltChainEndorsementReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[96]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendAltChainEndorsementReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendAltChainEndorsementReply(SendAltChainEndorsementReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      Transaction = other.transaction_ != null ? other.Transaction.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SendAltChainEndorsementReply Clone() {
      return new SendAltChainEndorsementReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 3;
    private global::Core.SignedTransaction transaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.SignedTransaction Transaction {
      get { return transaction_; }
      set {
        transaction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SendAltChainEndorsementReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SendAltChainEndorsementReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if (!object.Equals(Transaction, other.Transaction)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      if (transaction_ != null) hash ^= Transaction.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      if (transaction_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Transaction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      if (transaction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transaction);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SendAltChainEndorsementReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      if (other.transaction_ != null) {
        if (transaction_ == null) {
          transaction_ = new global::Core.SignedTransaction();
        }
        Transaction.MergeFrom(other.Transaction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            if (transaction_ == null) {
              transaction_ = new global::Core.SignedTransaction();
            }
            input.ReadMessage(transaction_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetHistoryRequest : pb::IMessage<GetHistoryRequest> {
    private static readonly pb::MessageParser<GetHistoryRequest> _parser = new pb::MessageParser<GetHistoryRequest>(() => new GetHistoryRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetHistoryRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[97]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetHistoryRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetHistoryRequest(GetHistoryRequest other) : this() {
      addresses_ = other.addresses_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetHistoryRequest Clone() {
      return new GetHistoryRequest(this);
    }

    /// <summary>Field number for the "addresses" field.</summary>
    public const int AddressesFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_addresses_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> addresses_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Addresses {
      get { return addresses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetHistoryRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetHistoryRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!addresses_.Equals(other.addresses_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= addresses_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      addresses_.WriteTo(output, _repeated_addresses_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += addresses_.CalculateSize(_repeated_addresses_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetHistoryRequest other) {
      if (other == null) {
        return;
      }
      addresses_.Add(other.addresses_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            addresses_.AddEntriesFrom(input, _repeated_addresses_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddressHistory : pb::IMessage<AddressHistory> {
    private static readonly pb::MessageParser<AddressHistory> _parser = new pb::MessageParser<AddressHistory>(() => new AddressHistory());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddressHistory> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[98]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressHistory() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressHistory(AddressHistory other) : this() {
      address_ = other.address_;
      balance_ = other.balance_;
      blocksMined_ = other.blocksMined_;
      confirmedTransactions_ = other.confirmedTransactions_.Clone();
      pendingTransactions_ = other.pendingTransactions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressHistory Clone() {
      return new AddressHistory(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "balance" field.</summary>
    public const int BalanceFieldNumber = 2;
    private long balance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Balance {
      get { return balance_; }
      set {
        balance_ = value;
      }
    }

    /// <summary>Field number for the "blocks_mined" field.</summary>
    public const int BlocksMinedFieldNumber = 3;
    private int blocksMined_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlocksMined {
      get { return blocksMined_; }
      set {
        blocksMined_ = value;
      }
    }

    /// <summary>Field number for the "confirmed_transactions" field.</summary>
    public const int ConfirmedTransactionsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Core.TransactionUnion> _repeated_confirmedTransactions_codec
        = pb::FieldCodec.ForMessage(34, global::Core.TransactionUnion.Parser);
    private readonly pbc::RepeatedField<global::Core.TransactionUnion> confirmedTransactions_ = new pbc::RepeatedField<global::Core.TransactionUnion>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.TransactionUnion> ConfirmedTransactions {
      get { return confirmedTransactions_; }
    }

    /// <summary>Field number for the "pending_transactions" field.</summary>
    public const int PendingTransactionsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Core.TransactionUnion> _repeated_pendingTransactions_codec
        = pb::FieldCodec.ForMessage(42, global::Core.TransactionUnion.Parser);
    private readonly pbc::RepeatedField<global::Core.TransactionUnion> pendingTransactions_ = new pbc::RepeatedField<global::Core.TransactionUnion>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.TransactionUnion> PendingTransactions {
      get { return pendingTransactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddressHistory);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddressHistory other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (Balance != other.Balance) return false;
      if (BlocksMined != other.BlocksMined) return false;
      if(!confirmedTransactions_.Equals(other.confirmedTransactions_)) return false;
      if(!pendingTransactions_.Equals(other.pendingTransactions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Balance != 0L) hash ^= Balance.GetHashCode();
      if (BlocksMined != 0) hash ^= BlocksMined.GetHashCode();
      hash ^= confirmedTransactions_.GetHashCode();
      hash ^= pendingTransactions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Address);
      }
      if (Balance != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Balance);
      }
      if (BlocksMined != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BlocksMined);
      }
      confirmedTransactions_.WriteTo(output, _repeated_confirmedTransactions_codec);
      pendingTransactions_.WriteTo(output, _repeated_pendingTransactions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      if (Balance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Balance);
      }
      if (BlocksMined != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlocksMined);
      }
      size += confirmedTransactions_.CalculateSize(_repeated_confirmedTransactions_codec);
      size += pendingTransactions_.CalculateSize(_repeated_pendingTransactions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddressHistory other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Balance != 0L) {
        Balance = other.Balance;
      }
      if (other.BlocksMined != 0) {
        BlocksMined = other.BlocksMined;
      }
      confirmedTransactions_.Add(other.confirmedTransactions_);
      pendingTransactions_.Add(other.pendingTransactions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadBytes();
            break;
          }
          case 16: {
            Balance = input.ReadInt64();
            break;
          }
          case 24: {
            BlocksMined = input.ReadInt32();
            break;
          }
          case 34: {
            confirmedTransactions_.AddEntriesFrom(input, _repeated_confirmedTransactions_codec);
            break;
          }
          case 42: {
            pendingTransactions_.AddEntriesFrom(input, _repeated_pendingTransactions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetHistoryReply : pb::IMessage<GetHistoryReply> {
    private static readonly pb::MessageParser<GetHistoryReply> _parser = new pb::MessageParser<GetHistoryReply>(() => new GetHistoryReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetHistoryReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[99]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetHistoryReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetHistoryReply(GetHistoryReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      addresses_ = other.addresses_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetHistoryReply Clone() {
      return new GetHistoryReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "addresses" field.</summary>
    public const int AddressesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Core.AddressHistory> _repeated_addresses_codec
        = pb::FieldCodec.ForMessage(26, global::Core.AddressHistory.Parser);
    private readonly pbc::RepeatedField<global::Core.AddressHistory> addresses_ = new pbc::RepeatedField<global::Core.AddressHistory>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.AddressHistory> Addresses {
      get { return addresses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetHistoryReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetHistoryReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if(!addresses_.Equals(other.addresses_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      hash ^= addresses_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      addresses_.WriteTo(output, _repeated_addresses_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      size += addresses_.CalculateSize(_repeated_addresses_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetHistoryReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      addresses_.Add(other.addresses_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            addresses_.AddEntriesFrom(input, _repeated_addresses_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetPeerInfoRequest : pb::IMessage<GetPeerInfoRequest> {
    private static readonly pb::MessageParser<GetPeerInfoRequest> _parser = new pb::MessageParser<GetPeerInfoRequest>(() => new GetPeerInfoRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPeerInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[100]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPeerInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPeerInfoRequest(GetPeerInfoRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPeerInfoRequest Clone() {
      return new GetPeerInfoRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPeerInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPeerInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPeerInfoRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class NodeHeight : pb::IMessage<NodeHeight> {
    private static readonly pb::MessageParser<NodeHeight> _parser = new pb::MessageParser<NodeHeight>(() => new NodeHeight());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NodeHeight> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[101]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeHeight() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeHeight(NodeHeight other) : this() {
      peer_ = other.peer_;
      height_ = other.height_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NodeHeight Clone() {
      return new NodeHeight(this);
    }

    /// <summary>Field number for the "peer" field.</summary>
    public const int PeerFieldNumber = 1;
    private string peer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Peer {
      get { return peer_; }
      set {
        peer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NodeHeight);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NodeHeight other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Peer != other.Peer) return false;
      if (Height != other.Height) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Peer.Length != 0) hash ^= Peer.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Peer.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Peer);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Peer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Peer);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NodeHeight other) {
      if (other == null) {
        return;
      }
      if (other.Peer.Length != 0) {
        Peer = other.Peer;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Peer = input.ReadString();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetPeerInfoReply : pb::IMessage<GetPeerInfoReply> {
    private static readonly pb::MessageParser<GetPeerInfoReply> _parser = new pb::MessageParser<GetPeerInfoReply>(() => new GetPeerInfoReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPeerInfoReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[102]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPeerInfoReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPeerInfoReply(GetPeerInfoReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      endpoints_ = other.endpoints_.Clone();
      connectedNodes_ = other.connectedNodes_.Clone();
      disconnectedNodes_ = other.disconnectedNodes_.Clone();
      candidateNodes_ = other.candidateNodes_.Clone();
      nodeHeights_ = other.nodeHeights_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPeerInfoReply Clone() {
      return new GetPeerInfoReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "endpoints" field.</summary>
    public const int EndpointsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Core.Endpoint> _repeated_endpoints_codec
        = pb::FieldCodec.ForMessage(26, global::Core.Endpoint.Parser);
    private readonly pbc::RepeatedField<global::Core.Endpoint> endpoints_ = new pbc::RepeatedField<global::Core.Endpoint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Endpoint> Endpoints {
      get { return endpoints_; }
    }

    /// <summary>Field number for the "connected_nodes" field.</summary>
    public const int ConnectedNodesFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Core.NodeInfo> _repeated_connectedNodes_codec
        = pb::FieldCodec.ForMessage(34, global::Core.NodeInfo.Parser);
    private readonly pbc::RepeatedField<global::Core.NodeInfo> connectedNodes_ = new pbc::RepeatedField<global::Core.NodeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.NodeInfo> ConnectedNodes {
      get { return connectedNodes_; }
    }

    /// <summary>Field number for the "disconnected_nodes" field.</summary>
    public const int DisconnectedNodesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Core.NodeInfo> _repeated_disconnectedNodes_codec
        = pb::FieldCodec.ForMessage(42, global::Core.NodeInfo.Parser);
    private readonly pbc::RepeatedField<global::Core.NodeInfo> disconnectedNodes_ = new pbc::RepeatedField<global::Core.NodeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.NodeInfo> DisconnectedNodes {
      get { return disconnectedNodes_; }
    }

    /// <summary>Field number for the "candidate_nodes" field.</summary>
    public const int CandidateNodesFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Core.NodeInfo> _repeated_candidateNodes_codec
        = pb::FieldCodec.ForMessage(50, global::Core.NodeInfo.Parser);
    private readonly pbc::RepeatedField<global::Core.NodeInfo> candidateNodes_ = new pbc::RepeatedField<global::Core.NodeInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.NodeInfo> CandidateNodes {
      get { return candidateNodes_; }
    }

    /// <summary>Field number for the "node_heights" field.</summary>
    public const int NodeHeightsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Core.NodeHeight> _repeated_nodeHeights_codec
        = pb::FieldCodec.ForMessage(58, global::Core.NodeHeight.Parser);
    private readonly pbc::RepeatedField<global::Core.NodeHeight> nodeHeights_ = new pbc::RepeatedField<global::Core.NodeHeight>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.NodeHeight> NodeHeights {
      get { return nodeHeights_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPeerInfoReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPeerInfoReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if(!endpoints_.Equals(other.endpoints_)) return false;
      if(!connectedNodes_.Equals(other.connectedNodes_)) return false;
      if(!disconnectedNodes_.Equals(other.disconnectedNodes_)) return false;
      if(!candidateNodes_.Equals(other.candidateNodes_)) return false;
      if(!nodeHeights_.Equals(other.nodeHeights_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      hash ^= endpoints_.GetHashCode();
      hash ^= connectedNodes_.GetHashCode();
      hash ^= disconnectedNodes_.GetHashCode();
      hash ^= candidateNodes_.GetHashCode();
      hash ^= nodeHeights_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      endpoints_.WriteTo(output, _repeated_endpoints_codec);
      connectedNodes_.WriteTo(output, _repeated_connectedNodes_codec);
      disconnectedNodes_.WriteTo(output, _repeated_disconnectedNodes_codec);
      candidateNodes_.WriteTo(output, _repeated_candidateNodes_codec);
      nodeHeights_.WriteTo(output, _repeated_nodeHeights_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      size += endpoints_.CalculateSize(_repeated_endpoints_codec);
      size += connectedNodes_.CalculateSize(_repeated_connectedNodes_codec);
      size += disconnectedNodes_.CalculateSize(_repeated_disconnectedNodes_codec);
      size += candidateNodes_.CalculateSize(_repeated_candidateNodes_codec);
      size += nodeHeights_.CalculateSize(_repeated_nodeHeights_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPeerInfoReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      endpoints_.Add(other.endpoints_);
      connectedNodes_.Add(other.connectedNodes_);
      disconnectedNodes_.Add(other.disconnectedNodes_);
      candidateNodes_.Add(other.candidateNodes_);
      nodeHeights_.Add(other.nodeHeights_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            endpoints_.AddEntriesFrom(input, _repeated_endpoints_codec);
            break;
          }
          case 34: {
            connectedNodes_.AddEntriesFrom(input, _repeated_connectedNodes_codec);
            break;
          }
          case 42: {
            disconnectedNodes_.AddEntriesFrom(input, _repeated_disconnectedNodes_codec);
            break;
          }
          case 50: {
            candidateNodes_.AddEntriesFrom(input, _repeated_candidateNodes_codec);
            break;
          }
          case 58: {
            nodeHeights_.AddEntriesFrom(input, _repeated_nodeHeights_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBlockchainsRequest : pb::IMessage<GetBlockchainsRequest> {
    private static readonly pb::MessageParser<GetBlockchainsRequest> _parser = new pb::MessageParser<GetBlockchainsRequest>(() => new GetBlockchainsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBlockchainsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[103]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockchainsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockchainsRequest(GetBlockchainsRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockchainsRequest Clone() {
      return new GetBlockchainsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBlockchainsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBlockchainsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBlockchainsRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetBlockchainsReply : pb::IMessage<GetBlockchainsReply> {
    private static readonly pb::MessageParser<GetBlockchainsReply> _parser = new pb::MessageParser<GetBlockchainsReply>(() => new GetBlockchainsReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBlockchainsReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[104]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockchainsReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockchainsReply(GetBlockchainsReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      bestBlockchainLength_ = other.bestBlockchainLength_;
      longestBlockchainLength_ = other.longestBlockchainLength_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockchainsReply Clone() {
      return new GetBlockchainsReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "best_blockchain_length" field.</summary>
    public const int BestBlockchainLengthFieldNumber = 3;
    private int bestBlockchainLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BestBlockchainLength {
      get { return bestBlockchainLength_; }
      set {
        bestBlockchainLength_ = value;
      }
    }

    /// <summary>Field number for the "longest_blockchain_length" field.</summary>
    public const int LongestBlockchainLengthFieldNumber = 4;
    private int longestBlockchainLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LongestBlockchainLength {
      get { return longestBlockchainLength_; }
      set {
        longestBlockchainLength_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBlockchainsReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBlockchainsReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if (BestBlockchainLength != other.BestBlockchainLength) return false;
      if (LongestBlockchainLength != other.LongestBlockchainLength) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      if (BestBlockchainLength != 0) hash ^= BestBlockchainLength.GetHashCode();
      if (LongestBlockchainLength != 0) hash ^= LongestBlockchainLength.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      if (BestBlockchainLength != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BestBlockchainLength);
      }
      if (LongestBlockchainLength != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LongestBlockchainLength);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      if (BestBlockchainLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BestBlockchainLength);
      }
      if (LongestBlockchainLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LongestBlockchainLength);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBlockchainsReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      if (other.BestBlockchainLength != 0) {
        BestBlockchainLength = other.BestBlockchainLength;
      }
      if (other.LongestBlockchainLength != 0) {
        LongestBlockchainLength = other.LongestBlockchainLength;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 24: {
            BestBlockchainLength = input.ReadInt32();
            break;
          }
          case 32: {
            LongestBlockchainLength = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubmitBlocksRequest : pb::IMessage<SubmitBlocksRequest> {
    private static readonly pb::MessageParser<SubmitBlocksRequest> _parser = new pb::MessageParser<SubmitBlocksRequest>(() => new SubmitBlocksRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubmitBlocksRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[105]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitBlocksRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitBlocksRequest(SubmitBlocksRequest other) : this() {
      blocks_ = other.blocks_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitBlocksRequest Clone() {
      return new SubmitBlocksRequest(this);
    }

    /// <summary>Field number for the "blocks" field.</summary>
    public const int BlocksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Core.Block> _repeated_blocks_codec
        = pb::FieldCodec.ForMessage(10, global::Core.Block.Parser);
    private readonly pbc::RepeatedField<global::Core.Block> blocks_ = new pbc::RepeatedField<global::Core.Block>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Block> Blocks {
      get { return blocks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubmitBlocksRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubmitBlocksRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!blocks_.Equals(other.blocks_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= blocks_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      blocks_.WriteTo(output, _repeated_blocks_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += blocks_.CalculateSize(_repeated_blocks_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubmitBlocksRequest other) {
      if (other == null) {
        return;
      }
      blocks_.Add(other.blocks_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            blocks_.AddEntriesFrom(input, _repeated_blocks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBlockTimesRequest : pb::IMessage<GetBlockTimesRequest> {
    private static readonly pb::MessageParser<GetBlockTimesRequest> _parser = new pb::MessageParser<GetBlockTimesRequest>(() => new GetBlockTimesRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBlockTimesRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[106]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockTimesRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockTimesRequest(GetBlockTimesRequest other) : this() {
      historyLength_ = other.historyLength_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockTimesRequest Clone() {
      return new GetBlockTimesRequest(this);
    }

    /// <summary>Field number for the "history_length" field.</summary>
    public const int HistoryLengthFieldNumber = 1;
    private int historyLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int HistoryLength {
      get { return historyLength_; }
      set {
        historyLength_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBlockTimesRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBlockTimesRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (HistoryLength != other.HistoryLength) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HistoryLength != 0) hash ^= HistoryLength.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (HistoryLength != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(HistoryLength);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HistoryLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HistoryLength);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBlockTimesRequest other) {
      if (other == null) {
        return;
      }
      if (other.HistoryLength != 0) {
        HistoryLength = other.HistoryLength;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            HistoryLength = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBlockTimesReply : pb::IMessage<GetBlockTimesReply> {
    private static readonly pb::MessageParser<GetBlockTimesReply> _parser = new pb::MessageParser<GetBlockTimesReply>(() => new GetBlockTimesReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBlockTimesReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[107]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockTimesReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockTimesReply(GetBlockTimesReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      times_ = other.times_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockTimesReply Clone() {
      return new GetBlockTimesReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "times" field.</summary>
    public const int TimesFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_times_codec
        = pb::FieldCodec.ForSInt32(26);
    private readonly pbc::RepeatedField<int> times_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Times {
      get { return times_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBlockTimesReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBlockTimesReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if(!times_.Equals(other.times_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      hash ^= times_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      times_.WriteTo(output, _repeated_times_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      size += times_.CalculateSize(_repeated_times_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBlockTimesReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      times_.Add(other.times_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26:
          case 24: {
            times_.AddEntriesFrom(input, _repeated_times_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class StartSoloPoolRequest : pb::IMessage<StartSoloPoolRequest> {
    private static readonly pb::MessageParser<StartSoloPoolRequest> _parser = new pb::MessageParser<StartSoloPoolRequest>(() => new StartSoloPoolRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartSoloPoolRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[108]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartSoloPoolRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartSoloPoolRequest(StartSoloPoolRequest other) : this() {
      address_ = other.address_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartSoloPoolRequest Clone() {
      return new StartSoloPoolRequest(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartSoloPoolRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartSoloPoolRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Address);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartSoloPoolRequest other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StartSoloPoolReply : pb::IMessage<StartSoloPoolReply> {
    private static readonly pb::MessageParser<StartSoloPoolReply> _parser = new pb::MessageParser<StartSoloPoolReply>(() => new StartSoloPoolReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StartSoloPoolReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[109]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartSoloPoolReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartSoloPoolReply(StartSoloPoolReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StartSoloPoolReply Clone() {
      return new StartSoloPoolReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StartSoloPoolReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StartSoloPoolReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StartSoloPoolReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetSignatureIndexRequest : pb::IMessage<GetSignatureIndexRequest> {
    private static readonly pb::MessageParser<GetSignatureIndexRequest> _parser = new pb::MessageParser<GetSignatureIndexRequest>(() => new GetSignatureIndexRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSignatureIndexRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[110]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSignatureIndexRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSignatureIndexRequest(GetSignatureIndexRequest other) : this() {
      addresses_ = other.addresses_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSignatureIndexRequest Clone() {
      return new GetSignatureIndexRequest(this);
    }

    /// <summary>Field number for the "addresses" field.</summary>
    public const int AddressesFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_addresses_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> addresses_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Addresses {
      get { return addresses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSignatureIndexRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSignatureIndexRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!addresses_.Equals(other.addresses_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= addresses_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      addresses_.WriteTo(output, _repeated_addresses_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += addresses_.CalculateSize(_repeated_addresses_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSignatureIndexRequest other) {
      if (other == null) {
        return;
      }
      addresses_.Add(other.addresses_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            addresses_.AddEntriesFrom(input, _repeated_addresses_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetDefaultAddressRequest : pb::IMessage<SetDefaultAddressRequest> {
    private static readonly pb::MessageParser<SetDefaultAddressRequest> _parser = new pb::MessageParser<SetDefaultAddressRequest>(() => new SetDefaultAddressRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetDefaultAddressRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[111]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDefaultAddressRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDefaultAddressRequest(SetDefaultAddressRequest other) : this() {
      address_ = other.address_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDefaultAddressRequest Clone() {
      return new SetDefaultAddressRequest(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetDefaultAddressRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetDefaultAddressRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Address);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetDefaultAddressRequest other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddressSignatureIndexes : pb::IMessage<AddressSignatureIndexes> {
    private static readonly pb::MessageParser<AddressSignatureIndexes> _parser = new pb::MessageParser<AddressSignatureIndexes>(() => new AddressSignatureIndexes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddressSignatureIndexes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[112]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressSignatureIndexes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressSignatureIndexes(AddressSignatureIndexes other) : this() {
      address_ = other.address_;
      poolIndex_ = other.poolIndex_;
      blockchainIndex_ = other.blockchainIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressSignatureIndexes Clone() {
      return new AddressSignatureIndexes(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pool_index" field.</summary>
    public const int PoolIndexFieldNumber = 3;
    private long poolIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long PoolIndex {
      get { return poolIndex_; }
      set {
        poolIndex_ = value;
      }
    }

    /// <summary>Field number for the "blockchain_index" field.</summary>
    public const int BlockchainIndexFieldNumber = 2;
    private long blockchainIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BlockchainIndex {
      get { return blockchainIndex_; }
      set {
        blockchainIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddressSignatureIndexes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddressSignatureIndexes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (PoolIndex != other.PoolIndex) return false;
      if (BlockchainIndex != other.BlockchainIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (PoolIndex != 0L) hash ^= PoolIndex.GetHashCode();
      if (BlockchainIndex != 0L) hash ^= BlockchainIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Address);
      }
      if (BlockchainIndex != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BlockchainIndex);
      }
      if (PoolIndex != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(PoolIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      if (PoolIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PoolIndex);
      }
      if (BlockchainIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BlockchainIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddressSignatureIndexes other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.PoolIndex != 0L) {
        PoolIndex = other.PoolIndex;
      }
      if (other.BlockchainIndex != 0L) {
        BlockchainIndex = other.BlockchainIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadBytes();
            break;
          }
          case 16: {
            BlockchainIndex = input.ReadInt64();
            break;
          }
          case 24: {
            PoolIndex = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetSignatureIndexReply : pb::IMessage<GetSignatureIndexReply> {
    private static readonly pb::MessageParser<GetSignatureIndexReply> _parser = new pb::MessageParser<GetSignatureIndexReply>(() => new GetSignatureIndexReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetSignatureIndexReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[113]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSignatureIndexReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSignatureIndexReply(GetSignatureIndexReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      indexes_ = other.indexes_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetSignatureIndexReply Clone() {
      return new GetSignatureIndexReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "indexes" field.</summary>
    public const int IndexesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Core.AddressSignatureIndexes> _repeated_indexes_codec
        = pb::FieldCodec.ForMessage(26, global::Core.AddressSignatureIndexes.Parser);
    private readonly pbc::RepeatedField<global::Core.AddressSignatureIndexes> indexes_ = new pbc::RepeatedField<global::Core.AddressSignatureIndexes>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.AddressSignatureIndexes> Indexes {
      get { return indexes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetSignatureIndexReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetSignatureIndexReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if(!indexes_.Equals(other.indexes_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      hash ^= indexes_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      indexes_.WriteTo(output, _repeated_indexes_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      size += indexes_.CalculateSize(_repeated_indexes_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetSignatureIndexReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      indexes_.Add(other.indexes_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            indexes_.AddEntriesFrom(input, _repeated_indexes_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetDefaultAddressReply : pb::IMessage<SetDefaultAddressReply> {
    private static readonly pb::MessageParser<SetDefaultAddressReply> _parser = new pb::MessageParser<SetDefaultAddressReply>(() => new SetDefaultAddressReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetDefaultAddressReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[114]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDefaultAddressReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDefaultAddressReply(SetDefaultAddressReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetDefaultAddressReply Clone() {
      return new SetDefaultAddressReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetDefaultAddressReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetDefaultAddressReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetDefaultAddressReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTransactionsRequest : pb::IMessage<GetTransactionsRequest> {
    private static readonly pb::MessageParser<GetTransactionsRequest> _parser = new pb::MessageParser<GetTransactionsRequest>(() => new GetTransactionsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTransactionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[115]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsRequest(GetTransactionsRequest other) : this() {
      searchLength_ = other.searchLength_;
      ids_ = other.ids_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsRequest Clone() {
      return new GetTransactionsRequest(this);
    }

    /// <summary>Field number for the "search_length" field.</summary>
    public const int SearchLengthFieldNumber = 1;
    private int searchLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SearchLength {
      get { return searchLength_; }
      set {
        searchLength_ = value;
      }
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 2;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_ids_codec
        = pb::FieldCodec.ForBytes(18);
    private readonly pbc::RepeatedField<pb::ByteString> ids_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Ids {
      get { return ids_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTransactionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTransactionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SearchLength != other.SearchLength) return false;
      if(!ids_.Equals(other.ids_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SearchLength != 0) hash ^= SearchLength.GetHashCode();
      hash ^= ids_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SearchLength != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SearchLength);
      }
      ids_.WriteTo(output, _repeated_ids_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SearchLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SearchLength);
      }
      size += ids_.CalculateSize(_repeated_ids_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTransactionsRequest other) {
      if (other == null) {
        return;
      }
      if (other.SearchLength != 0) {
        SearchLength = other.SearchLength;
      }
      ids_.Add(other.ids_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SearchLength = input.ReadInt32();
            break;
          }
          case 18: {
            ids_.AddEntriesFrom(input, _repeated_ids_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TransactionInfo : pb::IMessage<TransactionInfo> {
    private static readonly pb::MessageParser<TransactionInfo> _parser = new pb::MessageParser<TransactionInfo>(() => new TransactionInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransactionInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[116]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionInfo(TransactionInfo other) : this() {
      confirmations_ = other.confirmations_;
      Transaction = other.transaction_ != null ? other.Transaction.Clone() : null;
      blockNumber_ = other.blockNumber_;
      timestamp_ = other.timestamp_;
      endorsedBlockHash_ = other.endorsedBlockHash_;
      bitcoinBlockHash_ = other.bitcoinBlockHash_;
      bitcoinTxId_ = other.bitcoinTxId_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransactionInfo Clone() {
      return new TransactionInfo(this);
    }

    /// <summary>Field number for the "confirmations" field.</summary>
    public const int ConfirmationsFieldNumber = 1;
    private int confirmations_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Confirmations {
      get { return confirmations_; }
      set {
        confirmations_ = value;
      }
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 2;
    private global::Core.Transaction transaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.Transaction Transaction {
      get { return transaction_; }
      set {
        transaction_ = value;
      }
    }

    /// <summary>Field number for the "block_number" field.</summary>
    public const int BlockNumberFieldNumber = 3;
    private int blockNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockNumber {
      get { return blockNumber_; }
      set {
        blockNumber_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private int timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "endorsed_block_hash" field.</summary>
    public const int EndorsedBlockHashFieldNumber = 5;
    private pb::ByteString endorsedBlockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString EndorsedBlockHash {
      get { return endorsedBlockHash_; }
      set {
        endorsedBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bitcoin_block_hash" field.</summary>
    public const int BitcoinBlockHashFieldNumber = 6;
    private pb::ByteString bitcoinBlockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BitcoinBlockHash {
      get { return bitcoinBlockHash_; }
      set {
        bitcoinBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bitcoin_tx_id" field.</summary>
    public const int BitcoinTxIdFieldNumber = 7;
    private pb::ByteString bitcoinTxId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BitcoinTxId {
      get { return bitcoinTxId_; }
      set {
        bitcoinTxId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransactionInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransactionInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Confirmations != other.Confirmations) return false;
      if (!object.Equals(Transaction, other.Transaction)) return false;
      if (BlockNumber != other.BlockNumber) return false;
      if (Timestamp != other.Timestamp) return false;
      if (EndorsedBlockHash != other.EndorsedBlockHash) return false;
      if (BitcoinBlockHash != other.BitcoinBlockHash) return false;
      if (BitcoinTxId != other.BitcoinTxId) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Confirmations != 0) hash ^= Confirmations.GetHashCode();
      if (transaction_ != null) hash ^= Transaction.GetHashCode();
      if (BlockNumber != 0) hash ^= BlockNumber.GetHashCode();
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (EndorsedBlockHash.Length != 0) hash ^= EndorsedBlockHash.GetHashCode();
      if (BitcoinBlockHash.Length != 0) hash ^= BitcoinBlockHash.GetHashCode();
      if (BitcoinTxId.Length != 0) hash ^= BitcoinTxId.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Confirmations != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Confirmations);
      }
      if (transaction_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Transaction);
      }
      if (BlockNumber != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BlockNumber);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Timestamp);
      }
      if (EndorsedBlockHash.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(EndorsedBlockHash);
      }
      if (BitcoinBlockHash.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(BitcoinBlockHash);
      }
      if (BitcoinTxId.Length != 0) {
        output.WriteRawTag(58);
        output.WriteBytes(BitcoinTxId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Confirmations != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Confirmations);
      }
      if (transaction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transaction);
      }
      if (BlockNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockNumber);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      if (EndorsedBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EndorsedBlockHash);
      }
      if (BitcoinBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BitcoinBlockHash);
      }
      if (BitcoinTxId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BitcoinTxId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransactionInfo other) {
      if (other == null) {
        return;
      }
      if (other.Confirmations != 0) {
        Confirmations = other.Confirmations;
      }
      if (other.transaction_ != null) {
        if (transaction_ == null) {
          transaction_ = new global::Core.Transaction();
        }
        Transaction.MergeFrom(other.Transaction);
      }
      if (other.BlockNumber != 0) {
        BlockNumber = other.BlockNumber;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.EndorsedBlockHash.Length != 0) {
        EndorsedBlockHash = other.EndorsedBlockHash;
      }
      if (other.BitcoinBlockHash.Length != 0) {
        BitcoinBlockHash = other.BitcoinBlockHash;
      }
      if (other.BitcoinTxId.Length != 0) {
        BitcoinTxId = other.BitcoinTxId;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Confirmations = input.ReadInt32();
            break;
          }
          case 18: {
            if (transaction_ == null) {
              transaction_ = new global::Core.Transaction();
            }
            input.ReadMessage(transaction_);
            break;
          }
          case 24: {
            BlockNumber = input.ReadInt32();
            break;
          }
          case 32: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 42: {
            EndorsedBlockHash = input.ReadBytes();
            break;
          }
          case 50: {
            BitcoinBlockHash = input.ReadBytes();
            break;
          }
          case 58: {
            BitcoinTxId = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetTransactionsReply : pb::IMessage<GetTransactionsReply> {
    private static readonly pb::MessageParser<GetTransactionsReply> _parser = new pb::MessageParser<GetTransactionsReply>(() => new GetTransactionsReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetTransactionsReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[117]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsReply(GetTransactionsReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      transactions_ = other.transactions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetTransactionsReply Clone() {
      return new GetTransactionsReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Core.TransactionInfo> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(26, global::Core.TransactionInfo.Parser);
    private readonly pbc::RepeatedField<global::Core.TransactionInfo> transactions_ = new pbc::RepeatedField<global::Core.TransactionInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.TransactionInfo> Transactions {
      get { return transactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetTransactionsReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetTransactionsReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if(!transactions_.Equals(other.transactions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      hash ^= transactions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      transactions_.WriteTo(output, _repeated_transactions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetTransactionsReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      transactions_.Add(other.transactions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetTransactionFeeRequest : pb::IMessage<SetTransactionFeeRequest> {
    private static readonly pb::MessageParser<SetTransactionFeeRequest> _parser = new pb::MessageParser<SetTransactionFeeRequest>(() => new SetTransactionFeeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetTransactionFeeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[118]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTransactionFeeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTransactionFeeRequest(SetTransactionFeeRequest other) : this() {
      amount_ = other.amount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetTransactionFeeRequest Clone() {
      return new SetTransactionFeeRequest(this);
    }

    /// <summary>Field number for the "amount" field.</summary>
    public const int AmountFieldNumber = 1;
    private long amount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Amount {
      get { return amount_; }
      set {
        amount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetTransactionFeeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetTransactionFeeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Amount != other.Amount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Amount != 0L) hash ^= Amount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Amount != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Amount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Amount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Amount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetTransactionFeeRequest other) {
      if (other == null) {
        return;
      }
      if (other.Amount != 0L) {
        Amount = other.Amount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Amount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DumpPrivateKeyRequest : pb::IMessage<DumpPrivateKeyRequest> {
    private static readonly pb::MessageParser<DumpPrivateKeyRequest> _parser = new pb::MessageParser<DumpPrivateKeyRequest>(() => new DumpPrivateKeyRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DumpPrivateKeyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[119]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DumpPrivateKeyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DumpPrivateKeyRequest(DumpPrivateKeyRequest other) : this() {
      address_ = other.address_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DumpPrivateKeyRequest Clone() {
      return new DumpPrivateKeyRequest(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DumpPrivateKeyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DumpPrivateKeyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Address);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DumpPrivateKeyRequest other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DumpPrivateKeyReply : pb::IMessage<DumpPrivateKeyReply> {
    private static readonly pb::MessageParser<DumpPrivateKeyReply> _parser = new pb::MessageParser<DumpPrivateKeyReply>(() => new DumpPrivateKeyReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DumpPrivateKeyReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[120]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DumpPrivateKeyReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DumpPrivateKeyReply(DumpPrivateKeyReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      address_ = other.address_;
      privateKey_ = other.privateKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DumpPrivateKeyReply Clone() {
      return new DumpPrivateKeyReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 3;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "private_key" field.</summary>
    public const int PrivateKeyFieldNumber = 4;
    private pb::ByteString privateKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PrivateKey {
      get { return privateKey_; }
      set {
        privateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DumpPrivateKeyReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DumpPrivateKeyReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if (Address != other.Address) return false;
      if (PrivateKey != other.PrivateKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (PrivateKey.Length != 0) hash ^= PrivateKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      if (Address.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Address);
      }
      if (PrivateKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(PrivateKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      if (PrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PrivateKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DumpPrivateKeyReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.PrivateKey.Length != 0) {
        PrivateKey = other.PrivateKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            Address = input.ReadBytes();
            break;
          }
          case 34: {
            PrivateKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ImportPrivateKeyRequest : pb::IMessage<ImportPrivateKeyRequest> {
    private static readonly pb::MessageParser<ImportPrivateKeyRequest> _parser = new pb::MessageParser<ImportPrivateKeyRequest>(() => new ImportPrivateKeyRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImportPrivateKeyRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[121]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportPrivateKeyRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportPrivateKeyRequest(ImportPrivateKeyRequest other) : this() {
      privateKey_ = other.privateKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportPrivateKeyRequest Clone() {
      return new ImportPrivateKeyRequest(this);
    }

    /// <summary>Field number for the "private_key" field.</summary>
    public const int PrivateKeyFieldNumber = 1;
    private pb::ByteString privateKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PrivateKey {
      get { return privateKey_; }
      set {
        privateKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImportPrivateKeyRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImportPrivateKeyRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PrivateKey != other.PrivateKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PrivateKey.Length != 0) hash ^= PrivateKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PrivateKey.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(PrivateKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PrivateKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PrivateKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImportPrivateKeyRequest other) {
      if (other == null) {
        return;
      }
      if (other.PrivateKey.Length != 0) {
        PrivateKey = other.PrivateKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            PrivateKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ImportPrivateKeyReply : pb::IMessage<ImportPrivateKeyReply> {
    private static readonly pb::MessageParser<ImportPrivateKeyReply> _parser = new pb::MessageParser<ImportPrivateKeyReply>(() => new ImportPrivateKeyReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImportPrivateKeyReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[122]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportPrivateKeyReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportPrivateKeyReply(ImportPrivateKeyReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      resultantAddress_ = other.resultantAddress_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImportPrivateKeyReply Clone() {
      return new ImportPrivateKeyReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "resultant_address" field.</summary>
    public const int ResultantAddressFieldNumber = 3;
    private pb::ByteString resultantAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ResultantAddress {
      get { return resultantAddress_; }
      set {
        resultantAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImportPrivateKeyReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImportPrivateKeyReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if (ResultantAddress != other.ResultantAddress) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      if (ResultantAddress.Length != 0) hash ^= ResultantAddress.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      if (ResultantAddress.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(ResultantAddress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      if (ResultantAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ResultantAddress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImportPrivateKeyReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      if (other.ResultantAddress.Length != 0) {
        ResultantAddress = other.ResultantAddress;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            ResultantAddress = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetLastBitcoinBlockRequest : pb::IMessage<GetLastBitcoinBlockRequest> {
    private static readonly pb::MessageParser<GetLastBitcoinBlockRequest> _parser = new pb::MessageParser<GetLastBitcoinBlockRequest>(() => new GetLastBitcoinBlockRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLastBitcoinBlockRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[123]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLastBitcoinBlockRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLastBitcoinBlockRequest(GetLastBitcoinBlockRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLastBitcoinBlockRequest Clone() {
      return new GetLastBitcoinBlockRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLastBitcoinBlockRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLastBitcoinBlockRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLastBitcoinBlockRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetLastBlockRequest : pb::IMessage<GetLastBlockRequest> {
    private static readonly pb::MessageParser<GetLastBlockRequest> _parser = new pb::MessageParser<GetLastBlockRequest>(() => new GetLastBlockRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLastBlockRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[124]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLastBlockRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLastBlockRequest(GetLastBlockRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLastBlockRequest Clone() {
      return new GetLastBlockRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLastBlockRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLastBlockRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLastBlockRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetLastBitcoinBlockReply : pb::IMessage<GetLastBitcoinBlockReply> {
    private static readonly pb::MessageParser<GetLastBitcoinBlockReply> _parser = new pb::MessageParser<GetLastBitcoinBlockReply>(() => new GetLastBitcoinBlockReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLastBitcoinBlockReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[125]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLastBitcoinBlockReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLastBitcoinBlockReply(GetLastBitcoinBlockReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      header_ = other.header_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLastBitcoinBlockReply Clone() {
      return new GetLastBitcoinBlockReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 3;
    private pb::ByteString header_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Header {
      get { return header_; }
      set {
        header_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLastBitcoinBlockReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLastBitcoinBlockReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if (Header != other.Header) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      if (Header.Length != 0) hash ^= Header.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      if (Header.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Header);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      if (Header.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Header);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLastBitcoinBlockReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      if (other.Header.Length != 0) {
        Header = other.Header;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            Header = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetLastBlockReply : pb::IMessage<GetLastBlockReply> {
    private static readonly pb::MessageParser<GetLastBlockReply> _parser = new pb::MessageParser<GetLastBlockReply>(() => new GetLastBlockReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLastBlockReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[126]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLastBlockReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLastBlockReply(GetLastBlockReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      Header = other.header_ != null ? other.Header.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLastBlockReply Clone() {
      return new GetLastBlockReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 3;
    private global::Core.BlockHeader header_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.BlockHeader Header {
      get { return header_; }
      set {
        header_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLastBlockReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLastBlockReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if (!object.Equals(Header, other.Header)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      if (header_ != null) hash ^= Header.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      if (header_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Header);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      if (header_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Header);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLastBlockReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      if (other.header_ != null) {
        if (header_ == null) {
          header_ = new global::Core.BlockHeader();
        }
        Header.MergeFrom(other.Header);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            if (header_ == null) {
              header_ = new global::Core.BlockHeader();
            }
            input.ReadMessage(header_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListBlocksSinceRequest : pb::IMessage<ListBlocksSinceRequest> {
    private static readonly pb::MessageParser<ListBlocksSinceRequest> _parser = new pb::MessageParser<ListBlocksSinceRequest>(() => new ListBlocksSinceRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListBlocksSinceRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[127]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBlocksSinceRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBlocksSinceRequest(ListBlocksSinceRequest other) : this() {
      hash_ = other.hash_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBlocksSinceRequest Clone() {
      return new ListBlocksSinceRequest(this);
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 1;
    private pb::ByteString hash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Hash {
      get { return hash_; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListBlocksSinceRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListBlocksSinceRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Hash != other.Hash) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Hash.Length != 0) hash ^= Hash.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Hash.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Hash);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Hash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Hash);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListBlocksSinceRequest other) {
      if (other == null) {
        return;
      }
      if (other.Hash.Length != 0) {
        Hash = other.Hash;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Hash = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListBlocksSinceReply : pb::IMessage<ListBlocksSinceReply> {
    private static readonly pb::MessageParser<ListBlocksSinceReply> _parser = new pb::MessageParser<ListBlocksSinceReply>(() => new ListBlocksSinceReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListBlocksSinceReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[128]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBlocksSinceReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBlocksSinceReply(ListBlocksSinceReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      removed_ = other.removed_.Clone();
      added_ = other.added_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBlocksSinceReply Clone() {
      return new ListBlocksSinceReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "removed" field.</summary>
    public const int RemovedFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Core.BlockHeader> _repeated_removed_codec
        = pb::FieldCodec.ForMessage(26, global::Core.BlockHeader.Parser);
    private readonly pbc::RepeatedField<global::Core.BlockHeader> removed_ = new pbc::RepeatedField<global::Core.BlockHeader>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.BlockHeader> Removed {
      get { return removed_; }
    }

    /// <summary>Field number for the "added" field.</summary>
    public const int AddedFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Core.BlockHeader> _repeated_added_codec
        = pb::FieldCodec.ForMessage(34, global::Core.BlockHeader.Parser);
    private readonly pbc::RepeatedField<global::Core.BlockHeader> added_ = new pbc::RepeatedField<global::Core.BlockHeader>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.BlockHeader> Added {
      get { return added_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListBlocksSinceReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListBlocksSinceReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if(!removed_.Equals(other.removed_)) return false;
      if(!added_.Equals(other.added_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      hash ^= removed_.GetHashCode();
      hash ^= added_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      removed_.WriteTo(output, _repeated_removed_codec);
      added_.WriteTo(output, _repeated_added_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      size += removed_.CalculateSize(_repeated_removed_codec);
      size += added_.CalculateSize(_repeated_added_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListBlocksSinceReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      removed_.Add(other.removed_);
      added_.Add(other.added_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            removed_.AddEntriesFrom(input, _repeated_removed_codec);
            break;
          }
          case 34: {
            added_.AddEntriesFrom(input, _repeated_added_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubmitTransactionsRequest : pb::IMessage<SubmitTransactionsRequest> {
    private static readonly pb::MessageParser<SubmitTransactionsRequest> _parser = new pb::MessageParser<SubmitTransactionsRequest>(() => new SubmitTransactionsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubmitTransactionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[129]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitTransactionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitTransactionsRequest(SubmitTransactionsRequest other) : this() {
      transactions_ = other.transactions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitTransactionsRequest Clone() {
      return new SubmitTransactionsRequest(this);
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Core.TransactionUnion> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(10, global::Core.TransactionUnion.Parser);
    private readonly pbc::RepeatedField<global::Core.TransactionUnion> transactions_ = new pbc::RepeatedField<global::Core.TransactionUnion>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.TransactionUnion> Transactions {
      get { return transactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubmitTransactionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubmitTransactionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!transactions_.Equals(other.transactions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= transactions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      transactions_.WriteTo(output, _repeated_transactions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubmitTransactionsRequest other) {
      if (other == null) {
        return;
      }
      transactions_.Add(other.transactions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetInfoReply : pb::IMessage<GetInfoReply> {
    private static readonly pb::MessageParser<GetInfoReply> _parser = new pb::MessageParser<GetInfoReply>(() => new GetInfoReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetInfoReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[130]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoReply(GetInfoReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      numberOfBlocks_ = other.numberOfBlocks_;
      LastBlock = other.lastBlock_ != null ? other.LastBlock.Clone() : null;
      DefaultAddress = other.defaultAddress_ != null ? other.DefaultAddress.Clone() : null;
      transactionFee_ = other.transactionFee_;
      estimatedHashrate_ = other.estimatedHashrate_;
      decodedDifficulty_ = other.decodedDifficulty_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetInfoReply Clone() {
      return new GetInfoReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "number_of_blocks" field.</summary>
    public const int NumberOfBlocksFieldNumber = 3;
    private int numberOfBlocks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumberOfBlocks {
      get { return numberOfBlocks_; }
      set {
        numberOfBlocks_ = value;
      }
    }

    /// <summary>Field number for the "last_block" field.</summary>
    public const int LastBlockFieldNumber = 4;
    private global::Core.BlockSummary lastBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.BlockSummary LastBlock {
      get { return lastBlock_; }
      set {
        lastBlock_ = value;
      }
    }

    /// <summary>Field number for the "default_address" field.</summary>
    public const int DefaultAddressFieldNumber = 5;
    private global::Core.AddressBalance defaultAddress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.AddressBalance DefaultAddress {
      get { return defaultAddress_; }
      set {
        defaultAddress_ = value;
      }
    }

    /// <summary>Field number for the "transaction_fee" field.</summary>
    public const int TransactionFeeFieldNumber = 6;
    private long transactionFee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TransactionFee {
      get { return transactionFee_; }
      set {
        transactionFee_ = value;
      }
    }

    /// <summary>Field number for the "estimated_hashrate" field.</summary>
    public const int EstimatedHashrateFieldNumber = 7;
    private long estimatedHashrate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EstimatedHashrate {
      get { return estimatedHashrate_; }
      set {
        estimatedHashrate_ = value;
      }
    }

    /// <summary>Field number for the "decoded_difficulty" field.</summary>
    public const int DecodedDifficultyFieldNumber = 8;
    private ulong decodedDifficulty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong DecodedDifficulty {
      get { return decodedDifficulty_; }
      set {
        decodedDifficulty_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetInfoReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetInfoReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if (NumberOfBlocks != other.NumberOfBlocks) return false;
      if (!object.Equals(LastBlock, other.LastBlock)) return false;
      if (!object.Equals(DefaultAddress, other.DefaultAddress)) return false;
      if (TransactionFee != other.TransactionFee) return false;
      if (EstimatedHashrate != other.EstimatedHashrate) return false;
      if (DecodedDifficulty != other.DecodedDifficulty) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      if (NumberOfBlocks != 0) hash ^= NumberOfBlocks.GetHashCode();
      if (lastBlock_ != null) hash ^= LastBlock.GetHashCode();
      if (defaultAddress_ != null) hash ^= DefaultAddress.GetHashCode();
      if (TransactionFee != 0L) hash ^= TransactionFee.GetHashCode();
      if (EstimatedHashrate != 0L) hash ^= EstimatedHashrate.GetHashCode();
      if (DecodedDifficulty != 0UL) hash ^= DecodedDifficulty.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      if (NumberOfBlocks != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NumberOfBlocks);
      }
      if (lastBlock_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(LastBlock);
      }
      if (defaultAddress_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(DefaultAddress);
      }
      if (TransactionFee != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(TransactionFee);
      }
      if (EstimatedHashrate != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(EstimatedHashrate);
      }
      if (DecodedDifficulty != 0UL) {
        output.WriteRawTag(65);
        output.WriteFixed64(DecodedDifficulty);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      if (NumberOfBlocks != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumberOfBlocks);
      }
      if (lastBlock_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastBlock);
      }
      if (defaultAddress_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DefaultAddress);
      }
      if (TransactionFee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TransactionFee);
      }
      if (EstimatedHashrate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EstimatedHashrate);
      }
      if (DecodedDifficulty != 0UL) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetInfoReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      if (other.NumberOfBlocks != 0) {
        NumberOfBlocks = other.NumberOfBlocks;
      }
      if (other.lastBlock_ != null) {
        if (lastBlock_ == null) {
          lastBlock_ = new global::Core.BlockSummary();
        }
        LastBlock.MergeFrom(other.LastBlock);
      }
      if (other.defaultAddress_ != null) {
        if (defaultAddress_ == null) {
          defaultAddress_ = new global::Core.AddressBalance();
        }
        DefaultAddress.MergeFrom(other.DefaultAddress);
      }
      if (other.TransactionFee != 0L) {
        TransactionFee = other.TransactionFee;
      }
      if (other.EstimatedHashrate != 0L) {
        EstimatedHashrate = other.EstimatedHashrate;
      }
      if (other.DecodedDifficulty != 0UL) {
        DecodedDifficulty = other.DecodedDifficulty;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 24: {
            NumberOfBlocks = input.ReadInt32();
            break;
          }
          case 34: {
            if (lastBlock_ == null) {
              lastBlock_ = new global::Core.BlockSummary();
            }
            input.ReadMessage(lastBlock_);
            break;
          }
          case 42: {
            if (defaultAddress_ == null) {
              defaultAddress_ = new global::Core.AddressBalance();
            }
            input.ReadMessage(defaultAddress_);
            break;
          }
          case 48: {
            TransactionFee = input.ReadInt64();
            break;
          }
          case 56: {
            EstimatedHashrate = input.ReadInt64();
            break;
          }
          case 65: {
            DecodedDifficulty = input.ReadFixed64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetDiagnosticInfoReply : pb::IMessage<GetDiagnosticInfoReply> {
    private static readonly pb::MessageParser<GetDiagnosticInfoReply> _parser = new pb::MessageParser<GetDiagnosticInfoReply>(() => new GetDiagnosticInfoReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetDiagnosticInfoReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[131]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDiagnosticInfoReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDiagnosticInfoReply(GetDiagnosticInfoReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      userLanguage_ = other.userLanguage_;
      javaRuntimeName_ = other.javaRuntimeName_;
      sunBootLibraryPath_ = other.sunBootLibraryPath_;
      javaRuntimeVersion_ = other.javaRuntimeVersion_;
      javaSpecificationVersion_ = other.javaSpecificationVersion_;
      osName_ = other.osName_;
      osArch_ = other.osArch_;
      osVersion_ = other.osVersion_;
      memoryTotalGb_ = other.memoryTotalGb_;
      memoryMaxGb_ = other.memoryMaxGb_;
      processorCount_ = other.processorCount_;
      processorType_ = other.processorType_;
      workingDirectory_ = other.workingDirectory_;
      datetimeNowUtc_ = other.datetimeNowUtc_;
      nodecorePropertiesSource_ = other.nodecorePropertiesSource_;
      nodecorePropertiesValues_ = other.nodecorePropertiesValues_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetDiagnosticInfoReply Clone() {
      return new GetDiagnosticInfoReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "user_language" field.</summary>
    public const int UserLanguageFieldNumber = 3;
    private string userLanguage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserLanguage {
      get { return userLanguage_; }
      set {
        userLanguage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "java_runtime_name" field.</summary>
    public const int JavaRuntimeNameFieldNumber = 4;
    private string javaRuntimeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JavaRuntimeName {
      get { return javaRuntimeName_; }
      set {
        javaRuntimeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sun_boot_library_path" field.</summary>
    public const int SunBootLibraryPathFieldNumber = 5;
    private string sunBootLibraryPath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SunBootLibraryPath {
      get { return sunBootLibraryPath_; }
      set {
        sunBootLibraryPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "java_runtime_version" field.</summary>
    public const int JavaRuntimeVersionFieldNumber = 6;
    private string javaRuntimeVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JavaRuntimeVersion {
      get { return javaRuntimeVersion_; }
      set {
        javaRuntimeVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "java_specification_version" field.</summary>
    public const int JavaSpecificationVersionFieldNumber = 7;
    private string javaSpecificationVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JavaSpecificationVersion {
      get { return javaSpecificationVersion_; }
      set {
        javaSpecificationVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "os_name" field.</summary>
    public const int OsNameFieldNumber = 8;
    private string osName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OsName {
      get { return osName_; }
      set {
        osName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "os_arch" field.</summary>
    public const int OsArchFieldNumber = 9;
    private string osArch_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OsArch {
      get { return osArch_; }
      set {
        osArch_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "os_version" field.</summary>
    public const int OsVersionFieldNumber = 10;
    private string osVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OsVersion {
      get { return osVersion_; }
      set {
        osVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "memory_total_gb" field.</summary>
    public const int MemoryTotalGbFieldNumber = 11;
    private string memoryTotalGb_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MemoryTotalGb {
      get { return memoryTotalGb_; }
      set {
        memoryTotalGb_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "memory_max_gb" field.</summary>
    public const int MemoryMaxGbFieldNumber = 12;
    private string memoryMaxGb_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MemoryMaxGb {
      get { return memoryMaxGb_; }
      set {
        memoryMaxGb_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "processor_count" field.</summary>
    public const int ProcessorCountFieldNumber = 13;
    private string processorCount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProcessorCount {
      get { return processorCount_; }
      set {
        processorCount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "processor_type" field.</summary>
    public const int ProcessorTypeFieldNumber = 14;
    private string processorType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProcessorType {
      get { return processorType_; }
      set {
        processorType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "working_directory" field.</summary>
    public const int WorkingDirectoryFieldNumber = 15;
    private string workingDirectory_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string WorkingDirectory {
      get { return workingDirectory_; }
      set {
        workingDirectory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "datetime_now_utc" field.</summary>
    public const int DatetimeNowUtcFieldNumber = 16;
    private string datetimeNowUtc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DatetimeNowUtc {
      get { return datetimeNowUtc_; }
      set {
        datetimeNowUtc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nodecore_properties_source" field.</summary>
    public const int NodecorePropertiesSourceFieldNumber = 17;
    private string nodecorePropertiesSource_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NodecorePropertiesSource {
      get { return nodecorePropertiesSource_; }
      set {
        nodecorePropertiesSource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nodecore_properties_values" field.</summary>
    public const int NodecorePropertiesValuesFieldNumber = 18;
    private static readonly pb::FieldCodec<string> _repeated_nodecorePropertiesValues_codec
        = pb::FieldCodec.ForString(146);
    private readonly pbc::RepeatedField<string> nodecorePropertiesValues_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> NodecorePropertiesValues {
      get { return nodecorePropertiesValues_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetDiagnosticInfoReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetDiagnosticInfoReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if (UserLanguage != other.UserLanguage) return false;
      if (JavaRuntimeName != other.JavaRuntimeName) return false;
      if (SunBootLibraryPath != other.SunBootLibraryPath) return false;
      if (JavaRuntimeVersion != other.JavaRuntimeVersion) return false;
      if (JavaSpecificationVersion != other.JavaSpecificationVersion) return false;
      if (OsName != other.OsName) return false;
      if (OsArch != other.OsArch) return false;
      if (OsVersion != other.OsVersion) return false;
      if (MemoryTotalGb != other.MemoryTotalGb) return false;
      if (MemoryMaxGb != other.MemoryMaxGb) return false;
      if (ProcessorCount != other.ProcessorCount) return false;
      if (ProcessorType != other.ProcessorType) return false;
      if (WorkingDirectory != other.WorkingDirectory) return false;
      if (DatetimeNowUtc != other.DatetimeNowUtc) return false;
      if (NodecorePropertiesSource != other.NodecorePropertiesSource) return false;
      if(!nodecorePropertiesValues_.Equals(other.nodecorePropertiesValues_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      if (UserLanguage.Length != 0) hash ^= UserLanguage.GetHashCode();
      if (JavaRuntimeName.Length != 0) hash ^= JavaRuntimeName.GetHashCode();
      if (SunBootLibraryPath.Length != 0) hash ^= SunBootLibraryPath.GetHashCode();
      if (JavaRuntimeVersion.Length != 0) hash ^= JavaRuntimeVersion.GetHashCode();
      if (JavaSpecificationVersion.Length != 0) hash ^= JavaSpecificationVersion.GetHashCode();
      if (OsName.Length != 0) hash ^= OsName.GetHashCode();
      if (OsArch.Length != 0) hash ^= OsArch.GetHashCode();
      if (OsVersion.Length != 0) hash ^= OsVersion.GetHashCode();
      if (MemoryTotalGb.Length != 0) hash ^= MemoryTotalGb.GetHashCode();
      if (MemoryMaxGb.Length != 0) hash ^= MemoryMaxGb.GetHashCode();
      if (ProcessorCount.Length != 0) hash ^= ProcessorCount.GetHashCode();
      if (ProcessorType.Length != 0) hash ^= ProcessorType.GetHashCode();
      if (WorkingDirectory.Length != 0) hash ^= WorkingDirectory.GetHashCode();
      if (DatetimeNowUtc.Length != 0) hash ^= DatetimeNowUtc.GetHashCode();
      if (NodecorePropertiesSource.Length != 0) hash ^= NodecorePropertiesSource.GetHashCode();
      hash ^= nodecorePropertiesValues_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      if (UserLanguage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserLanguage);
      }
      if (JavaRuntimeName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(JavaRuntimeName);
      }
      if (SunBootLibraryPath.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(SunBootLibraryPath);
      }
      if (JavaRuntimeVersion.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(JavaRuntimeVersion);
      }
      if (JavaSpecificationVersion.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(JavaSpecificationVersion);
      }
      if (OsName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(OsName);
      }
      if (OsArch.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(OsArch);
      }
      if (OsVersion.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(OsVersion);
      }
      if (MemoryTotalGb.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(MemoryTotalGb);
      }
      if (MemoryMaxGb.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(MemoryMaxGb);
      }
      if (ProcessorCount.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(ProcessorCount);
      }
      if (ProcessorType.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(ProcessorType);
      }
      if (WorkingDirectory.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(WorkingDirectory);
      }
      if (DatetimeNowUtc.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(DatetimeNowUtc);
      }
      if (NodecorePropertiesSource.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(NodecorePropertiesSource);
      }
      nodecorePropertiesValues_.WriteTo(output, _repeated_nodecorePropertiesValues_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      if (UserLanguage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserLanguage);
      }
      if (JavaRuntimeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JavaRuntimeName);
      }
      if (SunBootLibraryPath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SunBootLibraryPath);
      }
      if (JavaRuntimeVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JavaRuntimeVersion);
      }
      if (JavaSpecificationVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JavaSpecificationVersion);
      }
      if (OsName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OsName);
      }
      if (OsArch.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OsArch);
      }
      if (OsVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OsVersion);
      }
      if (MemoryTotalGb.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MemoryTotalGb);
      }
      if (MemoryMaxGb.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MemoryMaxGb);
      }
      if (ProcessorCount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProcessorCount);
      }
      if (ProcessorType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProcessorType);
      }
      if (WorkingDirectory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(WorkingDirectory);
      }
      if (DatetimeNowUtc.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DatetimeNowUtc);
      }
      if (NodecorePropertiesSource.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(NodecorePropertiesSource);
      }
      size += nodecorePropertiesValues_.CalculateSize(_repeated_nodecorePropertiesValues_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetDiagnosticInfoReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      if (other.UserLanguage.Length != 0) {
        UserLanguage = other.UserLanguage;
      }
      if (other.JavaRuntimeName.Length != 0) {
        JavaRuntimeName = other.JavaRuntimeName;
      }
      if (other.SunBootLibraryPath.Length != 0) {
        SunBootLibraryPath = other.SunBootLibraryPath;
      }
      if (other.JavaRuntimeVersion.Length != 0) {
        JavaRuntimeVersion = other.JavaRuntimeVersion;
      }
      if (other.JavaSpecificationVersion.Length != 0) {
        JavaSpecificationVersion = other.JavaSpecificationVersion;
      }
      if (other.OsName.Length != 0) {
        OsName = other.OsName;
      }
      if (other.OsArch.Length != 0) {
        OsArch = other.OsArch;
      }
      if (other.OsVersion.Length != 0) {
        OsVersion = other.OsVersion;
      }
      if (other.MemoryTotalGb.Length != 0) {
        MemoryTotalGb = other.MemoryTotalGb;
      }
      if (other.MemoryMaxGb.Length != 0) {
        MemoryMaxGb = other.MemoryMaxGb;
      }
      if (other.ProcessorCount.Length != 0) {
        ProcessorCount = other.ProcessorCount;
      }
      if (other.ProcessorType.Length != 0) {
        ProcessorType = other.ProcessorType;
      }
      if (other.WorkingDirectory.Length != 0) {
        WorkingDirectory = other.WorkingDirectory;
      }
      if (other.DatetimeNowUtc.Length != 0) {
        DatetimeNowUtc = other.DatetimeNowUtc;
      }
      if (other.NodecorePropertiesSource.Length != 0) {
        NodecorePropertiesSource = other.NodecorePropertiesSource;
      }
      nodecorePropertiesValues_.Add(other.nodecorePropertiesValues_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            UserLanguage = input.ReadString();
            break;
          }
          case 34: {
            JavaRuntimeName = input.ReadString();
            break;
          }
          case 42: {
            SunBootLibraryPath = input.ReadString();
            break;
          }
          case 50: {
            JavaRuntimeVersion = input.ReadString();
            break;
          }
          case 58: {
            JavaSpecificationVersion = input.ReadString();
            break;
          }
          case 66: {
            OsName = input.ReadString();
            break;
          }
          case 74: {
            OsArch = input.ReadString();
            break;
          }
          case 82: {
            OsVersion = input.ReadString();
            break;
          }
          case 90: {
            MemoryTotalGb = input.ReadString();
            break;
          }
          case 98: {
            MemoryMaxGb = input.ReadString();
            break;
          }
          case 106: {
            ProcessorCount = input.ReadString();
            break;
          }
          case 114: {
            ProcessorType = input.ReadString();
            break;
          }
          case 122: {
            WorkingDirectory = input.ReadString();
            break;
          }
          case 130: {
            DatetimeNowUtc = input.ReadString();
            break;
          }
          case 138: {
            NodecorePropertiesSource = input.ReadString();
            break;
          }
          case 146: {
            nodecorePropertiesValues_.AddEntriesFrom(input, _repeated_nodecorePropertiesValues_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetPendingTransactionsRequest : pb::IMessage<GetPendingTransactionsRequest> {
    private static readonly pb::MessageParser<GetPendingTransactionsRequest> _parser = new pb::MessageParser<GetPendingTransactionsRequest>(() => new GetPendingTransactionsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPendingTransactionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[132]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPendingTransactionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPendingTransactionsRequest(GetPendingTransactionsRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPendingTransactionsRequest Clone() {
      return new GetPendingTransactionsRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPendingTransactionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPendingTransactionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPendingTransactionsRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetPendingTransactionsReply : pb::IMessage<GetPendingTransactionsReply> {
    private static readonly pb::MessageParser<GetPendingTransactionsReply> _parser = new pb::MessageParser<GetPendingTransactionsReply>(() => new GetPendingTransactionsReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetPendingTransactionsReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[133]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPendingTransactionsReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPendingTransactionsReply(GetPendingTransactionsReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      transactions_ = other.transactions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetPendingTransactionsReply Clone() {
      return new GetPendingTransactionsReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Core.Transaction> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(26, global::Core.Transaction.Parser);
    private readonly pbc::RepeatedField<global::Core.Transaction> transactions_ = new pbc::RepeatedField<global::Core.Transaction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Transaction> Transactions {
      get { return transactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetPendingTransactionsReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetPendingTransactionsReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if(!transactions_.Equals(other.transactions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      hash ^= transactions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      transactions_.WriteTo(output, _repeated_transactions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetPendingTransactionsReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      transactions_.Add(other.transactions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetNewAddressRequest : pb::IMessage<GetNewAddressRequest> {
    private static readonly pb::MessageParser<GetNewAddressRequest> _parser = new pb::MessageParser<GetNewAddressRequest>(() => new GetNewAddressRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetNewAddressRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[134]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNewAddressRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNewAddressRequest(GetNewAddressRequest other) : this() {
      count_ = other.count_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNewAddressRequest Clone() {
      return new GetNewAddressRequest(this);
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 1;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetNewAddressRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetNewAddressRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Count != other.Count) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Count != 0) hash ^= Count.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Count != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Count);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetNewAddressRequest other) {
      if (other == null) {
        return;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetNewAddressReply : pb::IMessage<GetNewAddressReply> {
    private static readonly pb::MessageParser<GetNewAddressReply> _parser = new pb::MessageParser<GetNewAddressReply>(() => new GetNewAddressReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetNewAddressReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[135]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNewAddressReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNewAddressReply(GetNewAddressReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      address_ = other.address_;
      additionalAddresses_ = other.additionalAddresses_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetNewAddressReply Clone() {
      return new GetNewAddressReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 3;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "additional_addresses" field.</summary>
    public const int AdditionalAddressesFieldNumber = 4;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_additionalAddresses_codec
        = pb::FieldCodec.ForBytes(34);
    private readonly pbc::RepeatedField<pb::ByteString> additionalAddresses_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> AdditionalAddresses {
      get { return additionalAddresses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetNewAddressReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetNewAddressReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if (Address != other.Address) return false;
      if(!additionalAddresses_.Equals(other.additionalAddresses_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      hash ^= additionalAddresses_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      if (Address.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Address);
      }
      additionalAddresses_.WriteTo(output, _repeated_additionalAddresses_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      size += additionalAddresses_.CalculateSize(_repeated_additionalAddresses_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetNewAddressReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      additionalAddresses_.Add(other.additionalAddresses_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            Address = input.ReadBytes();
            break;
          }
          case 34: {
            additionalAddresses_.AddEntriesFrom(input, _repeated_additionalAddresses_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ValidateAddressRequest : pb::IMessage<ValidateAddressRequest> {
    private static readonly pb::MessageParser<ValidateAddressRequest> _parser = new pb::MessageParser<ValidateAddressRequest>(() => new ValidateAddressRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValidateAddressRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[136]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateAddressRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateAddressRequest(ValidateAddressRequest other) : this() {
      address_ = other.address_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateAddressRequest Clone() {
      return new ValidateAddressRequest(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValidateAddressRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValidateAddressRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Address);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValidateAddressRequest other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ValidateAddressReply : pb::IMessage<ValidateAddressReply> {
    private static readonly pb::MessageParser<ValidateAddressReply> _parser = new pb::MessageParser<ValidateAddressReply>(() => new ValidateAddressReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ValidateAddressReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[137]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateAddressReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateAddressReply(ValidateAddressReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      address_ = other.address_;
      publicKey_ = other.publicKey_;
      isRemote_ = other.isRemote_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValidateAddressReply Clone() {
      return new ValidateAddressReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 3;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 4;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_remote" field.</summary>
    public const int IsRemoteFieldNumber = 5;
    private bool isRemote_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsRemote {
      get { return isRemote_; }
      set {
        isRemote_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ValidateAddressReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ValidateAddressReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if (Address != other.Address) return false;
      if (PublicKey != other.PublicKey) return false;
      if (IsRemote != other.IsRemote) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      if (IsRemote != false) hash ^= IsRemote.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      if (Address.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Address);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(PublicKey);
      }
      if (IsRemote != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsRemote);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      if (IsRemote != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ValidateAddressReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
      if (other.IsRemote != false) {
        IsRemote = other.IsRemote;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            Address = input.ReadBytes();
            break;
          }
          case 34: {
            PublicKey = input.ReadBytes();
            break;
          }
          case 40: {
            IsRemote = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GenerateMultisigAddressRequest : pb::IMessage<GenerateMultisigAddressRequest> {
    private static readonly pb::MessageParser<GenerateMultisigAddressRequest> _parser = new pb::MessageParser<GenerateMultisigAddressRequest>(() => new GenerateMultisigAddressRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GenerateMultisigAddressRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[138]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateMultisigAddressRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateMultisigAddressRequest(GenerateMultisigAddressRequest other) : this() {
      sourceAddresses_ = other.sourceAddresses_.Clone();
      signatureThresholdM_ = other.signatureThresholdM_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateMultisigAddressRequest Clone() {
      return new GenerateMultisigAddressRequest(this);
    }

    /// <summary>Field number for the "source_addresses" field.</summary>
    public const int SourceAddressesFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_sourceAddresses_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> sourceAddresses_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> SourceAddresses {
      get { return sourceAddresses_; }
    }

    /// <summary>Field number for the "signature_threshold_m" field.</summary>
    public const int SignatureThresholdMFieldNumber = 2;
    private int signatureThresholdM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SignatureThresholdM {
      get { return signatureThresholdM_; }
      set {
        signatureThresholdM_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GenerateMultisigAddressRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GenerateMultisigAddressRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sourceAddresses_.Equals(other.sourceAddresses_)) return false;
      if (SignatureThresholdM != other.SignatureThresholdM) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sourceAddresses_.GetHashCode();
      if (SignatureThresholdM != 0) hash ^= SignatureThresholdM.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sourceAddresses_.WriteTo(output, _repeated_sourceAddresses_codec);
      if (SignatureThresholdM != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SignatureThresholdM);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sourceAddresses_.CalculateSize(_repeated_sourceAddresses_codec);
      if (SignatureThresholdM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SignatureThresholdM);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GenerateMultisigAddressRequest other) {
      if (other == null) {
        return;
      }
      sourceAddresses_.Add(other.sourceAddresses_);
      if (other.SignatureThresholdM != 0) {
        SignatureThresholdM = other.SignatureThresholdM;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            sourceAddresses_.AddEntriesFrom(input, _repeated_sourceAddresses_codec);
            break;
          }
          case 16: {
            SignatureThresholdM = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GenerateMultisigAddressReply : pb::IMessage<GenerateMultisigAddressReply> {
    private static readonly pb::MessageParser<GenerateMultisigAddressReply> _parser = new pb::MessageParser<GenerateMultisigAddressReply>(() => new GenerateMultisigAddressReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GenerateMultisigAddressReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[139]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateMultisigAddressReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateMultisigAddressReply(GenerateMultisigAddressReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      sourceAddresses_ = other.sourceAddresses_.Clone();
      signatureThresholdM_ = other.signatureThresholdM_;
      multisigAddress_ = other.multisigAddress_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GenerateMultisigAddressReply Clone() {
      return new GenerateMultisigAddressReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "source_addresses" field.</summary>
    public const int SourceAddressesFieldNumber = 3;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_sourceAddresses_codec
        = pb::FieldCodec.ForBytes(26);
    private readonly pbc::RepeatedField<pb::ByteString> sourceAddresses_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> SourceAddresses {
      get { return sourceAddresses_; }
    }

    /// <summary>Field number for the "signature_threshold_m" field.</summary>
    public const int SignatureThresholdMFieldNumber = 4;
    private int signatureThresholdM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SignatureThresholdM {
      get { return signatureThresholdM_; }
      set {
        signatureThresholdM_ = value;
      }
    }

    /// <summary>Field number for the "multisig_address" field.</summary>
    public const int MultisigAddressFieldNumber = 5;
    private pb::ByteString multisigAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString MultisigAddress {
      get { return multisigAddress_; }
      set {
        multisigAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GenerateMultisigAddressReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GenerateMultisigAddressReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if(!sourceAddresses_.Equals(other.sourceAddresses_)) return false;
      if (SignatureThresholdM != other.SignatureThresholdM) return false;
      if (MultisigAddress != other.MultisigAddress) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      hash ^= sourceAddresses_.GetHashCode();
      if (SignatureThresholdM != 0) hash ^= SignatureThresholdM.GetHashCode();
      if (MultisigAddress.Length != 0) hash ^= MultisigAddress.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      sourceAddresses_.WriteTo(output, _repeated_sourceAddresses_codec);
      if (SignatureThresholdM != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SignatureThresholdM);
      }
      if (MultisigAddress.Length != 0) {
        output.WriteRawTag(42);
        output.WriteBytes(MultisigAddress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      size += sourceAddresses_.CalculateSize(_repeated_sourceAddresses_codec);
      if (SignatureThresholdM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SignatureThresholdM);
      }
      if (MultisigAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MultisigAddress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GenerateMultisigAddressReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      sourceAddresses_.Add(other.sourceAddresses_);
      if (other.SignatureThresholdM != 0) {
        SignatureThresholdM = other.SignatureThresholdM;
      }
      if (other.MultisigAddress.Length != 0) {
        MultisigAddress = other.MultisigAddress;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            sourceAddresses_.AddEntriesFrom(input, _repeated_sourceAddresses_codec);
            break;
          }
          case 32: {
            SignatureThresholdM = input.ReadInt32();
            break;
          }
          case 42: {
            MultisigAddress = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MakeUnsignedMultisigTxRequest : pb::IMessage<MakeUnsignedMultisigTxRequest> {
    private static readonly pb::MessageParser<MakeUnsignedMultisigTxRequest> _parser = new pb::MessageParser<MakeUnsignedMultisigTxRequest>(() => new MakeUnsignedMultisigTxRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MakeUnsignedMultisigTxRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[140]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakeUnsignedMultisigTxRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakeUnsignedMultisigTxRequest(MakeUnsignedMultisigTxRequest other) : this() {
      sourceMultisigAddress_ = other.sourceMultisigAddress_;
      amounts_ = other.amounts_.Clone();
      fee_ = other.fee_;
      signatureIndexString_ = other.signatureIndexString_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakeUnsignedMultisigTxRequest Clone() {
      return new MakeUnsignedMultisigTxRequest(this);
    }

    /// <summary>Field number for the "source_multisig_address" field.</summary>
    public const int SourceMultisigAddressFieldNumber = 1;
    private pb::ByteString sourceMultisigAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SourceMultisigAddress {
      get { return sourceMultisigAddress_; }
      set {
        sourceMultisigAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "amounts" field.</summary>
    public const int AmountsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Output> _repeated_amounts_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Output.Parser);
    private readonly pbc::RepeatedField<global::Core.Output> amounts_ = new pbc::RepeatedField<global::Core.Output>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Output> Amounts {
      get { return amounts_; }
    }

    /// <summary>Field number for the "fee" field.</summary>
    public const int FeeFieldNumber = 3;
    private long fee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Fee {
      get { return fee_; }
      set {
        fee_ = value;
      }
    }

    /// <summary>Field number for the "signature_index_string" field.</summary>
    public const int SignatureIndexStringFieldNumber = 4;
    private pb::ByteString signatureIndexString_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SignatureIndexString {
      get { return signatureIndexString_; }
      set {
        signatureIndexString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MakeUnsignedMultisigTxRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MakeUnsignedMultisigTxRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceMultisigAddress != other.SourceMultisigAddress) return false;
      if(!amounts_.Equals(other.amounts_)) return false;
      if (Fee != other.Fee) return false;
      if (SignatureIndexString != other.SignatureIndexString) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourceMultisigAddress.Length != 0) hash ^= SourceMultisigAddress.GetHashCode();
      hash ^= amounts_.GetHashCode();
      if (Fee != 0L) hash ^= Fee.GetHashCode();
      if (SignatureIndexString.Length != 0) hash ^= SignatureIndexString.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SourceMultisigAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(SourceMultisigAddress);
      }
      amounts_.WriteTo(output, _repeated_amounts_codec);
      if (Fee != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Fee);
      }
      if (SignatureIndexString.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(SignatureIndexString);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourceMultisigAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SourceMultisigAddress);
      }
      size += amounts_.CalculateSize(_repeated_amounts_codec);
      if (Fee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fee);
      }
      if (SignatureIndexString.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SignatureIndexString);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MakeUnsignedMultisigTxRequest other) {
      if (other == null) {
        return;
      }
      if (other.SourceMultisigAddress.Length != 0) {
        SourceMultisigAddress = other.SourceMultisigAddress;
      }
      amounts_.Add(other.amounts_);
      if (other.Fee != 0L) {
        Fee = other.Fee;
      }
      if (other.SignatureIndexString.Length != 0) {
        SignatureIndexString = other.SignatureIndexString;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SourceMultisigAddress = input.ReadBytes();
            break;
          }
          case 18: {
            amounts_.AddEntriesFrom(input, _repeated_amounts_codec);
            break;
          }
          case 24: {
            Fee = input.ReadInt64();
            break;
          }
          case 34: {
            SignatureIndexString = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MakeUnsignedMultisigTxReply : pb::IMessage<MakeUnsignedMultisigTxReply> {
    private static readonly pb::MessageParser<MakeUnsignedMultisigTxReply> _parser = new pb::MessageParser<MakeUnsignedMultisigTxReply>(() => new MakeUnsignedMultisigTxReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MakeUnsignedMultisigTxReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[141]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakeUnsignedMultisigTxReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakeUnsignedMultisigTxReply(MakeUnsignedMultisigTxReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      signatureThresholdM_ = other.signatureThresholdM_;
      addressCompositionCountN_ = other.addressCompositionCountN_;
      UnsignedMultisigTransactionWithIndex = other.unsignedMultisigTransactionWithIndex_ != null ? other.UnsignedMultisigTransactionWithIndex.Clone() : null;
      txid_ = other.txid_;
      signatureIndex_ = other.signatureIndex_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MakeUnsignedMultisigTxReply Clone() {
      return new MakeUnsignedMultisigTxReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "signature_threshold_m" field.</summary>
    public const int SignatureThresholdMFieldNumber = 3;
    private int signatureThresholdM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SignatureThresholdM {
      get { return signatureThresholdM_; }
      set {
        signatureThresholdM_ = value;
      }
    }

    /// <summary>Field number for the "address_composition_count_n" field.</summary>
    public const int AddressCompositionCountNFieldNumber = 4;
    private int addressCompositionCountN_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddressCompositionCountN {
      get { return addressCompositionCountN_; }
      set {
        addressCompositionCountN_ = value;
      }
    }

    /// <summary>Field number for the "unsigned_multisig_transaction_with_index" field.</summary>
    public const int UnsignedMultisigTransactionWithIndexFieldNumber = 5;
    private global::Core.UnsignedMultisigTransactionWithIndex unsignedMultisigTransactionWithIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.UnsignedMultisigTransactionWithIndex UnsignedMultisigTransactionWithIndex {
      get { return unsignedMultisigTransactionWithIndex_; }
      set {
        unsignedMultisigTransactionWithIndex_ = value;
      }
    }

    /// <summary>Field number for the "txid" field.</summary>
    public const int TxidFieldNumber = 6;
    private pb::ByteString txid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Txid {
      get { return txid_; }
      set {
        txid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signature_index" field.</summary>
    public const int SignatureIndexFieldNumber = 7;
    private long signatureIndex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SignatureIndex {
      get { return signatureIndex_; }
      set {
        signatureIndex_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MakeUnsignedMultisigTxReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MakeUnsignedMultisigTxReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if (SignatureThresholdM != other.SignatureThresholdM) return false;
      if (AddressCompositionCountN != other.AddressCompositionCountN) return false;
      if (!object.Equals(UnsignedMultisigTransactionWithIndex, other.UnsignedMultisigTransactionWithIndex)) return false;
      if (Txid != other.Txid) return false;
      if (SignatureIndex != other.SignatureIndex) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      if (SignatureThresholdM != 0) hash ^= SignatureThresholdM.GetHashCode();
      if (AddressCompositionCountN != 0) hash ^= AddressCompositionCountN.GetHashCode();
      if (unsignedMultisigTransactionWithIndex_ != null) hash ^= UnsignedMultisigTransactionWithIndex.GetHashCode();
      if (Txid.Length != 0) hash ^= Txid.GetHashCode();
      if (SignatureIndex != 0L) hash ^= SignatureIndex.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      if (SignatureThresholdM != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SignatureThresholdM);
      }
      if (AddressCompositionCountN != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AddressCompositionCountN);
      }
      if (unsignedMultisigTransactionWithIndex_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(UnsignedMultisigTransactionWithIndex);
      }
      if (Txid.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Txid);
      }
      if (SignatureIndex != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(SignatureIndex);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      if (SignatureThresholdM != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SignatureThresholdM);
      }
      if (AddressCompositionCountN != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddressCompositionCountN);
      }
      if (unsignedMultisigTransactionWithIndex_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UnsignedMultisigTransactionWithIndex);
      }
      if (Txid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Txid);
      }
      if (SignatureIndex != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SignatureIndex);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MakeUnsignedMultisigTxReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      if (other.SignatureThresholdM != 0) {
        SignatureThresholdM = other.SignatureThresholdM;
      }
      if (other.AddressCompositionCountN != 0) {
        AddressCompositionCountN = other.AddressCompositionCountN;
      }
      if (other.unsignedMultisigTransactionWithIndex_ != null) {
        if (unsignedMultisigTransactionWithIndex_ == null) {
          unsignedMultisigTransactionWithIndex_ = new global::Core.UnsignedMultisigTransactionWithIndex();
        }
        UnsignedMultisigTransactionWithIndex.MergeFrom(other.UnsignedMultisigTransactionWithIndex);
      }
      if (other.Txid.Length != 0) {
        Txid = other.Txid;
      }
      if (other.SignatureIndex != 0L) {
        SignatureIndex = other.SignatureIndex;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 24: {
            SignatureThresholdM = input.ReadInt32();
            break;
          }
          case 32: {
            AddressCompositionCountN = input.ReadInt32();
            break;
          }
          case 42: {
            if (unsignedMultisigTransactionWithIndex_ == null) {
              unsignedMultisigTransactionWithIndex_ = new global::Core.UnsignedMultisigTransactionWithIndex();
            }
            input.ReadMessage(unsignedMultisigTransactionWithIndex_);
            break;
          }
          case 50: {
            Txid = input.ReadBytes();
            break;
          }
          case 56: {
            SignatureIndex = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubmitMultisigTxRequest : pb::IMessage<SubmitMultisigTxRequest> {
    private static readonly pb::MessageParser<SubmitMultisigTxRequest> _parser = new pb::MessageParser<SubmitMultisigTxRequest>(() => new SubmitMultisigTxRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubmitMultisigTxRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[142]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitMultisigTxRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitMultisigTxRequest(SubmitMultisigTxRequest other) : this() {
      MultisigTransaction = other.multisigTransaction_ != null ? other.MultisigTransaction.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitMultisigTxRequest Clone() {
      return new SubmitMultisigTxRequest(this);
    }

    /// <summary>Field number for the "multisig_transaction" field.</summary>
    public const int MultisigTransactionFieldNumber = 3;
    private global::Core.SignedMultisigTransaction multisigTransaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.SignedMultisigTransaction MultisigTransaction {
      get { return multisigTransaction_; }
      set {
        multisigTransaction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubmitMultisigTxRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubmitMultisigTxRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MultisigTransaction, other.MultisigTransaction)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (multisigTransaction_ != null) hash ^= MultisigTransaction.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (multisigTransaction_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MultisigTransaction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (multisigTransaction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MultisigTransaction);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubmitMultisigTxRequest other) {
      if (other == null) {
        return;
      }
      if (other.multisigTransaction_ != null) {
        if (multisigTransaction_ == null) {
          multisigTransaction_ = new global::Core.SignedMultisigTransaction();
        }
        MultisigTransaction.MergeFrom(other.MultisigTransaction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 26: {
            if (multisigTransaction_ == null) {
              multisigTransaction_ = new global::Core.SignedMultisigTransaction();
            }
            input.ReadMessage(multisigTransaction_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SubmitMultisigTxReply : pb::IMessage<SubmitMultisigTxReply> {
    private static readonly pb::MessageParser<SubmitMultisigTxReply> _parser = new pb::MessageParser<SubmitMultisigTxReply>(() => new SubmitMultisigTxReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SubmitMultisigTxReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[143]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitMultisigTxReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitMultisigTxReply(SubmitMultisigTxReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      txid_ = other.txid_;
      SignedMultisigTransaction = other.signedMultisigTransaction_ != null ? other.SignedMultisigTransaction.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SubmitMultisigTxReply Clone() {
      return new SubmitMultisigTxReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "txid" field.</summary>
    public const int TxidFieldNumber = 3;
    private pb::ByteString txid_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Txid {
      get { return txid_; }
      set {
        txid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "signed_multisig_transaction" field.</summary>
    public const int SignedMultisigTransactionFieldNumber = 4;
    private global::Core.SignedMultisigTransaction signedMultisigTransaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.SignedMultisigTransaction SignedMultisigTransaction {
      get { return signedMultisigTransaction_; }
      set {
        signedMultisigTransaction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SubmitMultisigTxReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SubmitMultisigTxReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if (Txid != other.Txid) return false;
      if (!object.Equals(SignedMultisigTransaction, other.SignedMultisigTransaction)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      if (Txid.Length != 0) hash ^= Txid.GetHashCode();
      if (signedMultisigTransaction_ != null) hash ^= SignedMultisigTransaction.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      if (Txid.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Txid);
      }
      if (signedMultisigTransaction_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SignedMultisigTransaction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      if (Txid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Txid);
      }
      if (signedMultisigTransaction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SignedMultisigTransaction);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SubmitMultisigTxReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      if (other.Txid.Length != 0) {
        Txid = other.Txid;
      }
      if (other.signedMultisigTransaction_ != null) {
        if (signedMultisigTransaction_ == null) {
          signedMultisigTransaction_ = new global::Core.SignedMultisigTransaction();
        }
        SignedMultisigTransaction.MergeFrom(other.SignedMultisigTransaction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            Txid = input.ReadBytes();
            break;
          }
          case 34: {
            if (signedMultisigTransaction_ == null) {
              signedMultisigTransaction_ = new global::Core.SignedMultisigTransaction();
            }
            input.ReadMessage(signedMultisigTransaction_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SignMessageRequest : pb::IMessage<SignMessageRequest> {
    private static readonly pb::MessageParser<SignMessageRequest> _parser = new pb::MessageParser<SignMessageRequest>(() => new SignMessageRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignMessageRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[144]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignMessageRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignMessageRequest(SignMessageRequest other) : this() {
      address_ = other.address_;
      message_ = other.message_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignMessageRequest Clone() {
      return new SignMessageRequest(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 2;
    private pb::ByteString message_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignMessageRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignMessageRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (Message != other.Message) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Address);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Message);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Message);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignMessageRequest other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadBytes();
            break;
          }
          case 18: {
            Message = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SignMessageReply : pb::IMessage<SignMessageReply> {
    private static readonly pb::MessageParser<SignMessageReply> _parser = new pb::MessageParser<SignMessageReply>(() => new SignMessageReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SignMessageReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[145]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignMessageReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignMessageReply(SignMessageReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      signedMessage_ = other.signedMessage_;
      publicKey_ = other.publicKey_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SignMessageReply Clone() {
      return new SignMessageReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "signed_message" field.</summary>
    public const int SignedMessageFieldNumber = 3;
    private pb::ByteString signedMessage_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SignedMessage {
      get { return signedMessage_; }
      set {
        signedMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "public_key" field.</summary>
    public const int PublicKeyFieldNumber = 4;
    private pb::ByteString publicKey_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PublicKey {
      get { return publicKey_; }
      set {
        publicKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SignMessageReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SignMessageReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if (SignedMessage != other.SignedMessage) return false;
      if (PublicKey != other.PublicKey) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      if (SignedMessage.Length != 0) hash ^= SignedMessage.GetHashCode();
      if (PublicKey.Length != 0) hash ^= PublicKey.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      if (SignedMessage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(SignedMessage);
      }
      if (PublicKey.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(PublicKey);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      if (SignedMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SignedMessage);
      }
      if (PublicKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PublicKey);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SignMessageReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      if (other.SignedMessage.Length != 0) {
        SignedMessage = other.SignedMessage;
      }
      if (other.PublicKey.Length != 0) {
        PublicKey = other.PublicKey;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            SignedMessage = input.ReadBytes();
            break;
          }
          case 34: {
            PublicKey = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBlockTemplateRequest : pb::IMessage<GetBlockTemplateRequest> {
    private static readonly pb::MessageParser<GetBlockTemplateRequest> _parser = new pb::MessageParser<GetBlockTemplateRequest>(() => new GetBlockTemplateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBlockTemplateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[146]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockTemplateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockTemplateRequest(GetBlockTemplateRequest other) : this() {
      mode_ = other.mode_;
      capabilities_ = other.capabilities_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockTemplateRequest Clone() {
      return new GetBlockTemplateRequest(this);
    }

    /// <summary>Field number for the "mode" field.</summary>
    public const int ModeFieldNumber = 1;
    private string mode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Mode {
      get { return mode_; }
      set {
        mode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "capabilities" field.</summary>
    public const int CapabilitiesFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_capabilities_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> capabilities_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Capabilities {
      get { return capabilities_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBlockTemplateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBlockTemplateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Mode != other.Mode) return false;
      if(!capabilities_.Equals(other.capabilities_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Mode.Length != 0) hash ^= Mode.GetHashCode();
      hash ^= capabilities_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Mode.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Mode);
      }
      capabilities_.WriteTo(output, _repeated_capabilities_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Mode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Mode);
      }
      size += capabilities_.CalculateSize(_repeated_capabilities_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBlockTemplateRequest other) {
      if (other == null) {
        return;
      }
      if (other.Mode.Length != 0) {
        Mode = other.Mode;
      }
      capabilities_.Add(other.capabilities_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Mode = input.ReadString();
            break;
          }
          case 18: {
            capabilities_.AddEntriesFrom(input, _repeated_capabilities_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CandidateTransaction : pb::IMessage<CandidateTransaction> {
    private static readonly pb::MessageParser<CandidateTransaction> _parser = new pb::MessageParser<CandidateTransaction>(() => new CandidateTransaction());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CandidateTransaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[147]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateTransaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateTransaction(CandidateTransaction other) : this() {
      fee_ = other.fee_;
      weight_ = other.weight_;
      required_ = other.required_;
      txId_ = other.txId_;
      depends_ = other.depends_.Clone();
      Transaction = other.transaction_ != null ? other.Transaction.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CandidateTransaction Clone() {
      return new CandidateTransaction(this);
    }

    /// <summary>Field number for the "fee" field.</summary>
    public const int FeeFieldNumber = 1;
    private long fee_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Fee {
      get { return fee_; }
      set {
        fee_ = value;
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 2;
    private long weight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "required" field.</summary>
    public const int RequiredFieldNumber = 3;
    private bool required_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Required {
      get { return required_; }
      set {
        required_ = value;
      }
    }

    /// <summary>Field number for the "tx_id" field.</summary>
    public const int TxIdFieldNumber = 4;
    private pb::ByteString txId_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString TxId {
      get { return txId_; }
      set {
        txId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "depends" field.</summary>
    public const int DependsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_depends_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> depends_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Depends {
      get { return depends_; }
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 6;
    private global::Core.TransactionUnion transaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.TransactionUnion Transaction {
      get { return transaction_; }
      set {
        transaction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CandidateTransaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CandidateTransaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fee != other.Fee) return false;
      if (Weight != other.Weight) return false;
      if (Required != other.Required) return false;
      if (TxId != other.TxId) return false;
      if(!depends_.Equals(other.depends_)) return false;
      if (!object.Equals(Transaction, other.Transaction)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fee != 0L) hash ^= Fee.GetHashCode();
      if (Weight != 0L) hash ^= Weight.GetHashCode();
      if (Required != false) hash ^= Required.GetHashCode();
      if (TxId.Length != 0) hash ^= TxId.GetHashCode();
      hash ^= depends_.GetHashCode();
      if (transaction_ != null) hash ^= Transaction.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fee != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Fee);
      }
      if (Weight != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Weight);
      }
      if (Required != false) {
        output.WriteRawTag(24);
        output.WriteBool(Required);
      }
      if (TxId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(TxId);
      }
      depends_.WriteTo(output, _repeated_depends_codec);
      if (transaction_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Transaction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fee != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Fee);
      }
      if (Weight != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Weight);
      }
      if (Required != false) {
        size += 1 + 1;
      }
      if (TxId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TxId);
      }
      size += depends_.CalculateSize(_repeated_depends_codec);
      if (transaction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transaction);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CandidateTransaction other) {
      if (other == null) {
        return;
      }
      if (other.Fee != 0L) {
        Fee = other.Fee;
      }
      if (other.Weight != 0L) {
        Weight = other.Weight;
      }
      if (other.Required != false) {
        Required = other.Required;
      }
      if (other.TxId.Length != 0) {
        TxId = other.TxId;
      }
      depends_.Add(other.depends_);
      if (other.transaction_ != null) {
        if (transaction_ == null) {
          transaction_ = new global::Core.TransactionUnion();
        }
        Transaction.MergeFrom(other.Transaction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Fee = input.ReadInt64();
            break;
          }
          case 16: {
            Weight = input.ReadInt64();
            break;
          }
          case 24: {
            Required = input.ReadBool();
            break;
          }
          case 34: {
            TxId = input.ReadBytes();
            break;
          }
          case 42:
          case 40: {
            depends_.AddEntriesFrom(input, _repeated_depends_codec);
            break;
          }
          case 50: {
            if (transaction_ == null) {
              transaction_ = new global::Core.TransactionUnion();
            }
            input.ReadMessage(transaction_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBlockTemplateReply : pb::IMessage<GetBlockTemplateReply> {
    private static readonly pb::MessageParser<GetBlockTemplateReply> _parser = new pb::MessageParser<GetBlockTemplateReply>(() => new GetBlockTemplateReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBlockTemplateReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[148]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockTemplateReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockTemplateReply(GetBlockTemplateReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      target_ = other.target_;
      sizeLimit_ = other.sizeLimit_;
      blockHeight_ = other.blockHeight_;
      coinbaseValue_ = other.coinbaseValue_;
      minimumTimestamp_ = other.minimumTimestamp_;
      currentTimestamp_ = other.currentTimestamp_;
      mutable_ = other.mutable_.Clone();
      previousBlockHash_ = other.previousBlockHash_;
      secondPreviousBlockHash_ = other.secondPreviousBlockHash_;
      thirdPreviousBlockHash_ = other.thirdPreviousBlockHash_;
      previousLedgerHash_ = other.previousLedgerHash_;
      transactions_ = other.transactions_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBlockTemplateReply Clone() {
      return new GetBlockTemplateReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 3;
    private long target_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    /// <summary>Field number for the "size_limit" field.</summary>
    public const int SizeLimitFieldNumber = 4;
    private long sizeLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long SizeLimit {
      get { return sizeLimit_; }
      set {
        sizeLimit_ = value;
      }
    }

    /// <summary>Field number for the "block_height" field.</summary>
    public const int BlockHeightFieldNumber = 5;
    private int blockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockHeight {
      get { return blockHeight_; }
      set {
        blockHeight_ = value;
      }
    }

    /// <summary>Field number for the "coinbase_value" field.</summary>
    public const int CoinbaseValueFieldNumber = 6;
    private long coinbaseValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CoinbaseValue {
      get { return coinbaseValue_; }
      set {
        coinbaseValue_ = value;
      }
    }

    /// <summary>Field number for the "minimum_timestamp" field.</summary>
    public const int MinimumTimestampFieldNumber = 7;
    private int minimumTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinimumTimestamp {
      get { return minimumTimestamp_; }
      set {
        minimumTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "current_timestamp" field.</summary>
    public const int CurrentTimestampFieldNumber = 8;
    private int currentTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentTimestamp {
      get { return currentTimestamp_; }
      set {
        currentTimestamp_ = value;
      }
    }

    /// <summary>Field number for the "mutable" field.</summary>
    public const int MutableFieldNumber = 9;
    private static readonly pb::FieldCodec<string> _repeated_mutable_codec
        = pb::FieldCodec.ForString(74);
    private readonly pbc::RepeatedField<string> mutable_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Mutable {
      get { return mutable_; }
    }

    /// <summary>Field number for the "previous_block_hash" field.</summary>
    public const int PreviousBlockHashFieldNumber = 10;
    private pb::ByteString previousBlockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PreviousBlockHash {
      get { return previousBlockHash_; }
      set {
        previousBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "second_previous_block_hash" field.</summary>
    public const int SecondPreviousBlockHashFieldNumber = 11;
    private pb::ByteString secondPreviousBlockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SecondPreviousBlockHash {
      get { return secondPreviousBlockHash_; }
      set {
        secondPreviousBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "third_previous_block_hash" field.</summary>
    public const int ThirdPreviousBlockHashFieldNumber = 12;
    private pb::ByteString thirdPreviousBlockHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString ThirdPreviousBlockHash {
      get { return thirdPreviousBlockHash_; }
      set {
        thirdPreviousBlockHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "previous_ledger_hash" field.</summary>
    public const int PreviousLedgerHashFieldNumber = 13;
    private pb::ByteString previousLedgerHash_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PreviousLedgerHash {
      get { return previousLedgerHash_; }
      set {
        previousLedgerHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 14;
    private static readonly pb::FieldCodec<global::Core.CandidateTransaction> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(114, global::Core.CandidateTransaction.Parser);
    private readonly pbc::RepeatedField<global::Core.CandidateTransaction> transactions_ = new pbc::RepeatedField<global::Core.CandidateTransaction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.CandidateTransaction> Transactions {
      get { return transactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBlockTemplateReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBlockTemplateReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if (Target != other.Target) return false;
      if (SizeLimit != other.SizeLimit) return false;
      if (BlockHeight != other.BlockHeight) return false;
      if (CoinbaseValue != other.CoinbaseValue) return false;
      if (MinimumTimestamp != other.MinimumTimestamp) return false;
      if (CurrentTimestamp != other.CurrentTimestamp) return false;
      if(!mutable_.Equals(other.mutable_)) return false;
      if (PreviousBlockHash != other.PreviousBlockHash) return false;
      if (SecondPreviousBlockHash != other.SecondPreviousBlockHash) return false;
      if (ThirdPreviousBlockHash != other.ThirdPreviousBlockHash) return false;
      if (PreviousLedgerHash != other.PreviousLedgerHash) return false;
      if(!transactions_.Equals(other.transactions_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      if (Target != 0L) hash ^= Target.GetHashCode();
      if (SizeLimit != 0L) hash ^= SizeLimit.GetHashCode();
      if (BlockHeight != 0) hash ^= BlockHeight.GetHashCode();
      if (CoinbaseValue != 0L) hash ^= CoinbaseValue.GetHashCode();
      if (MinimumTimestamp != 0) hash ^= MinimumTimestamp.GetHashCode();
      if (CurrentTimestamp != 0) hash ^= CurrentTimestamp.GetHashCode();
      hash ^= mutable_.GetHashCode();
      if (PreviousBlockHash.Length != 0) hash ^= PreviousBlockHash.GetHashCode();
      if (SecondPreviousBlockHash.Length != 0) hash ^= SecondPreviousBlockHash.GetHashCode();
      if (ThirdPreviousBlockHash.Length != 0) hash ^= ThirdPreviousBlockHash.GetHashCode();
      if (PreviousLedgerHash.Length != 0) hash ^= PreviousLedgerHash.GetHashCode();
      hash ^= transactions_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      if (Target != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Target);
      }
      if (SizeLimit != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(SizeLimit);
      }
      if (BlockHeight != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(BlockHeight);
      }
      if (CoinbaseValue != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(CoinbaseValue);
      }
      if (MinimumTimestamp != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MinimumTimestamp);
      }
      if (CurrentTimestamp != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CurrentTimestamp);
      }
      mutable_.WriteTo(output, _repeated_mutable_codec);
      if (PreviousBlockHash.Length != 0) {
        output.WriteRawTag(82);
        output.WriteBytes(PreviousBlockHash);
      }
      if (SecondPreviousBlockHash.Length != 0) {
        output.WriteRawTag(90);
        output.WriteBytes(SecondPreviousBlockHash);
      }
      if (ThirdPreviousBlockHash.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(ThirdPreviousBlockHash);
      }
      if (PreviousLedgerHash.Length != 0) {
        output.WriteRawTag(106);
        output.WriteBytes(PreviousLedgerHash);
      }
      transactions_.WriteTo(output, _repeated_transactions_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      if (Target != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Target);
      }
      if (SizeLimit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SizeLimit);
      }
      if (BlockHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockHeight);
      }
      if (CoinbaseValue != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CoinbaseValue);
      }
      if (MinimumTimestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinimumTimestamp);
      }
      if (CurrentTimestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentTimestamp);
      }
      size += mutable_.CalculateSize(_repeated_mutable_codec);
      if (PreviousBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PreviousBlockHash);
      }
      if (SecondPreviousBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SecondPreviousBlockHash);
      }
      if (ThirdPreviousBlockHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ThirdPreviousBlockHash);
      }
      if (PreviousLedgerHash.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PreviousLedgerHash);
      }
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBlockTemplateReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      if (other.Target != 0L) {
        Target = other.Target;
      }
      if (other.SizeLimit != 0L) {
        SizeLimit = other.SizeLimit;
      }
      if (other.BlockHeight != 0) {
        BlockHeight = other.BlockHeight;
      }
      if (other.CoinbaseValue != 0L) {
        CoinbaseValue = other.CoinbaseValue;
      }
      if (other.MinimumTimestamp != 0) {
        MinimumTimestamp = other.MinimumTimestamp;
      }
      if (other.CurrentTimestamp != 0) {
        CurrentTimestamp = other.CurrentTimestamp;
      }
      mutable_.Add(other.mutable_);
      if (other.PreviousBlockHash.Length != 0) {
        PreviousBlockHash = other.PreviousBlockHash;
      }
      if (other.SecondPreviousBlockHash.Length != 0) {
        SecondPreviousBlockHash = other.SecondPreviousBlockHash;
      }
      if (other.ThirdPreviousBlockHash.Length != 0) {
        ThirdPreviousBlockHash = other.ThirdPreviousBlockHash;
      }
      if (other.PreviousLedgerHash.Length != 0) {
        PreviousLedgerHash = other.PreviousLedgerHash;
      }
      transactions_.Add(other.transactions_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 24: {
            Target = input.ReadInt64();
            break;
          }
          case 32: {
            SizeLimit = input.ReadInt64();
            break;
          }
          case 40: {
            BlockHeight = input.ReadInt32();
            break;
          }
          case 48: {
            CoinbaseValue = input.ReadInt64();
            break;
          }
          case 56: {
            MinimumTimestamp = input.ReadInt32();
            break;
          }
          case 64: {
            CurrentTimestamp = input.ReadInt32();
            break;
          }
          case 74: {
            mutable_.AddEntriesFrom(input, _repeated_mutable_codec);
            break;
          }
          case 82: {
            PreviousBlockHash = input.ReadBytes();
            break;
          }
          case 90: {
            SecondPreviousBlockHash = input.ReadBytes();
            break;
          }
          case 98: {
            ThirdPreviousBlockHash = input.ReadBytes();
            break;
          }
          case 106: {
            PreviousLedgerHash = input.ReadBytes();
            break;
          }
          case 114: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SetBanRequest : pb::IMessage<SetBanRequest> {
    private static readonly pb::MessageParser<SetBanRequest> _parser = new pb::MessageParser<SetBanRequest>(() => new SetBanRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetBanRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[149]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBanRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBanRequest(SetBanRequest other) : this() {
      command_ = other.command_;
      value_ = other.value_;
      reason_ = other.reason_;
      expiryTimestamp_ = other.expiryTimestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetBanRequest Clone() {
      return new SetBanRequest(this);
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 1;
    private global::Core.SetBanRequest.Types.Command command_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.SetBanRequest.Types.Command Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 3;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiry_timestamp" field.</summary>
    public const int ExpiryTimestampFieldNumber = 4;
    private int expiryTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpiryTimestamp {
      get { return expiryTimestamp_; }
      set {
        expiryTimestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetBanRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetBanRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Command != other.Command) return false;
      if (Value != other.Value) return false;
      if (Reason != other.Reason) return false;
      if (ExpiryTimestamp != other.ExpiryTimestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Command != 0) hash ^= Command.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (ExpiryTimestamp != 0) hash ^= ExpiryTimestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Command != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Command);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Reason);
      }
      if (ExpiryTimestamp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ExpiryTimestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Command != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Command);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (ExpiryTimestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpiryTimestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetBanRequest other) {
      if (other == null) {
        return;
      }
      if (other.Command != 0) {
        Command = other.Command;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      if (other.ExpiryTimestamp != 0) {
        ExpiryTimestamp = other.ExpiryTimestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            command_ = (global::Core.SetBanRequest.Types.Command) input.ReadEnum();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
          case 26: {
            Reason = input.ReadString();
            break;
          }
          case 32: {
            ExpiryTimestamp = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SetBanRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Command {
        [pbr::OriginalName("ADD")] Add = 0,
        [pbr::OriginalName("REMOVE")] Remove = 1,
      }

    }
    #endregion

  }

  public sealed partial class SetAllowedRequest : pb::IMessage<SetAllowedRequest> {
    private static readonly pb::MessageParser<SetAllowedRequest> _parser = new pb::MessageParser<SetAllowedRequest>(() => new SetAllowedRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetAllowedRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[150]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetAllowedRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetAllowedRequest(SetAllowedRequest other) : this() {
      command_ = other.command_;
      value_ = other.value_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetAllowedRequest Clone() {
      return new SetAllowedRequest(this);
    }

    /// <summary>Field number for the "command" field.</summary>
    public const int CommandFieldNumber = 1;
    private global::Core.SetAllowedRequest.Types.Command command_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.SetAllowedRequest.Types.Command Command {
      get { return command_; }
      set {
        command_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetAllowedRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetAllowedRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Command != other.Command) return false;
      if (Value != other.Value) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Command != 0) hash ^= Command.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Command != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Command);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Value);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Command != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Command);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetAllowedRequest other) {
      if (other == null) {
        return;
      }
      if (other.Command != 0) {
        Command = other.Command;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            command_ = (global::Core.SetAllowedRequest.Types.Command) input.ReadEnum();
            break;
          }
          case 18: {
            Value = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SetAllowedRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Command {
        [pbr::OriginalName("ADD")] Add = 0,
        [pbr::OriginalName("REMOVE")] Remove = 1,
      }

    }
    #endregion

  }

  public sealed partial class BlackListInfo : pb::IMessage<BlackListInfo> {
    private static readonly pb::MessageParser<BlackListInfo> _parser = new pb::MessageParser<BlackListInfo>(() => new BlackListInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlackListInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[151]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlackListInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlackListInfo(BlackListInfo other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      value_ = other.value_;
      reason_ = other.reason_;
      timestamp_ = other.timestamp_;
      expiryTimestamp_ = other.expiryTimestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlackListInfo Clone() {
      return new BlackListInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Core.BlackListInfo.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.BlackListInfo.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 4;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    private int timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "expiry_timestamp" field.</summary>
    public const int ExpiryTimestampFieldNumber = 6;
    private int expiryTimestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ExpiryTimestamp {
      get { return expiryTimestamp_; }
      set {
        expiryTimestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlackListInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlackListInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      if (Reason != other.Reason) return false;
      if (Timestamp != other.Timestamp) return false;
      if (ExpiryTimestamp != other.ExpiryTimestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      if (ExpiryTimestamp != 0) hash ^= ExpiryTimestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Reason);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Timestamp);
      }
      if (ExpiryTimestamp != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ExpiryTimestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      if (ExpiryTimestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ExpiryTimestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlackListInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
      if (other.ExpiryTimestamp != 0) {
        ExpiryTimestamp = other.ExpiryTimestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            type_ = (global::Core.BlackListInfo.Types.Type) input.ReadEnum();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
          case 34: {
            Reason = input.ReadString();
            break;
          }
          case 40: {
            Timestamp = input.ReadInt32();
            break;
          }
          case 48: {
            ExpiryTimestamp = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BlackListInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("ADDRESS")] Address = 0,
        [pbr::OriginalName("NETMASK")] Netmask = 1,
        [pbr::OriginalName("CIDR")] Cidr = 2,
      }

    }
    #endregion

  }

  public sealed partial class WhiteListInfo : pb::IMessage<WhiteListInfo> {
    private static readonly pb::MessageParser<WhiteListInfo> _parser = new pb::MessageParser<WhiteListInfo>(() => new WhiteListInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WhiteListInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[152]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhiteListInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhiteListInfo(WhiteListInfo other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      value_ = other.value_;
      timestamp_ = other.timestamp_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WhiteListInfo Clone() {
      return new WhiteListInfo(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Core.WhiteListInfo.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.WhiteListInfo.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 3;
    private string value_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 4;
    private int timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WhiteListInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WhiteListInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (Value != other.Value) return false;
      if (Timestamp != other.Timestamp) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Value);
      }
      if (Timestamp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
      }
      if (Timestamp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WhiteListInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.Timestamp != 0) {
        Timestamp = other.Timestamp;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            type_ = (global::Core.WhiteListInfo.Types.Type) input.ReadEnum();
            break;
          }
          case 26: {
            Value = input.ReadString();
            break;
          }
          case 32: {
            Timestamp = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the WhiteListInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("ADDRESS")] Address = 0,
        [pbr::OriginalName("NETMASK")] Netmask = 1,
        [pbr::OriginalName("CIDR")] Cidr = 2,
      }

    }
    #endregion

  }

  public sealed partial class ListBannedRequest : pb::IMessage<ListBannedRequest> {
    private static readonly pb::MessageParser<ListBannedRequest> _parser = new pb::MessageParser<ListBannedRequest>(() => new ListBannedRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListBannedRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[153]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBannedRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBannedRequest(ListBannedRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBannedRequest Clone() {
      return new ListBannedRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListBannedRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListBannedRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListBannedRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ListAllowedRequest : pb::IMessage<ListAllowedRequest> {
    private static readonly pb::MessageParser<ListAllowedRequest> _parser = new pb::MessageParser<ListAllowedRequest>(() => new ListAllowedRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListAllowedRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[154]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllowedRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllowedRequest(ListAllowedRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllowedRequest Clone() {
      return new ListAllowedRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListAllowedRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListAllowedRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListAllowedRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ListBannedReply : pb::IMessage<ListBannedReply> {
    private static readonly pb::MessageParser<ListBannedReply> _parser = new pb::MessageParser<ListBannedReply>(() => new ListBannedReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListBannedReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[155]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBannedReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBannedReply(ListBannedReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      entries_ = other.entries_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBannedReply Clone() {
      return new ListBannedReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Core.BlackListInfo> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(26, global::Core.BlackListInfo.Parser);
    private readonly pbc::RepeatedField<global::Core.BlackListInfo> entries_ = new pbc::RepeatedField<global::Core.BlackListInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.BlackListInfo> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListBannedReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListBannedReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if(!entries_.Equals(other.entries_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      hash ^= entries_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      entries_.WriteTo(output, _repeated_entries_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      size += entries_.CalculateSize(_repeated_entries_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListBannedReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      entries_.Add(other.entries_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListAllowedReply : pb::IMessage<ListAllowedReply> {
    private static readonly pb::MessageParser<ListAllowedReply> _parser = new pb::MessageParser<ListAllowedReply>(() => new ListAllowedReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListAllowedReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[156]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllowedReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllowedReply(ListAllowedReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      entries_ = other.entries_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListAllowedReply Clone() {
      return new ListAllowedReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "entries" field.</summary>
    public const int EntriesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Core.WhiteListInfo> _repeated_entries_codec
        = pb::FieldCodec.ForMessage(26, global::Core.WhiteListInfo.Parser);
    private readonly pbc::RepeatedField<global::Core.WhiteListInfo> entries_ = new pbc::RepeatedField<global::Core.WhiteListInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.WhiteListInfo> Entries {
      get { return entries_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListAllowedReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListAllowedReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if(!entries_.Equals(other.entries_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      hash ^= entries_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      entries_.WriteTo(output, _repeated_entries_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      size += entries_.CalculateSize(_repeated_entries_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListAllowedReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      entries_.Add(other.entries_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            entries_.AddEntriesFrom(input, _repeated_entries_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ListBannedMinersRequest : pb::IMessage<ListBannedMinersRequest> {
    private static readonly pb::MessageParser<ListBannedMinersRequest> _parser = new pb::MessageParser<ListBannedMinersRequest>(() => new ListBannedMinersRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListBannedMinersRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[157]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBannedMinersRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBannedMinersRequest(ListBannedMinersRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBannedMinersRequest Clone() {
      return new ListBannedMinersRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListBannedMinersRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListBannedMinersRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListBannedMinersRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ListBannedMinersReply : pb::IMessage<ListBannedMinersReply> {
    private static readonly pb::MessageParser<ListBannedMinersReply> _parser = new pb::MessageParser<ListBannedMinersReply>(() => new ListBannedMinersReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListBannedMinersReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[158]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBannedMinersReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBannedMinersReply(ListBannedMinersReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      clients_ = other.clients_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListBannedMinersReply Clone() {
      return new ListBannedMinersReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "clients" field.</summary>
    public const int ClientsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_clients_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> clients_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Clients {
      get { return clients_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListBannedMinersReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListBannedMinersReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if(!clients_.Equals(other.clients_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      hash ^= clients_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      clients_.WriteTo(output, _repeated_clients_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      size += clients_.CalculateSize(_repeated_clients_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListBannedMinersReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      clients_.Add(other.clients_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            clients_.AddEntriesFrom(input, _repeated_clients_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ClearBannedRequest : pb::IMessage<ClearBannedRequest> {
    private static readonly pb::MessageParser<ClearBannedRequest> _parser = new pb::MessageParser<ClearBannedRequest>(() => new ClearBannedRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClearBannedRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[159]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearBannedRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearBannedRequest(ClearBannedRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearBannedRequest Clone() {
      return new ClearBannedRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClearBannedRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClearBannedRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClearBannedRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ClearBannedMinersRequest : pb::IMessage<ClearBannedMinersRequest> {
    private static readonly pb::MessageParser<ClearBannedMinersRequest> _parser = new pb::MessageParser<ClearBannedMinersRequest>(() => new ClearBannedMinersRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClearBannedMinersRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[160]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearBannedMinersRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearBannedMinersRequest(ClearBannedMinersRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearBannedMinersRequest Clone() {
      return new ClearBannedMinersRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClearBannedMinersRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClearBannedMinersRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClearBannedMinersRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class ClearAllowedRequest : pb::IMessage<ClearAllowedRequest> {
    private static readonly pb::MessageParser<ClearAllowedRequest> _parser = new pb::MessageParser<ClearAllowedRequest>(() => new ClearAllowedRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClearAllowedRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[161]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearAllowedRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearAllowedRequest(ClearAllowedRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClearAllowedRequest Clone() {
      return new ClearAllowedRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClearAllowedRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClearAllowedRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClearAllowedRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class PingRequest : pb::IMessage<PingRequest> {
    private static readonly pb::MessageParser<PingRequest> _parser = new pb::MessageParser<PingRequest>(() => new PingRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[162]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest(PingRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingRequest Clone() {
      return new PingRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class PingReply : pb::IMessage<PingReply> {
    private static readonly pb::MessageParser<PingReply> _parser = new pb::MessageParser<PingReply>(() => new PingReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PingReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[163]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingReply(PingReply other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PingReply Clone() {
      return new PingReply(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PingReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PingReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PingReply other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetBitcoinBlockIndexRequest : pb::IMessage<GetBitcoinBlockIndexRequest> {
    private static readonly pb::MessageParser<GetBitcoinBlockIndexRequest> _parser = new pb::MessageParser<GetBitcoinBlockIndexRequest>(() => new GetBitcoinBlockIndexRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBitcoinBlockIndexRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[164]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBitcoinBlockIndexRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBitcoinBlockIndexRequest(GetBitcoinBlockIndexRequest other) : this() {
      blockHeader_ = other.blockHeader_;
      searchLength_ = other.searchLength_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBitcoinBlockIndexRequest Clone() {
      return new GetBitcoinBlockIndexRequest(this);
    }

    /// <summary>Field number for the "block_header" field.</summary>
    public const int BlockHeaderFieldNumber = 1;
    private pb::ByteString blockHeader_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BlockHeader {
      get { return blockHeader_; }
      set {
        blockHeader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "search_length" field.</summary>
    public const int SearchLengthFieldNumber = 2;
    private int searchLength_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SearchLength {
      get { return searchLength_; }
      set {
        searchLength_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBitcoinBlockIndexRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBitcoinBlockIndexRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockHeader != other.BlockHeader) return false;
      if (SearchLength != other.SearchLength) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockHeader.Length != 0) hash ^= BlockHeader.GetHashCode();
      if (SearchLength != 0) hash ^= SearchLength.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockHeader.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(BlockHeader);
      }
      if (SearchLength != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SearchLength);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockHeader.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BlockHeader);
      }
      if (SearchLength != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SearchLength);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBitcoinBlockIndexRequest other) {
      if (other == null) {
        return;
      }
      if (other.BlockHeader.Length != 0) {
        BlockHeader = other.BlockHeader;
      }
      if (other.SearchLength != 0) {
        SearchLength = other.SearchLength;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            BlockHeader = input.ReadBytes();
            break;
          }
          case 16: {
            SearchLength = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetWalletTransactionsRequest : pb::IMessage<GetWalletTransactionsRequest> {
    private static readonly pb::MessageParser<GetWalletTransactionsRequest> _parser = new pb::MessageParser<GetWalletTransactionsRequest>(() => new GetWalletTransactionsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetWalletTransactionsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[165]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWalletTransactionsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWalletTransactionsRequest(GetWalletTransactionsRequest other) : this() {
      requestType_ = other.requestType_;
      address_ = other.address_;
      transactionType_ = other.transactionType_;
      status_ = other.status_;
      AmountFilter = other.amountFilter_ != null ? other.AmountFilter.Clone() : null;
      TimestampFilter = other.timestampFilter_ != null ? other.TimestampFilter.Clone() : null;
      Page = other.page_ != null ? other.Page.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWalletTransactionsRequest Clone() {
      return new GetWalletTransactionsRequest(this);
    }

    /// <summary>Field number for the "request_type" field.</summary>
    public const int RequestTypeFieldNumber = 1;
    private global::Core.GetWalletTransactionsRequest.Types.Type requestType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.GetWalletTransactionsRequest.Types.Type RequestType {
      get { return requestType_; }
      set {
        requestType_ = value;
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 2;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "transaction_type" field.</summary>
    public const int TransactionTypeFieldNumber = 3;
    private global::Core.WalletTransaction.Types.Type transactionType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.WalletTransaction.Types.Type TransactionType {
      get { return transactionType_; }
      set {
        transactionType_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::Core.TransactionMeta.Types.Status status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.TransactionMeta.Types.Status Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "amount_filter" field.</summary>
    public const int AmountFilterFieldNumber = 5;
    private global::Core.NumericFilter amountFilter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.NumericFilter AmountFilter {
      get { return amountFilter_; }
      set {
        amountFilter_ = value;
      }
    }

    /// <summary>Field number for the "timestamp_filter" field.</summary>
    public const int TimestampFilterFieldNumber = 6;
    private global::Core.NumericFilter timestampFilter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.NumericFilter TimestampFilter {
      get { return timestampFilter_; }
      set {
        timestampFilter_ = value;
      }
    }

    /// <summary>Field number for the "page" field.</summary>
    public const int PageFieldNumber = 7;
    private global::Core.Paging page_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.Paging Page {
      get { return page_; }
      set {
        page_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetWalletTransactionsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetWalletTransactionsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RequestType != other.RequestType) return false;
      if (Address != other.Address) return false;
      if (TransactionType != other.TransactionType) return false;
      if (Status != other.Status) return false;
      if (!object.Equals(AmountFilter, other.AmountFilter)) return false;
      if (!object.Equals(TimestampFilter, other.TimestampFilter)) return false;
      if (!object.Equals(Page, other.Page)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RequestType != 0) hash ^= RequestType.GetHashCode();
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (TransactionType != 0) hash ^= TransactionType.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (amountFilter_ != null) hash ^= AmountFilter.GetHashCode();
      if (timestampFilter_ != null) hash ^= TimestampFilter.GetHashCode();
      if (page_ != null) hash ^= Page.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RequestType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RequestType);
      }
      if (Address.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Address);
      }
      if (TransactionType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) TransactionType);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      if (amountFilter_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(AmountFilter);
      }
      if (timestampFilter_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TimestampFilter);
      }
      if (page_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Page);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RequestType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RequestType);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      if (TransactionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TransactionType);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (amountFilter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AmountFilter);
      }
      if (timestampFilter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimestampFilter);
      }
      if (page_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Page);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetWalletTransactionsRequest other) {
      if (other == null) {
        return;
      }
      if (other.RequestType != 0) {
        RequestType = other.RequestType;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.TransactionType != 0) {
        TransactionType = other.TransactionType;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.amountFilter_ != null) {
        if (amountFilter_ == null) {
          amountFilter_ = new global::Core.NumericFilter();
        }
        AmountFilter.MergeFrom(other.AmountFilter);
      }
      if (other.timestampFilter_ != null) {
        if (timestampFilter_ == null) {
          timestampFilter_ = new global::Core.NumericFilter();
        }
        TimestampFilter.MergeFrom(other.TimestampFilter);
      }
      if (other.page_ != null) {
        if (page_ == null) {
          page_ = new global::Core.Paging();
        }
        Page.MergeFrom(other.Page);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            requestType_ = (global::Core.GetWalletTransactionsRequest.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            Address = input.ReadBytes();
            break;
          }
          case 24: {
            transactionType_ = (global::Core.WalletTransaction.Types.Type) input.ReadEnum();
            break;
          }
          case 32: {
            status_ = (global::Core.TransactionMeta.Types.Status) input.ReadEnum();
            break;
          }
          case 42: {
            if (amountFilter_ == null) {
              amountFilter_ = new global::Core.NumericFilter();
            }
            input.ReadMessage(amountFilter_);
            break;
          }
          case 50: {
            if (timestampFilter_ == null) {
              timestampFilter_ = new global::Core.NumericFilter();
            }
            input.ReadMessage(timestampFilter_);
            break;
          }
          case 58: {
            if (page_ == null) {
              page_ = new global::Core.Paging();
            }
            input.ReadMessage(page_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GetWalletTransactionsRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("LIST")] List = 0,
        [pbr::OriginalName("QUERY")] Query = 1,
      }

    }
    #endregion

  }

  public sealed partial class GetWalletTransactionsReply : pb::IMessage<GetWalletTransactionsReply> {
    private static readonly pb::MessageParser<GetWalletTransactionsReply> _parser = new pb::MessageParser<GetWalletTransactionsReply>(() => new GetWalletTransactionsReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetWalletTransactionsReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[166]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWalletTransactionsReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWalletTransactionsReply(GetWalletTransactionsReply other) : this() {
      Next = other.next_ != null ? other.Next.Clone() : null;
      transactions_ = other.transactions_.Clone();
      cacheState_ = other.cacheState_;
      message_ = other.message_;
      success_ = other.success_;
      results_ = other.results_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetWalletTransactionsReply Clone() {
      return new GetWalletTransactionsReply(this);
    }

    /// <summary>Field number for the "next" field.</summary>
    public const int NextFieldNumber = 1;
    private global::Core.Paging next_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.Paging Next {
      get { return next_; }
      set {
        next_ = value;
      }
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.WalletTransaction> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(18, global::Core.WalletTransaction.Parser);
    private readonly pbc::RepeatedField<global::Core.WalletTransaction> transactions_ = new pbc::RepeatedField<global::Core.WalletTransaction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.WalletTransaction> Transactions {
      get { return transactions_; }
    }

    /// <summary>Field number for the "cache_state" field.</summary>
    public const int CacheStateFieldNumber = 3;
    private global::Core.GetWalletTransactionsReply.Types.CacheState cacheState_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.GetWalletTransactionsReply.Types.CacheState CacheState {
      get { return cacheState_; }
      set {
        cacheState_ = value;
      }
    }

    /// <summary>Field number for the "message" field.</summary>
    public const int MessageFieldNumber = 4;
    private string message_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 5;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(50, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetWalletTransactionsReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetWalletTransactionsReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Next, other.Next)) return false;
      if(!transactions_.Equals(other.transactions_)) return false;
      if (CacheState != other.CacheState) return false;
      if (Message != other.Message) return false;
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (next_ != null) hash ^= Next.GetHashCode();
      hash ^= transactions_.GetHashCode();
      if (CacheState != 0) hash ^= CacheState.GetHashCode();
      if (Message.Length != 0) hash ^= Message.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (next_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Next);
      }
      transactions_.WriteTo(output, _repeated_transactions_codec);
      if (CacheState != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) CacheState);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Message);
      }
      if (Success != false) {
        output.WriteRawTag(40);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (next_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Next);
      }
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      if (CacheState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CacheState);
      }
      if (Message.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetWalletTransactionsReply other) {
      if (other == null) {
        return;
      }
      if (other.next_ != null) {
        if (next_ == null) {
          next_ = new global::Core.Paging();
        }
        Next.MergeFrom(other.Next);
      }
      transactions_.Add(other.transactions_);
      if (other.CacheState != 0) {
        CacheState = other.CacheState;
      }
      if (other.Message.Length != 0) {
        Message = other.Message;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (next_ == null) {
              next_ = new global::Core.Paging();
            }
            input.ReadMessage(next_);
            break;
          }
          case 18: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
          case 24: {
            cacheState_ = (global::Core.GetWalletTransactionsReply.Types.CacheState) input.ReadEnum();
            break;
          }
          case 34: {
            Message = input.ReadString();
            break;
          }
          case 40: {
            Success = input.ReadBool();
            break;
          }
          case 50: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GetWalletTransactionsReply message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum CacheState {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("BUILDING")] Building = 1,
        [pbr::OriginalName("CURRENT")] Current = 2,
        [pbr::OriginalName("ERRORED")] Errored = 3,
      }

    }
    #endregion

  }

  public sealed partial class BlockchainStateInfo : pb::IMessage<BlockchainStateInfo> {
    private static readonly pb::MessageParser<BlockchainStateInfo> _parser = new pb::MessageParser<BlockchainStateInfo>(() => new BlockchainStateInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockchainStateInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[167]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockchainStateInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockchainStateInfo(BlockchainStateInfo other) : this() {
      state_ = other.state_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockchainStateInfo Clone() {
      return new BlockchainStateInfo(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Core.BlockchainStateInfo.Types.State state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.BlockchainStateInfo.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockchainStateInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockchainStateInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockchainStateInfo other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state_ = (global::Core.BlockchainStateInfo.Types.State) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the BlockchainStateInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum State {
        [pbr::OriginalName("LOADING")] Loading = 0,
        [pbr::OriginalName("NORMAL")] Normal = 1,
        [pbr::OriginalName("PAUSED")] Paused = 3,
        [pbr::OriginalName("STALE")] Stale = 4,
        [pbr::OriginalName("LOADED")] Loaded = 5,
      }

    }
    #endregion

  }

  public sealed partial class OperatingStateInfo : pb::IMessage<OperatingStateInfo> {
    private static readonly pb::MessageParser<OperatingStateInfo> _parser = new pb::MessageParser<OperatingStateInfo>(() => new OperatingStateInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OperatingStateInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[168]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperatingStateInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperatingStateInfo(OperatingStateInfo other) : this() {
      state_ = other.state_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperatingStateInfo Clone() {
      return new OperatingStateInfo(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Core.OperatingStateInfo.Types.State state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.OperatingStateInfo.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OperatingStateInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OperatingStateInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OperatingStateInfo other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state_ = (global::Core.OperatingStateInfo.Types.State) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the OperatingStateInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum State {
        [pbr::OriginalName("STARTED")] Started = 0,
        [pbr::OriginalName("INITIALIZING")] Initializing = 1,
        [pbr::OriginalName("RUNNING")] Running = 2,
        [pbr::OriginalName("TERMINATING")] Terminating = 3,
      }

    }
    #endregion

  }

  public sealed partial class NetworkStateInfo : pb::IMessage<NetworkStateInfo> {
    private static readonly pb::MessageParser<NetworkStateInfo> _parser = new pb::MessageParser<NetworkStateInfo>(() => new NetworkStateInfo());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetworkStateInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[169]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkStateInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkStateInfo(NetworkStateInfo other) : this() {
      state_ = other.state_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetworkStateInfo Clone() {
      return new NetworkStateInfo(this);
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 1;
    private global::Core.NetworkStateInfo.Types.State state_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.NetworkStateInfo.Types.State State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetworkStateInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetworkStateInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (State != other.State) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (State != 0) hash ^= State.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (State != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetworkStateInfo other) {
      if (other == null) {
        return;
      }
      if (other.State != 0) {
        State = other.State;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            state_ = (global::Core.NetworkStateInfo.Types.State) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the NetworkStateInfo message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum State {
        [pbr::OriginalName("DISCONNECTED")] Disconnected = 0,
        [pbr::OriginalName("CONNECTED")] Connected = 1,
      }

    }
    #endregion

  }

  public sealed partial class GetStateInfoRequest : pb::IMessage<GetStateInfoRequest> {
    private static readonly pb::MessageParser<GetStateInfoRequest> _parser = new pb::MessageParser<GetStateInfoRequest>(() => new GetStateInfoRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetStateInfoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[170]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStateInfoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStateInfoRequest(GetStateInfoRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStateInfoRequest Clone() {
      return new GetStateInfoRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetStateInfoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetStateInfoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetStateInfoRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class GetStateInfoReply : pb::IMessage<GetStateInfoReply> {
    private static readonly pb::MessageParser<GetStateInfoReply> _parser = new pb::MessageParser<GetStateInfoReply>(() => new GetStateInfoReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetStateInfoReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[171]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStateInfoReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStateInfoReply(GetStateInfoReply other) : this() {
      BlockchainState = other.blockchainState_ != null ? other.BlockchainState.Clone() : null;
      OperatingState = other.operatingState_ != null ? other.OperatingState.Clone() : null;
      NetworkState = other.networkState_ != null ? other.NetworkState.Clone() : null;
      connectedPeerCount_ = other.connectedPeerCount_;
      currentSyncPeer_ = other.currentSyncPeer_;
      networkHeight_ = other.networkHeight_;
      localBlockchainHeight_ = other.localBlockchainHeight_;
      success_ = other.success_;
      results_ = other.results_.Clone();
      networkVersion_ = other.networkVersion_;
      dataDirectory_ = other.dataDirectory_;
      programVersion_ = other.programVersion_;
      nodecoreStarttime_ = other.nodecoreStarttime_;
      walletCacheSyncHeight_ = other.walletCacheSyncHeight_;
      walletState_ = other.walletState_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetStateInfoReply Clone() {
      return new GetStateInfoReply(this);
    }

    /// <summary>Field number for the "blockchain_state" field.</summary>
    public const int BlockchainStateFieldNumber = 1;
    private global::Core.BlockchainStateInfo blockchainState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.BlockchainStateInfo BlockchainState {
      get { return blockchainState_; }
      set {
        blockchainState_ = value;
      }
    }

    /// <summary>Field number for the "operating_state" field.</summary>
    public const int OperatingStateFieldNumber = 2;
    private global::Core.OperatingStateInfo operatingState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.OperatingStateInfo OperatingState {
      get { return operatingState_; }
      set {
        operatingState_ = value;
      }
    }

    /// <summary>Field number for the "network_state" field.</summary>
    public const int NetworkStateFieldNumber = 3;
    private global::Core.NetworkStateInfo networkState_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.NetworkStateInfo NetworkState {
      get { return networkState_; }
      set {
        networkState_ = value;
      }
    }

    /// <summary>Field number for the "connected_peer_count" field.</summary>
    public const int ConnectedPeerCountFieldNumber = 4;
    private int connectedPeerCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ConnectedPeerCount {
      get { return connectedPeerCount_; }
      set {
        connectedPeerCount_ = value;
      }
    }

    /// <summary>Field number for the "current_sync_peer" field.</summary>
    public const int CurrentSyncPeerFieldNumber = 5;
    private string currentSyncPeer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CurrentSyncPeer {
      get { return currentSyncPeer_; }
      set {
        currentSyncPeer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "network_height" field.</summary>
    public const int NetworkHeightFieldNumber = 6;
    private int networkHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NetworkHeight {
      get { return networkHeight_; }
      set {
        networkHeight_ = value;
      }
    }

    /// <summary>Field number for the "local_blockchain_height" field.</summary>
    public const int LocalBlockchainHeightFieldNumber = 7;
    private int localBlockchainHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LocalBlockchainHeight {
      get { return localBlockchainHeight_; }
      set {
        localBlockchainHeight_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 8;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(74, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "network_version" field.</summary>
    public const int NetworkVersionFieldNumber = 10;
    private string networkVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetworkVersion {
      get { return networkVersion_; }
      set {
        networkVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data_directory" field.</summary>
    public const int DataDirectoryFieldNumber = 11;
    private string dataDirectory_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DataDirectory {
      get { return dataDirectory_; }
      set {
        dataDirectory_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "program_version" field.</summary>
    public const int ProgramVersionFieldNumber = 12;
    private string programVersion_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProgramVersion {
      get { return programVersion_; }
      set {
        programVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nodecore_starttime" field.</summary>
    public const int NodecoreStarttimeFieldNumber = 13;
    private long nodecoreStarttime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long NodecoreStarttime {
      get { return nodecoreStarttime_; }
      set {
        nodecoreStarttime_ = value;
      }
    }

    /// <summary>Field number for the "wallet_cache_sync_height" field.</summary>
    public const int WalletCacheSyncHeightFieldNumber = 14;
    private int walletCacheSyncHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int WalletCacheSyncHeight {
      get { return walletCacheSyncHeight_; }
      set {
        walletCacheSyncHeight_ = value;
      }
    }

    /// <summary>Field number for the "wallet_state" field.</summary>
    public const int WalletStateFieldNumber = 15;
    private global::Core.GetStateInfoReply.Types.WalletState walletState_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.GetStateInfoReply.Types.WalletState WalletState {
      get { return walletState_; }
      set {
        walletState_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetStateInfoReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetStateInfoReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(BlockchainState, other.BlockchainState)) return false;
      if (!object.Equals(OperatingState, other.OperatingState)) return false;
      if (!object.Equals(NetworkState, other.NetworkState)) return false;
      if (ConnectedPeerCount != other.ConnectedPeerCount) return false;
      if (CurrentSyncPeer != other.CurrentSyncPeer) return false;
      if (NetworkHeight != other.NetworkHeight) return false;
      if (LocalBlockchainHeight != other.LocalBlockchainHeight) return false;
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if (NetworkVersion != other.NetworkVersion) return false;
      if (DataDirectory != other.DataDirectory) return false;
      if (ProgramVersion != other.ProgramVersion) return false;
      if (NodecoreStarttime != other.NodecoreStarttime) return false;
      if (WalletCacheSyncHeight != other.WalletCacheSyncHeight) return false;
      if (WalletState != other.WalletState) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (blockchainState_ != null) hash ^= BlockchainState.GetHashCode();
      if (operatingState_ != null) hash ^= OperatingState.GetHashCode();
      if (networkState_ != null) hash ^= NetworkState.GetHashCode();
      if (ConnectedPeerCount != 0) hash ^= ConnectedPeerCount.GetHashCode();
      if (CurrentSyncPeer.Length != 0) hash ^= CurrentSyncPeer.GetHashCode();
      if (NetworkHeight != 0) hash ^= NetworkHeight.GetHashCode();
      if (LocalBlockchainHeight != 0) hash ^= LocalBlockchainHeight.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      if (NetworkVersion.Length != 0) hash ^= NetworkVersion.GetHashCode();
      if (DataDirectory.Length != 0) hash ^= DataDirectory.GetHashCode();
      if (ProgramVersion.Length != 0) hash ^= ProgramVersion.GetHashCode();
      if (NodecoreStarttime != 0L) hash ^= NodecoreStarttime.GetHashCode();
      if (WalletCacheSyncHeight != 0) hash ^= WalletCacheSyncHeight.GetHashCode();
      if (WalletState != 0) hash ^= WalletState.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (blockchainState_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(BlockchainState);
      }
      if (operatingState_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(OperatingState);
      }
      if (networkState_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(NetworkState);
      }
      if (ConnectedPeerCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ConnectedPeerCount);
      }
      if (CurrentSyncPeer.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CurrentSyncPeer);
      }
      if (NetworkHeight != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(NetworkHeight);
      }
      if (LocalBlockchainHeight != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LocalBlockchainHeight);
      }
      if (Success != false) {
        output.WriteRawTag(64);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      if (NetworkVersion.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(NetworkVersion);
      }
      if (DataDirectory.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(DataDirectory);
      }
      if (ProgramVersion.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(ProgramVersion);
      }
      if (NodecoreStarttime != 0L) {
        output.WriteRawTag(104);
        output.WriteInt64(NodecoreStarttime);
      }
      if (WalletCacheSyncHeight != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(WalletCacheSyncHeight);
      }
      if (WalletState != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) WalletState);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (blockchainState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BlockchainState);
      }
      if (operatingState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OperatingState);
      }
      if (networkState_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetworkState);
      }
      if (ConnectedPeerCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ConnectedPeerCount);
      }
      if (CurrentSyncPeer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CurrentSyncPeer);
      }
      if (NetworkHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetworkHeight);
      }
      if (LocalBlockchainHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LocalBlockchainHeight);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      if (NetworkVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkVersion);
      }
      if (DataDirectory.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DataDirectory);
      }
      if (ProgramVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProgramVersion);
      }
      if (NodecoreStarttime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(NodecoreStarttime);
      }
      if (WalletCacheSyncHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WalletCacheSyncHeight);
      }
      if (WalletState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WalletState);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetStateInfoReply other) {
      if (other == null) {
        return;
      }
      if (other.blockchainState_ != null) {
        if (blockchainState_ == null) {
          blockchainState_ = new global::Core.BlockchainStateInfo();
        }
        BlockchainState.MergeFrom(other.BlockchainState);
      }
      if (other.operatingState_ != null) {
        if (operatingState_ == null) {
          operatingState_ = new global::Core.OperatingStateInfo();
        }
        OperatingState.MergeFrom(other.OperatingState);
      }
      if (other.networkState_ != null) {
        if (networkState_ == null) {
          networkState_ = new global::Core.NetworkStateInfo();
        }
        NetworkState.MergeFrom(other.NetworkState);
      }
      if (other.ConnectedPeerCount != 0) {
        ConnectedPeerCount = other.ConnectedPeerCount;
      }
      if (other.CurrentSyncPeer.Length != 0) {
        CurrentSyncPeer = other.CurrentSyncPeer;
      }
      if (other.NetworkHeight != 0) {
        NetworkHeight = other.NetworkHeight;
      }
      if (other.LocalBlockchainHeight != 0) {
        LocalBlockchainHeight = other.LocalBlockchainHeight;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      if (other.NetworkVersion.Length != 0) {
        NetworkVersion = other.NetworkVersion;
      }
      if (other.DataDirectory.Length != 0) {
        DataDirectory = other.DataDirectory;
      }
      if (other.ProgramVersion.Length != 0) {
        ProgramVersion = other.ProgramVersion;
      }
      if (other.NodecoreStarttime != 0L) {
        NodecoreStarttime = other.NodecoreStarttime;
      }
      if (other.WalletCacheSyncHeight != 0) {
        WalletCacheSyncHeight = other.WalletCacheSyncHeight;
      }
      if (other.WalletState != 0) {
        WalletState = other.WalletState;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (blockchainState_ == null) {
              blockchainState_ = new global::Core.BlockchainStateInfo();
            }
            input.ReadMessage(blockchainState_);
            break;
          }
          case 18: {
            if (operatingState_ == null) {
              operatingState_ = new global::Core.OperatingStateInfo();
            }
            input.ReadMessage(operatingState_);
            break;
          }
          case 26: {
            if (networkState_ == null) {
              networkState_ = new global::Core.NetworkStateInfo();
            }
            input.ReadMessage(networkState_);
            break;
          }
          case 32: {
            ConnectedPeerCount = input.ReadInt32();
            break;
          }
          case 42: {
            CurrentSyncPeer = input.ReadString();
            break;
          }
          case 48: {
            NetworkHeight = input.ReadInt32();
            break;
          }
          case 56: {
            LocalBlockchainHeight = input.ReadInt32();
            break;
          }
          case 64: {
            Success = input.ReadBool();
            break;
          }
          case 74: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 82: {
            NetworkVersion = input.ReadString();
            break;
          }
          case 90: {
            DataDirectory = input.ReadString();
            break;
          }
          case 98: {
            ProgramVersion = input.ReadString();
            break;
          }
          case 104: {
            NodecoreStarttime = input.ReadInt64();
            break;
          }
          case 112: {
            WalletCacheSyncHeight = input.ReadInt32();
            break;
          }
          case 120: {
            walletState_ = (global::Core.GetStateInfoReply.Types.WalletState) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GetStateInfoReply message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum WalletState {
        [pbr::OriginalName("DEFAULT")] Default = 0,
        [pbr::OriginalName("LOCKED")] Locked = 1,
        [pbr::OriginalName("UNLOCKED")] Unlocked = 2,
      }

    }
    #endregion

  }

  public sealed partial class StopNodeCoreRequest : pb::IMessage<StopNodeCoreRequest> {
    private static readonly pb::MessageParser<StopNodeCoreRequest> _parser = new pb::MessageParser<StopNodeCoreRequest>(() => new StopNodeCoreRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StopNodeCoreRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[172]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopNodeCoreRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopNodeCoreRequest(StopNodeCoreRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StopNodeCoreRequest Clone() {
      return new StopNodeCoreRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StopNodeCoreRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StopNodeCoreRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StopNodeCoreRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class RefreshWalletCacheRequest : pb::IMessage<RefreshWalletCacheRequest> {
    private static readonly pb::MessageParser<RefreshWalletCacheRequest> _parser = new pb::MessageParser<RefreshWalletCacheRequest>(() => new RefreshWalletCacheRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RefreshWalletCacheRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[173]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshWalletCacheRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshWalletCacheRequest(RefreshWalletCacheRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RefreshWalletCacheRequest Clone() {
      return new RefreshWalletCacheRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RefreshWalletCacheRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RefreshWalletCacheRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RefreshWalletCacheRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class EncryptWalletRequest : pb::IMessage<EncryptWalletRequest> {
    private static readonly pb::MessageParser<EncryptWalletRequest> _parser = new pb::MessageParser<EncryptWalletRequest>(() => new EncryptWalletRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EncryptWalletRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[174]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncryptWalletRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncryptWalletRequest(EncryptWalletRequest other) : this() {
      passphrase_ = other.passphrase_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncryptWalletRequest Clone() {
      return new EncryptWalletRequest(this);
    }

    /// <summary>Field number for the "passphrase" field.</summary>
    public const int PassphraseFieldNumber = 1;
    private string passphrase_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Passphrase {
      get { return passphrase_; }
      set {
        passphrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EncryptWalletRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EncryptWalletRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Passphrase != other.Passphrase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Passphrase.Length != 0) hash ^= Passphrase.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Passphrase.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Passphrase);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Passphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passphrase);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EncryptWalletRequest other) {
      if (other == null) {
        return;
      }
      if (other.Passphrase.Length != 0) {
        Passphrase = other.Passphrase;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Passphrase = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DecryptWalletRequest : pb::IMessage<DecryptWalletRequest> {
    private static readonly pb::MessageParser<DecryptWalletRequest> _parser = new pb::MessageParser<DecryptWalletRequest>(() => new DecryptWalletRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DecryptWalletRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[175]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecryptWalletRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecryptWalletRequest(DecryptWalletRequest other) : this() {
      passphrase_ = other.passphrase_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DecryptWalletRequest Clone() {
      return new DecryptWalletRequest(this);
    }

    /// <summary>Field number for the "passphrase" field.</summary>
    public const int PassphraseFieldNumber = 1;
    private string passphrase_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Passphrase {
      get { return passphrase_; }
      set {
        passphrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DecryptWalletRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DecryptWalletRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Passphrase != other.Passphrase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Passphrase.Length != 0) hash ^= Passphrase.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Passphrase.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Passphrase);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Passphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passphrase);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DecryptWalletRequest other) {
      if (other == null) {
        return;
      }
      if (other.Passphrase.Length != 0) {
        Passphrase = other.Passphrase;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Passphrase = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UnlockWalletRequest : pb::IMessage<UnlockWalletRequest> {
    private static readonly pb::MessageParser<UnlockWalletRequest> _parser = new pb::MessageParser<UnlockWalletRequest>(() => new UnlockWalletRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UnlockWalletRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[176]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockWalletRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockWalletRequest(UnlockWalletRequest other) : this() {
      passphrase_ = other.passphrase_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UnlockWalletRequest Clone() {
      return new UnlockWalletRequest(this);
    }

    /// <summary>Field number for the "passphrase" field.</summary>
    public const int PassphraseFieldNumber = 1;
    private string passphrase_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Passphrase {
      get { return passphrase_; }
      set {
        passphrase_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UnlockWalletRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UnlockWalletRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Passphrase != other.Passphrase) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Passphrase.Length != 0) hash ^= Passphrase.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Passphrase.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Passphrase);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Passphrase.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Passphrase);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UnlockWalletRequest other) {
      if (other == null) {
        return;
      }
      if (other.Passphrase.Length != 0) {
        Passphrase = other.Passphrase;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Passphrase = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LockWalletRequest : pb::IMessage<LockWalletRequest> {
    private static readonly pb::MessageParser<LockWalletRequest> _parser = new pb::MessageParser<LockWalletRequest>(() => new LockWalletRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LockWalletRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[177]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockWalletRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockWalletRequest(LockWalletRequest other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LockWalletRequest Clone() {
      return new LockWalletRequest(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LockWalletRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LockWalletRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LockWalletRequest other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class DrainAddressRequest : pb::IMessage<DrainAddressRequest> {
    private static readonly pb::MessageParser<DrainAddressRequest> _parser = new pb::MessageParser<DrainAddressRequest>(() => new DrainAddressRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrainAddressRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[178]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrainAddressRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrainAddressRequest(DrainAddressRequest other) : this() {
      sourceAddress_ = other.sourceAddress_;
      destinationAddress_ = other.destinationAddress_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrainAddressRequest Clone() {
      return new DrainAddressRequest(this);
    }

    /// <summary>Field number for the "source_address" field.</summary>
    public const int SourceAddressFieldNumber = 1;
    private pb::ByteString sourceAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SourceAddress {
      get { return sourceAddress_; }
      set {
        sourceAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "destination_address" field.</summary>
    public const int DestinationAddressFieldNumber = 2;
    private pb::ByteString destinationAddress_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DestinationAddress {
      get { return destinationAddress_; }
      set {
        destinationAddress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrainAddressRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrainAddressRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SourceAddress != other.SourceAddress) return false;
      if (DestinationAddress != other.DestinationAddress) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SourceAddress.Length != 0) hash ^= SourceAddress.GetHashCode();
      if (DestinationAddress.Length != 0) hash ^= DestinationAddress.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SourceAddress.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(SourceAddress);
      }
      if (DestinationAddress.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(DestinationAddress);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SourceAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SourceAddress);
      }
      if (DestinationAddress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DestinationAddress);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrainAddressRequest other) {
      if (other == null) {
        return;
      }
      if (other.SourceAddress.Length != 0) {
        SourceAddress = other.SourceAddress;
      }
      if (other.DestinationAddress.Length != 0) {
        DestinationAddress = other.DestinationAddress;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SourceAddress = input.ReadBytes();
            break;
          }
          case 18: {
            DestinationAddress = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DrainAddressReply : pb::IMessage<DrainAddressReply> {
    private static readonly pb::MessageParser<DrainAddressReply> _parser = new pb::MessageParser<DrainAddressReply>(() => new DrainAddressReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DrainAddressReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[179]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrainAddressReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrainAddressReply(DrainAddressReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      Transaction = other.transaction_ != null ? other.Transaction.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DrainAddressReply Clone() {
      return new DrainAddressReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "transaction" field.</summary>
    public const int TransactionFieldNumber = 3;
    private global::Core.Transaction transaction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Core.Transaction Transaction {
      get { return transaction_; }
      set {
        transaction_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DrainAddressReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DrainAddressReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if (!object.Equals(Transaction, other.Transaction)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      if (transaction_ != null) hash ^= Transaction.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      if (transaction_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Transaction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      if (transaction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Transaction);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DrainAddressReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      if (other.transaction_ != null) {
        if (transaction_ == null) {
          transaction_ = new global::Core.Transaction();
        }
        Transaction.MergeFrom(other.Transaction);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            if (transaction_ == null) {
              transaction_ = new global::Core.Transaction();
            }
            input.ReadMessage(transaction_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BalanceUnlockEvent : pb::IMessage<BalanceUnlockEvent> {
    private static readonly pb::MessageParser<BalanceUnlockEvent> _parser = new pb::MessageParser<BalanceUnlockEvent>(() => new BalanceUnlockEvent());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BalanceUnlockEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[180]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BalanceUnlockEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BalanceUnlockEvent(BalanceUnlockEvent other) : this() {
      blockHeight_ = other.blockHeight_;
      amountUnlocked_ = other.amountUnlocked_;
      lockedBalance_ = other.lockedBalance_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BalanceUnlockEvent Clone() {
      return new BalanceUnlockEvent(this);
    }

    /// <summary>Field number for the "block_height" field.</summary>
    public const int BlockHeightFieldNumber = 1;
    private int blockHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BlockHeight {
      get { return blockHeight_; }
      set {
        blockHeight_ = value;
      }
    }

    /// <summary>Field number for the "amount_unlocked" field.</summary>
    public const int AmountUnlockedFieldNumber = 2;
    private long amountUnlocked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long AmountUnlocked {
      get { return amountUnlocked_; }
      set {
        amountUnlocked_ = value;
      }
    }

    /// <summary>Field number for the "locked_balance" field.</summary>
    public const int LockedBalanceFieldNumber = 3;
    private long lockedBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LockedBalance {
      get { return lockedBalance_; }
      set {
        lockedBalance_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BalanceUnlockEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BalanceUnlockEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BlockHeight != other.BlockHeight) return false;
      if (AmountUnlocked != other.AmountUnlocked) return false;
      if (LockedBalance != other.LockedBalance) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BlockHeight != 0) hash ^= BlockHeight.GetHashCode();
      if (AmountUnlocked != 0L) hash ^= AmountUnlocked.GetHashCode();
      if (LockedBalance != 0L) hash ^= LockedBalance.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BlockHeight != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BlockHeight);
      }
      if (AmountUnlocked != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(AmountUnlocked);
      }
      if (LockedBalance != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LockedBalance);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BlockHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockHeight);
      }
      if (AmountUnlocked != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AmountUnlocked);
      }
      if (LockedBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LockedBalance);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BalanceUnlockEvent other) {
      if (other == null) {
        return;
      }
      if (other.BlockHeight != 0) {
        BlockHeight = other.BlockHeight;
      }
      if (other.AmountUnlocked != 0L) {
        AmountUnlocked = other.AmountUnlocked;
      }
      if (other.LockedBalance != 0L) {
        LockedBalance = other.LockedBalance;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BlockHeight = input.ReadInt32();
            break;
          }
          case 16: {
            AmountUnlocked = input.ReadInt64();
            break;
          }
          case 24: {
            LockedBalance = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddressBalanceSchedule : pb::IMessage<AddressBalanceSchedule> {
    private static readonly pb::MessageParser<AddressBalanceSchedule> _parser = new pb::MessageParser<AddressBalanceSchedule>(() => new AddressBalanceSchedule());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddressBalanceSchedule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[181]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressBalanceSchedule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressBalanceSchedule(AddressBalanceSchedule other) : this() {
      address_ = other.address_;
      unlockBalance_ = other.unlockBalance_;
      lockedBalance_ = other.lockedBalance_;
      totalBalance_ = other.totalBalance_;
      schedule_ = other.schedule_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressBalanceSchedule Clone() {
      return new AddressBalanceSchedule(this);
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 1;
    private pb::ByteString address_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unlock_balance" field.</summary>
    public const int UnlockBalanceFieldNumber = 2;
    private long unlockBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long UnlockBalance {
      get { return unlockBalance_; }
      set {
        unlockBalance_ = value;
      }
    }

    /// <summary>Field number for the "locked_balance" field.</summary>
    public const int LockedBalanceFieldNumber = 3;
    private long lockedBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LockedBalance {
      get { return lockedBalance_; }
      set {
        lockedBalance_ = value;
      }
    }

    /// <summary>Field number for the "total_balance" field.</summary>
    public const int TotalBalanceFieldNumber = 4;
    private long totalBalance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalBalance {
      get { return totalBalance_; }
      set {
        totalBalance_ = value;
      }
    }

    /// <summary>Field number for the "schedule" field.</summary>
    public const int ScheduleFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Core.BalanceUnlockEvent> _repeated_schedule_codec
        = pb::FieldCodec.ForMessage(42, global::Core.BalanceUnlockEvent.Parser);
    private readonly pbc::RepeatedField<global::Core.BalanceUnlockEvent> schedule_ = new pbc::RepeatedField<global::Core.BalanceUnlockEvent>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.BalanceUnlockEvent> Schedule {
      get { return schedule_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddressBalanceSchedule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddressBalanceSchedule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Address != other.Address) return false;
      if (UnlockBalance != other.UnlockBalance) return false;
      if (LockedBalance != other.LockedBalance) return false;
      if (TotalBalance != other.TotalBalance) return false;
      if(!schedule_.Equals(other.schedule_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Address.Length != 0) hash ^= Address.GetHashCode();
      if (UnlockBalance != 0L) hash ^= UnlockBalance.GetHashCode();
      if (LockedBalance != 0L) hash ^= LockedBalance.GetHashCode();
      if (TotalBalance != 0L) hash ^= TotalBalance.GetHashCode();
      hash ^= schedule_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Address);
      }
      if (UnlockBalance != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(UnlockBalance);
      }
      if (LockedBalance != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(LockedBalance);
      }
      if (TotalBalance != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(TotalBalance);
      }
      schedule_.WriteTo(output, _repeated_schedule_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      if (UnlockBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnlockBalance);
      }
      if (LockedBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LockedBalance);
      }
      if (TotalBalance != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalBalance);
      }
      size += schedule_.CalculateSize(_repeated_schedule_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddressBalanceSchedule other) {
      if (other == null) {
        return;
      }
      if (other.Address.Length != 0) {
        Address = other.Address;
      }
      if (other.UnlockBalance != 0L) {
        UnlockBalance = other.UnlockBalance;
      }
      if (other.LockedBalance != 0L) {
        LockedBalance = other.LockedBalance;
      }
      if (other.TotalBalance != 0L) {
        TotalBalance = other.TotalBalance;
      }
      schedule_.Add(other.schedule_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadBytes();
            break;
          }
          case 16: {
            UnlockBalance = input.ReadInt64();
            break;
          }
          case 24: {
            LockedBalance = input.ReadInt64();
            break;
          }
          case 32: {
            TotalBalance = input.ReadInt64();
            break;
          }
          case 42: {
            schedule_.AddEntriesFrom(input, _repeated_schedule_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBalanceUnlockScheduleRequest : pb::IMessage<GetBalanceUnlockScheduleRequest> {
    private static readonly pb::MessageParser<GetBalanceUnlockScheduleRequest> _parser = new pb::MessageParser<GetBalanceUnlockScheduleRequest>(() => new GetBalanceUnlockScheduleRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBalanceUnlockScheduleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[182]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceUnlockScheduleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceUnlockScheduleRequest(GetBalanceUnlockScheduleRequest other) : this() {
      addresses_ = other.addresses_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceUnlockScheduleRequest Clone() {
      return new GetBalanceUnlockScheduleRequest(this);
    }

    /// <summary>Field number for the "addresses" field.</summary>
    public const int AddressesFieldNumber = 1;
    private static readonly pb::FieldCodec<pb::ByteString> _repeated_addresses_codec
        = pb::FieldCodec.ForBytes(10);
    private readonly pbc::RepeatedField<pb::ByteString> addresses_ = new pbc::RepeatedField<pb::ByteString>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<pb::ByteString> Addresses {
      get { return addresses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBalanceUnlockScheduleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBalanceUnlockScheduleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!addresses_.Equals(other.addresses_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= addresses_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      addresses_.WriteTo(output, _repeated_addresses_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += addresses_.CalculateSize(_repeated_addresses_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBalanceUnlockScheduleRequest other) {
      if (other == null) {
        return;
      }
      addresses_.Add(other.addresses_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            addresses_.AddEntriesFrom(input, _repeated_addresses_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetBalanceUnlockScheduleReply : pb::IMessage<GetBalanceUnlockScheduleReply> {
    private static readonly pb::MessageParser<GetBalanceUnlockScheduleReply> _parser = new pb::MessageParser<GetBalanceUnlockScheduleReply>(() => new GetBalanceUnlockScheduleReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetBalanceUnlockScheduleReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Core.VeriblockReflection.Descriptor.MessageTypes[183]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceUnlockScheduleReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceUnlockScheduleReply(GetBalanceUnlockScheduleReply other) : this() {
      success_ = other.success_;
      results_ = other.results_.Clone();
      addressSchedule_ = other.addressSchedule_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetBalanceUnlockScheduleReply Clone() {
      return new GetBalanceUnlockScheduleReply(this);
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "results" field.</summary>
    public const int ResultsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Core.Result> _repeated_results_codec
        = pb::FieldCodec.ForMessage(18, global::Core.Result.Parser);
    private readonly pbc::RepeatedField<global::Core.Result> results_ = new pbc::RepeatedField<global::Core.Result>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.Result> Results {
      get { return results_; }
    }

    /// <summary>Field number for the "address_schedule" field.</summary>
    public const int AddressScheduleFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Core.AddressBalanceSchedule> _repeated_addressSchedule_codec
        = pb::FieldCodec.ForMessage(26, global::Core.AddressBalanceSchedule.Parser);
    private readonly pbc::RepeatedField<global::Core.AddressBalanceSchedule> addressSchedule_ = new pbc::RepeatedField<global::Core.AddressBalanceSchedule>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Core.AddressBalanceSchedule> AddressSchedule {
      get { return addressSchedule_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetBalanceUnlockScheduleReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetBalanceUnlockScheduleReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if(!results_.Equals(other.results_)) return false;
      if(!addressSchedule_.Equals(other.addressSchedule_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      hash ^= results_.GetHashCode();
      hash ^= addressSchedule_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      results_.WriteTo(output, _repeated_results_codec);
      addressSchedule_.WriteTo(output, _repeated_addressSchedule_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      size += results_.CalculateSize(_repeated_results_codec);
      size += addressSchedule_.CalculateSize(_repeated_addressSchedule_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetBalanceUnlockScheduleReply other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      results_.Add(other.results_);
      addressSchedule_.Add(other.addressSchedule_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            results_.AddEntriesFrom(input, _repeated_results_codec);
            break;
          }
          case 26: {
            addressSchedule_.AddEntriesFrom(input, _repeated_addressSchedule_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
