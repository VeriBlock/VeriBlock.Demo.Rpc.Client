// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: veriblock.proto
// Original file comments:
// VeriBlock NodeCore
// Copyright 2017-2018 VeriBlock, Inc.
// All rights reserved.
// https://www.veriblock.org
// Distributed under the MIT software license, see the accompanying
// file LICENSE or http://www.opensource.org/licenses/mit-license.php.
//
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Core {
  public static partial class Admin
  {
    static readonly string __ServiceName = "core.Admin";

    static readonly grpc::Marshaller<global::Core.GetPopRequest> __Marshaller_GetPopRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetPopRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetPopReply> __Marshaller_GetPopReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetPopReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.NodeRequest> __Marshaller_NodeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.NodeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.ProtocolReply> __Marshaller_ProtocolReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.ProtocolReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.SetBanRequest> __Marshaller_SetBanRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.SetBanRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetInfoRequest> __Marshaller_GetInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetInfoReply> __Marshaller_GetInfoReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetInfoReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetDiagnosticInfoRequest> __Marshaller_GetDiagnosticInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetDiagnosticInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetDiagnosticInfoReply> __Marshaller_GetDiagnosticInfoReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetDiagnosticInfoReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.StopPoolRequest> __Marshaller_StopPoolRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.StopPoolRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.StopPoolReply> __Marshaller_StopPoolReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.StopPoolReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.SubmitPopRequest> __Marshaller_SubmitPopRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.SubmitPopRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.SendCoinsRequest> __Marshaller_SendCoinsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.SendCoinsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.SendCoinsReply> __Marshaller_SendCoinsReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.SendCoinsReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.SendAltChainEndorsementRequest> __Marshaller_SendAltChainEndorsementRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.SendAltChainEndorsementRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.SendAltChainEndorsementReply> __Marshaller_SendAltChainEndorsementReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.SendAltChainEndorsementReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetBlocksRequest> __Marshaller_GetBlocksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetBlocksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetBlocksReply> __Marshaller_GetBlocksReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetBlocksReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.StartPoolRequest> __Marshaller_StartPoolRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.StartPoolRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.StartPoolReply> __Marshaller_StartPoolReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.StartPoolReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.RestartPoolWebServerRequest> __Marshaller_RestartPoolWebServerRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.RestartPoolWebServerRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.RestartPoolWebServerReply> __Marshaller_RestartPoolWebServerReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.RestartPoolWebServerReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetHistoryRequest> __Marshaller_GetHistoryRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetHistoryRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetHistoryReply> __Marshaller_GetHistoryReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetHistoryReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetBalanceRequest> __Marshaller_GetBalanceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetBalanceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetBalanceReply> __Marshaller_GetBalanceReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetBalanceReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.SetAllowedRequest> __Marshaller_SetAllowedRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.SetAllowedRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.ListBannedRequest> __Marshaller_ListBannedRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.ListBannedRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.ListBannedReply> __Marshaller_ListBannedReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.ListBannedReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.ListBannedMinersRequest> __Marshaller_ListBannedMinersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.ListBannedMinersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.ListBannedMinersReply> __Marshaller_ListBannedMinersReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.ListBannedMinersReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.ClearBannedRequest> __Marshaller_ClearBannedRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.ClearBannedRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.ClearBannedMinersRequest> __Marshaller_ClearBannedMinersRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.ClearBannedMinersRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.SubmitBlocksRequest> __Marshaller_SubmitBlocksRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.SubmitBlocksRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.ClearAllowedRequest> __Marshaller_ClearAllowedRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.ClearAllowedRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetPeerInfoRequest> __Marshaller_GetPeerInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetPeerInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetPeerInfoReply> __Marshaller_GetPeerInfoReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetPeerInfoReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.SignMessageRequest> __Marshaller_SignMessageRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.SignMessageRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.SignMessageReply> __Marshaller_SignMessageReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.SignMessageReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.ListAllowedRequest> __Marshaller_ListAllowedRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.ListAllowedRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.ListAllowedReply> __Marshaller_ListAllowedReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.ListAllowedReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.BackupWalletRequest> __Marshaller_BackupWalletRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.BackupWalletRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.BackupWalletReply> __Marshaller_BackupWalletReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.BackupWalletReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.ImportWalletRequest> __Marshaller_ImportWalletRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.ImportWalletRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.ImportWalletReply> __Marshaller_ImportWalletReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.ImportWalletReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetNewAddressRequest> __Marshaller_GetNewAddressRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetNewAddressRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetNewAddressReply> __Marshaller_GetNewAddressReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetNewAddressReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetBlockTimesRequest> __Marshaller_GetBlockTimesRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetBlockTimesRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetBlockTimesReply> __Marshaller_GetBlockTimesReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetBlockTimesReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.StartSoloPoolRequest> __Marshaller_StartSoloPoolRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.StartSoloPoolRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.StartSoloPoolReply> __Marshaller_StartSoloPoolReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.StartSoloPoolReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetBlockchainsRequest> __Marshaller_GetBlockchainsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetBlockchainsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetBlockchainsReply> __Marshaller_GetBlockchainsReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetBlockchainsReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.SetTransactionFeeRequest> __Marshaller_SetTransactionFeeRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.SetTransactionFeeRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.DumpPrivateKeyRequest> __Marshaller_DumpPrivateKeyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.DumpPrivateKeyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.DumpPrivateKeyReply> __Marshaller_DumpPrivateKeyReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.DumpPrivateKeyReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.ImportPrivateKeyRequest> __Marshaller_ImportPrivateKeyRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.ImportPrivateKeyRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.ImportPrivateKeyReply> __Marshaller_ImportPrivateKeyReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.ImportPrivateKeyReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.SubmitTransactionsRequest> __Marshaller_SubmitTransactionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.SubmitTransactionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetTransactionsRequest> __Marshaller_GetTransactionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetTransactionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetTransactionsReply> __Marshaller_GetTransactionsReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetTransactionsReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.ValidateAddressRequest> __Marshaller_ValidateAddressRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.ValidateAddressRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.ValidateAddressReply> __Marshaller_ValidateAddressReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.ValidateAddressReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GenerateMultisigAddressRequest> __Marshaller_GenerateMultisigAddressRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GenerateMultisigAddressRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GenerateMultisigAddressReply> __Marshaller_GenerateMultisigAddressReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GenerateMultisigAddressReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.MakeUnsignedMultisigTxRequest> __Marshaller_MakeUnsignedMultisigTxRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.MakeUnsignedMultisigTxRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.MakeUnsignedMultisigTxReply> __Marshaller_MakeUnsignedMultisigTxReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.MakeUnsignedMultisigTxReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.SubmitMultisigTxRequest> __Marshaller_SubmitMultisigTxRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.SubmitMultisigTxRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.SubmitMultisigTxReply> __Marshaller_SubmitMultisigTxReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.SubmitMultisigTxReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetBitcoinBlockIndexRequest> __Marshaller_GetBitcoinBlockIndexRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetBitcoinBlockIndexRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetBlockTemplateRequest> __Marshaller_GetBlockTemplateRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetBlockTemplateRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetBlockTemplateReply> __Marshaller_GetBlockTemplateReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetBlockTemplateReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetSignatureIndexRequest> __Marshaller_GetSignatureIndexRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetSignatureIndexRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetSignatureIndexReply> __Marshaller_GetSignatureIndexReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetSignatureIndexReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.SetDefaultAddressRequest> __Marshaller_SetDefaultAddressRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.SetDefaultAddressRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.SetDefaultAddressReply> __Marshaller_SetDefaultAddressReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.SetDefaultAddressReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetLastBitcoinBlockRequest> __Marshaller_GetLastBitcoinBlockRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetLastBitcoinBlockRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetLastBitcoinBlockReply> __Marshaller_GetLastBitcoinBlockReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetLastBitcoinBlockReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetProtectedChildrenRequest> __Marshaller_GetProtectedChildrenRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetProtectedChildrenRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetProtectedChildrenReply> __Marshaller_GetProtectedChildrenReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetProtectedChildrenReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetProtectingParentsRequest> __Marshaller_GetProtectingParentsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetProtectingParentsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetProtectingParentsReply> __Marshaller_GetProtectingParentsReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetProtectingParentsReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetWalletTransactionsRequest> __Marshaller_GetWalletTransactionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetWalletTransactionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetWalletTransactionsReply> __Marshaller_GetWalletTransactionsReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetWalletTransactionsReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetEndorsementsOfBlockRequest> __Marshaller_GetEndorsementsOfBlockRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetEndorsementsOfBlockRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetEndorsementsOfBlockReply> __Marshaller_GetEndorsementsOfBlockReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetEndorsementsOfBlockReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetPendingTransactionsRequest> __Marshaller_GetPendingTransactionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetPendingTransactionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetPendingTransactionsReply> __Marshaller_GetPendingTransactionsReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetPendingTransactionsReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetPoPEndorsementsInfoRequest> __Marshaller_GetPoPEndorsementsInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetPoPEndorsementsInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetPoPEndorsementsInfoReply> __Marshaller_GetPoPEndorsementsInfoReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetPoPEndorsementsInfoReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.PingRequest> __Marshaller_PingRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.PingRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.PingReply> __Marshaller_PingReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.PingReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetStateInfoRequest> __Marshaller_GetStateInfoRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetStateInfoRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetStateInfoReply> __Marshaller_GetStateInfoReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetStateInfoReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetLastBlockRequest> __Marshaller_GetLastBlockRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetLastBlockRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetLastBlockReply> __Marshaller_GetLastBlockReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetLastBlockReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.ListBlocksSinceRequest> __Marshaller_ListBlocksSinceRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.ListBlocksSinceRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.ListBlocksSinceReply> __Marshaller_ListBlocksSinceReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.ListBlocksSinceReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.TroubleshootPoPTransactionsRequest> __Marshaller_TroubleshootPoPTransactionsRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.TroubleshootPoPTransactionsRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.TroubleshootPoPTransactionsReply> __Marshaller_TroubleshootPoPTransactionsReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.TroubleshootPoPTransactionsReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.StopNodeCoreRequest> __Marshaller_StopNodeCoreRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.StopNodeCoreRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.RefreshWalletCacheRequest> __Marshaller_RefreshWalletCacheRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.RefreshWalletCacheRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.EncryptWalletRequest> __Marshaller_EncryptWalletRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.EncryptWalletRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.DecryptWalletRequest> __Marshaller_DecryptWalletRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.DecryptWalletRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.UnlockWalletRequest> __Marshaller_UnlockWalletRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.UnlockWalletRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.LockWalletRequest> __Marshaller_LockWalletRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.LockWalletRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.DrainAddressRequest> __Marshaller_DrainAddressRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.DrainAddressRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.DrainAddressReply> __Marshaller_DrainAddressReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.DrainAddressReply.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetBalanceUnlockScheduleRequest> __Marshaller_GetBalanceUnlockScheduleRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetBalanceUnlockScheduleRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Core.GetBalanceUnlockScheduleReply> __Marshaller_GetBalanceUnlockScheduleReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Core.GetBalanceUnlockScheduleReply.Parser.ParseFrom);

    static readonly grpc::Method<global::Core.GetPopRequest, global::Core.GetPopReply> __Method_GetPop = new grpc::Method<global::Core.GetPopRequest, global::Core.GetPopReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPop",
        __Marshaller_GetPopRequest,
        __Marshaller_GetPopReply);

    static readonly grpc::Method<global::Core.NodeRequest, global::Core.ProtocolReply> __Method_AddNode = new grpc::Method<global::Core.NodeRequest, global::Core.ProtocolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddNode",
        __Marshaller_NodeRequest,
        __Marshaller_ProtocolReply);

    static readonly grpc::Method<global::Core.SetBanRequest, global::Core.ProtocolReply> __Method_SetBan = new grpc::Method<global::Core.SetBanRequest, global::Core.ProtocolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetBan",
        __Marshaller_SetBanRequest,
        __Marshaller_ProtocolReply);

    static readonly grpc::Method<global::Core.GetInfoRequest, global::Core.GetInfoReply> __Method_GetInfo = new grpc::Method<global::Core.GetInfoRequest, global::Core.GetInfoReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetInfo",
        __Marshaller_GetInfoRequest,
        __Marshaller_GetInfoReply);

    static readonly grpc::Method<global::Core.GetDiagnosticInfoRequest, global::Core.GetDiagnosticInfoReply> __Method_GetDiagnosticInfo = new grpc::Method<global::Core.GetDiagnosticInfoRequest, global::Core.GetDiagnosticInfoReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDiagnosticInfo",
        __Marshaller_GetDiagnosticInfoRequest,
        __Marshaller_GetDiagnosticInfoReply);

    static readonly grpc::Method<global::Core.NodeRequest, global::Core.ProtocolReply> __Method_RemoveNode = new grpc::Method<global::Core.NodeRequest, global::Core.ProtocolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RemoveNode",
        __Marshaller_NodeRequest,
        __Marshaller_ProtocolReply);

    static readonly grpc::Method<global::Core.StopPoolRequest, global::Core.StopPoolReply> __Method_StopPool = new grpc::Method<global::Core.StopPoolRequest, global::Core.StopPoolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StopPool",
        __Marshaller_StopPoolRequest,
        __Marshaller_StopPoolReply);

    static readonly grpc::Method<global::Core.SubmitPopRequest, global::Core.ProtocolReply> __Method_SubmitPop = new grpc::Method<global::Core.SubmitPopRequest, global::Core.ProtocolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubmitPop",
        __Marshaller_SubmitPopRequest,
        __Marshaller_ProtocolReply);

    static readonly grpc::Method<global::Core.SendCoinsRequest, global::Core.SendCoinsReply> __Method_SendCoins = new grpc::Method<global::Core.SendCoinsRequest, global::Core.SendCoinsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendCoins",
        __Marshaller_SendCoinsRequest,
        __Marshaller_SendCoinsReply);

    static readonly grpc::Method<global::Core.SendAltChainEndorsementRequest, global::Core.SendAltChainEndorsementReply> __Method_SendAltChainEndorsement = new grpc::Method<global::Core.SendAltChainEndorsementRequest, global::Core.SendAltChainEndorsementReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SendAltChainEndorsement",
        __Marshaller_SendAltChainEndorsementRequest,
        __Marshaller_SendAltChainEndorsementReply);

    static readonly grpc::Method<global::Core.GetBlocksRequest, global::Core.GetBlocksReply> __Method_GetBlocks = new grpc::Method<global::Core.GetBlocksRequest, global::Core.GetBlocksReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlocks",
        __Marshaller_GetBlocksRequest,
        __Marshaller_GetBlocksReply);

    static readonly grpc::Method<global::Core.StartPoolRequest, global::Core.StartPoolReply> __Method_StartPool = new grpc::Method<global::Core.StartPoolRequest, global::Core.StartPoolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartPool",
        __Marshaller_StartPoolRequest,
        __Marshaller_StartPoolReply);

    static readonly grpc::Method<global::Core.RestartPoolWebServerRequest, global::Core.RestartPoolWebServerReply> __Method_RestartPoolWebServer = new grpc::Method<global::Core.RestartPoolWebServerRequest, global::Core.RestartPoolWebServerReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RestartPoolWebServer",
        __Marshaller_RestartPoolWebServerRequest,
        __Marshaller_RestartPoolWebServerReply);

    static readonly grpc::Method<global::Core.GetHistoryRequest, global::Core.GetHistoryReply> __Method_GetHistory = new grpc::Method<global::Core.GetHistoryRequest, global::Core.GetHistoryReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetHistory",
        __Marshaller_GetHistoryRequest,
        __Marshaller_GetHistoryReply);

    static readonly grpc::Method<global::Core.GetBalanceRequest, global::Core.GetBalanceReply> __Method_GetBalance = new grpc::Method<global::Core.GetBalanceRequest, global::Core.GetBalanceReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBalance",
        __Marshaller_GetBalanceRequest,
        __Marshaller_GetBalanceReply);

    static readonly grpc::Method<global::Core.SetAllowedRequest, global::Core.ProtocolReply> __Method_SetAllowed = new grpc::Method<global::Core.SetAllowedRequest, global::Core.ProtocolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetAllowed",
        __Marshaller_SetAllowedRequest,
        __Marshaller_ProtocolReply);

    static readonly grpc::Method<global::Core.ListBannedRequest, global::Core.ListBannedReply> __Method_ListBanned = new grpc::Method<global::Core.ListBannedRequest, global::Core.ListBannedReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListBanned",
        __Marshaller_ListBannedRequest,
        __Marshaller_ListBannedReply);

    static readonly grpc::Method<global::Core.ListBannedMinersRequest, global::Core.ListBannedMinersReply> __Method_ListBannedMiners = new grpc::Method<global::Core.ListBannedMinersRequest, global::Core.ListBannedMinersReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListBannedMiners",
        __Marshaller_ListBannedMinersRequest,
        __Marshaller_ListBannedMinersReply);

    static readonly grpc::Method<global::Core.ClearBannedRequest, global::Core.ProtocolReply> __Method_ClearBanned = new grpc::Method<global::Core.ClearBannedRequest, global::Core.ProtocolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ClearBanned",
        __Marshaller_ClearBannedRequest,
        __Marshaller_ProtocolReply);

    static readonly grpc::Method<global::Core.ClearBannedMinersRequest, global::Core.ProtocolReply> __Method_ClearBannedMiners = new grpc::Method<global::Core.ClearBannedMinersRequest, global::Core.ProtocolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ClearBannedMiners",
        __Marshaller_ClearBannedMinersRequest,
        __Marshaller_ProtocolReply);

    static readonly grpc::Method<global::Core.SubmitBlocksRequest, global::Core.ProtocolReply> __Method_SubmitBlocks = new grpc::Method<global::Core.SubmitBlocksRequest, global::Core.ProtocolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubmitBlocks",
        __Marshaller_SubmitBlocksRequest,
        __Marshaller_ProtocolReply);

    static readonly grpc::Method<global::Core.ClearAllowedRequest, global::Core.ProtocolReply> __Method_ClearAllowed = new grpc::Method<global::Core.ClearAllowedRequest, global::Core.ProtocolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ClearAllowed",
        __Marshaller_ClearAllowedRequest,
        __Marshaller_ProtocolReply);

    static readonly grpc::Method<global::Core.GetPeerInfoRequest, global::Core.GetPeerInfoReply> __Method_GetPeerInfo = new grpc::Method<global::Core.GetPeerInfoRequest, global::Core.GetPeerInfoReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPeerInfo",
        __Marshaller_GetPeerInfoRequest,
        __Marshaller_GetPeerInfoReply);

    static readonly grpc::Method<global::Core.SignMessageRequest, global::Core.SignMessageReply> __Method_SignMessage = new grpc::Method<global::Core.SignMessageRequest, global::Core.SignMessageReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SignMessage",
        __Marshaller_SignMessageRequest,
        __Marshaller_SignMessageReply);

    static readonly grpc::Method<global::Core.ListAllowedRequest, global::Core.ListAllowedReply> __Method_ListAllowed = new grpc::Method<global::Core.ListAllowedRequest, global::Core.ListAllowedReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListAllowed",
        __Marshaller_ListAllowedRequest,
        __Marshaller_ListAllowedReply);

    static readonly grpc::Method<global::Core.BackupWalletRequest, global::Core.BackupWalletReply> __Method_BackupWallet = new grpc::Method<global::Core.BackupWalletRequest, global::Core.BackupWalletReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BackupWallet",
        __Marshaller_BackupWalletRequest,
        __Marshaller_BackupWalletReply);

    static readonly grpc::Method<global::Core.ImportWalletRequest, global::Core.ImportWalletReply> __Method_ImportWallet = new grpc::Method<global::Core.ImportWalletRequest, global::Core.ImportWalletReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ImportWallet",
        __Marshaller_ImportWalletRequest,
        __Marshaller_ImportWalletReply);

    static readonly grpc::Method<global::Core.GetNewAddressRequest, global::Core.GetNewAddressReply> __Method_GetNewAddress = new grpc::Method<global::Core.GetNewAddressRequest, global::Core.GetNewAddressReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetNewAddress",
        __Marshaller_GetNewAddressRequest,
        __Marshaller_GetNewAddressReply);

    static readonly grpc::Method<global::Core.GetBlockTimesRequest, global::Core.GetBlockTimesReply> __Method_GetBlockTimes = new grpc::Method<global::Core.GetBlockTimesRequest, global::Core.GetBlockTimesReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockTimes",
        __Marshaller_GetBlockTimesRequest,
        __Marshaller_GetBlockTimesReply);

    static readonly grpc::Method<global::Core.StartSoloPoolRequest, global::Core.StartSoloPoolReply> __Method_StartSoloPool = new grpc::Method<global::Core.StartSoloPoolRequest, global::Core.StartSoloPoolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StartSoloPool",
        __Marshaller_StartSoloPoolRequest,
        __Marshaller_StartSoloPoolReply);

    static readonly grpc::Method<global::Core.GetBlockchainsRequest, global::Core.GetBlockchainsReply> __Method_GetBlockchains = new grpc::Method<global::Core.GetBlockchainsRequest, global::Core.GetBlockchainsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockchains",
        __Marshaller_GetBlockchainsRequest,
        __Marshaller_GetBlockchainsReply);

    static readonly grpc::Method<global::Core.SetTransactionFeeRequest, global::Core.ProtocolReply> __Method_SetTransactionFee = new grpc::Method<global::Core.SetTransactionFeeRequest, global::Core.ProtocolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetTransactionFee",
        __Marshaller_SetTransactionFeeRequest,
        __Marshaller_ProtocolReply);

    static readonly grpc::Method<global::Core.DumpPrivateKeyRequest, global::Core.DumpPrivateKeyReply> __Method_DumpPrivateKey = new grpc::Method<global::Core.DumpPrivateKeyRequest, global::Core.DumpPrivateKeyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DumpPrivateKey",
        __Marshaller_DumpPrivateKeyRequest,
        __Marshaller_DumpPrivateKeyReply);

    static readonly grpc::Method<global::Core.ImportPrivateKeyRequest, global::Core.ImportPrivateKeyReply> __Method_ImportPrivateKey = new grpc::Method<global::Core.ImportPrivateKeyRequest, global::Core.ImportPrivateKeyReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ImportPrivateKey",
        __Marshaller_ImportPrivateKeyRequest,
        __Marshaller_ImportPrivateKeyReply);

    static readonly grpc::Method<global::Core.SubmitTransactionsRequest, global::Core.ProtocolReply> __Method_SubmitTransactions = new grpc::Method<global::Core.SubmitTransactionsRequest, global::Core.ProtocolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubmitTransactions",
        __Marshaller_SubmitTransactionsRequest,
        __Marshaller_ProtocolReply);

    static readonly grpc::Method<global::Core.GetTransactionsRequest, global::Core.GetTransactionsReply> __Method_GetTransactions = new grpc::Method<global::Core.GetTransactionsRequest, global::Core.GetTransactionsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTransactions",
        __Marshaller_GetTransactionsRequest,
        __Marshaller_GetTransactionsReply);

    static readonly grpc::Method<global::Core.ValidateAddressRequest, global::Core.ValidateAddressReply> __Method_ValidateAddress = new grpc::Method<global::Core.ValidateAddressRequest, global::Core.ValidateAddressReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ValidateAddress",
        __Marshaller_ValidateAddressRequest,
        __Marshaller_ValidateAddressReply);

    static readonly grpc::Method<global::Core.GenerateMultisigAddressRequest, global::Core.GenerateMultisigAddressReply> __Method_GenerateMultisigAddress = new grpc::Method<global::Core.GenerateMultisigAddressRequest, global::Core.GenerateMultisigAddressReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GenerateMultisigAddress",
        __Marshaller_GenerateMultisigAddressRequest,
        __Marshaller_GenerateMultisigAddressReply);

    static readonly grpc::Method<global::Core.MakeUnsignedMultisigTxRequest, global::Core.MakeUnsignedMultisigTxReply> __Method_MakeUnsignedMultisigTx = new grpc::Method<global::Core.MakeUnsignedMultisigTxRequest, global::Core.MakeUnsignedMultisigTxReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "MakeUnsignedMultisigTx",
        __Marshaller_MakeUnsignedMultisigTxRequest,
        __Marshaller_MakeUnsignedMultisigTxReply);

    static readonly grpc::Method<global::Core.SubmitMultisigTxRequest, global::Core.SubmitMultisigTxReply> __Method_SubmitMultisigTx = new grpc::Method<global::Core.SubmitMultisigTxRequest, global::Core.SubmitMultisigTxReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SubmitMultisigTx",
        __Marshaller_SubmitMultisigTxRequest,
        __Marshaller_SubmitMultisigTxReply);

    static readonly grpc::Method<global::Core.GetBitcoinBlockIndexRequest, global::Core.ProtocolReply> __Method_GetBitcoinBlockIndex = new grpc::Method<global::Core.GetBitcoinBlockIndexRequest, global::Core.ProtocolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBitcoinBlockIndex",
        __Marshaller_GetBitcoinBlockIndexRequest,
        __Marshaller_ProtocolReply);

    static readonly grpc::Method<global::Core.GetBlockTemplateRequest, global::Core.GetBlockTemplateReply> __Method_GetBlockTemplate = new grpc::Method<global::Core.GetBlockTemplateRequest, global::Core.GetBlockTemplateReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBlockTemplate",
        __Marshaller_GetBlockTemplateRequest,
        __Marshaller_GetBlockTemplateReply);

    static readonly grpc::Method<global::Core.GetSignatureIndexRequest, global::Core.GetSignatureIndexReply> __Method_GetSignatureIndex = new grpc::Method<global::Core.GetSignatureIndexRequest, global::Core.GetSignatureIndexReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetSignatureIndex",
        __Marshaller_GetSignatureIndexRequest,
        __Marshaller_GetSignatureIndexReply);

    static readonly grpc::Method<global::Core.SetDefaultAddressRequest, global::Core.SetDefaultAddressReply> __Method_SetDefaultAddress = new grpc::Method<global::Core.SetDefaultAddressRequest, global::Core.SetDefaultAddressReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetDefaultAddress",
        __Marshaller_SetDefaultAddressRequest,
        __Marshaller_SetDefaultAddressReply);

    static readonly grpc::Method<global::Core.GetLastBitcoinBlockRequest, global::Core.GetLastBitcoinBlockReply> __Method_GetLastBitcoinBlock = new grpc::Method<global::Core.GetLastBitcoinBlockRequest, global::Core.GetLastBitcoinBlockReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLastBitcoinBlock",
        __Marshaller_GetLastBitcoinBlockRequest,
        __Marshaller_GetLastBitcoinBlockReply);

    static readonly grpc::Method<global::Core.GetProtectedChildrenRequest, global::Core.GetProtectedChildrenReply> __Method_GetProtectedChildren = new grpc::Method<global::Core.GetProtectedChildrenRequest, global::Core.GetProtectedChildrenReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProtectedChildren",
        __Marshaller_GetProtectedChildrenRequest,
        __Marshaller_GetProtectedChildrenReply);

    static readonly grpc::Method<global::Core.GetProtectingParentsRequest, global::Core.GetProtectingParentsReply> __Method_GetProtectingParents = new grpc::Method<global::Core.GetProtectingParentsRequest, global::Core.GetProtectingParentsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetProtectingParents",
        __Marshaller_GetProtectingParentsRequest,
        __Marshaller_GetProtectingParentsReply);

    static readonly grpc::Method<global::Core.GetWalletTransactionsRequest, global::Core.GetWalletTransactionsReply> __Method_GetWalletTransactions = new grpc::Method<global::Core.GetWalletTransactionsRequest, global::Core.GetWalletTransactionsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetWalletTransactions",
        __Marshaller_GetWalletTransactionsRequest,
        __Marshaller_GetWalletTransactionsReply);

    static readonly grpc::Method<global::Core.GetEndorsementsOfBlockRequest, global::Core.GetEndorsementsOfBlockReply> __Method_GetEndorsementsOfBlock = new grpc::Method<global::Core.GetEndorsementsOfBlockRequest, global::Core.GetEndorsementsOfBlockReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetEndorsementsOfBlock",
        __Marshaller_GetEndorsementsOfBlockRequest,
        __Marshaller_GetEndorsementsOfBlockReply);

    static readonly grpc::Method<global::Core.GetPendingTransactionsRequest, global::Core.GetPendingTransactionsReply> __Method_GetPendingTransactions = new grpc::Method<global::Core.GetPendingTransactionsRequest, global::Core.GetPendingTransactionsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPendingTransactions",
        __Marshaller_GetPendingTransactionsRequest,
        __Marshaller_GetPendingTransactionsReply);

    static readonly grpc::Method<global::Core.GetPoPEndorsementsInfoRequest, global::Core.GetPoPEndorsementsInfoReply> __Method_GetPoPEndorsementsInfo = new grpc::Method<global::Core.GetPoPEndorsementsInfoRequest, global::Core.GetPoPEndorsementsInfoReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetPoPEndorsementsInfo",
        __Marshaller_GetPoPEndorsementsInfoRequest,
        __Marshaller_GetPoPEndorsementsInfoReply);

    static readonly grpc::Method<global::Core.PingRequest, global::Core.PingReply> __Method_Ping = new grpc::Method<global::Core.PingRequest, global::Core.PingReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Ping",
        __Marshaller_PingRequest,
        __Marshaller_PingReply);

    static readonly grpc::Method<global::Core.GetStateInfoRequest, global::Core.GetStateInfoReply> __Method_GetStateInfo = new grpc::Method<global::Core.GetStateInfoRequest, global::Core.GetStateInfoReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetStateInfo",
        __Marshaller_GetStateInfoRequest,
        __Marshaller_GetStateInfoReply);

    static readonly grpc::Method<global::Core.GetLastBlockRequest, global::Core.GetLastBlockReply> __Method_GetLastBlock = new grpc::Method<global::Core.GetLastBlockRequest, global::Core.GetLastBlockReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLastBlock",
        __Marshaller_GetLastBlockRequest,
        __Marshaller_GetLastBlockReply);

    static readonly grpc::Method<global::Core.ListBlocksSinceRequest, global::Core.ListBlocksSinceReply> __Method_ListBlocksSince = new grpc::Method<global::Core.ListBlocksSinceRequest, global::Core.ListBlocksSinceReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListBlocksSince",
        __Marshaller_ListBlocksSinceRequest,
        __Marshaller_ListBlocksSinceReply);

    static readonly grpc::Method<global::Core.TroubleshootPoPTransactionsRequest, global::Core.TroubleshootPoPTransactionsReply> __Method_TroubleshootPoPTransactions = new grpc::Method<global::Core.TroubleshootPoPTransactionsRequest, global::Core.TroubleshootPoPTransactionsReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TroubleshootPoPTransactions",
        __Marshaller_TroubleshootPoPTransactionsRequest,
        __Marshaller_TroubleshootPoPTransactionsReply);

    static readonly grpc::Method<global::Core.StopNodeCoreRequest, global::Core.ProtocolReply> __Method_StopNodeCore = new grpc::Method<global::Core.StopNodeCoreRequest, global::Core.ProtocolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "StopNodeCore",
        __Marshaller_StopNodeCoreRequest,
        __Marshaller_ProtocolReply);

    static readonly grpc::Method<global::Core.RefreshWalletCacheRequest, global::Core.ProtocolReply> __Method_RefreshWalletCache = new grpc::Method<global::Core.RefreshWalletCacheRequest, global::Core.ProtocolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RefreshWalletCache",
        __Marshaller_RefreshWalletCacheRequest,
        __Marshaller_ProtocolReply);

    static readonly grpc::Method<global::Core.EncryptWalletRequest, global::Core.ProtocolReply> __Method_EncryptWallet = new grpc::Method<global::Core.EncryptWalletRequest, global::Core.ProtocolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "EncryptWallet",
        __Marshaller_EncryptWalletRequest,
        __Marshaller_ProtocolReply);

    static readonly grpc::Method<global::Core.DecryptWalletRequest, global::Core.ProtocolReply> __Method_DecryptWallet = new grpc::Method<global::Core.DecryptWalletRequest, global::Core.ProtocolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DecryptWallet",
        __Marshaller_DecryptWalletRequest,
        __Marshaller_ProtocolReply);

    static readonly grpc::Method<global::Core.UnlockWalletRequest, global::Core.ProtocolReply> __Method_UnlockWallet = new grpc::Method<global::Core.UnlockWalletRequest, global::Core.ProtocolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UnlockWallet",
        __Marshaller_UnlockWalletRequest,
        __Marshaller_ProtocolReply);

    static readonly grpc::Method<global::Core.LockWalletRequest, global::Core.ProtocolReply> __Method_LockWallet = new grpc::Method<global::Core.LockWalletRequest, global::Core.ProtocolReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LockWallet",
        __Marshaller_LockWalletRequest,
        __Marshaller_ProtocolReply);

    static readonly grpc::Method<global::Core.DrainAddressRequest, global::Core.DrainAddressReply> __Method_DrainAddress = new grpc::Method<global::Core.DrainAddressRequest, global::Core.DrainAddressReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DrainAddress",
        __Marshaller_DrainAddressRequest,
        __Marshaller_DrainAddressReply);

    static readonly grpc::Method<global::Core.GetBalanceUnlockScheduleRequest, global::Core.GetBalanceUnlockScheduleReply> __Method_GetBalanceUnlockSchedule = new grpc::Method<global::Core.GetBalanceUnlockScheduleRequest, global::Core.GetBalanceUnlockScheduleReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBalanceUnlockSchedule",
        __Marshaller_GetBalanceUnlockScheduleRequest,
        __Marshaller_GetBalanceUnlockScheduleReply);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Core.VeriblockReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Admin</summary>
    public abstract partial class AdminBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Core.GetPopReply> GetPop(global::Core.GetPopRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.ProtocolReply> AddNode(global::Core.NodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.ProtocolReply> SetBan(global::Core.SetBanRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.GetInfoReply> GetInfo(global::Core.GetInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.GetDiagnosticInfoReply> GetDiagnosticInfo(global::Core.GetDiagnosticInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.ProtocolReply> RemoveNode(global::Core.NodeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.StopPoolReply> StopPool(global::Core.StopPoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.ProtocolReply> SubmitPop(global::Core.SubmitPopRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.SendCoinsReply> SendCoins(global::Core.SendCoinsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.SendAltChainEndorsementReply> SendAltChainEndorsement(global::Core.SendAltChainEndorsementRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.GetBlocksReply> GetBlocks(global::Core.GetBlocksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.StartPoolReply> StartPool(global::Core.StartPoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.RestartPoolWebServerReply> RestartPoolWebServer(global::Core.RestartPoolWebServerRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.GetHistoryReply> GetHistory(global::Core.GetHistoryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.GetBalanceReply> GetBalance(global::Core.GetBalanceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.ProtocolReply> SetAllowed(global::Core.SetAllowedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.ListBannedReply> ListBanned(global::Core.ListBannedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.ListBannedMinersReply> ListBannedMiners(global::Core.ListBannedMinersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.ProtocolReply> ClearBanned(global::Core.ClearBannedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.ProtocolReply> ClearBannedMiners(global::Core.ClearBannedMinersRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.ProtocolReply> SubmitBlocks(global::Core.SubmitBlocksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.ProtocolReply> ClearAllowed(global::Core.ClearAllowedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.GetPeerInfoReply> GetPeerInfo(global::Core.GetPeerInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.SignMessageReply> SignMessage(global::Core.SignMessageRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.ListAllowedReply> ListAllowed(global::Core.ListAllowedRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.BackupWalletReply> BackupWallet(global::Core.BackupWalletRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.ImportWalletReply> ImportWallet(global::Core.ImportWalletRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.GetNewAddressReply> GetNewAddress(global::Core.GetNewAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.GetBlockTimesReply> GetBlockTimes(global::Core.GetBlockTimesRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.StartSoloPoolReply> StartSoloPool(global::Core.StartSoloPoolRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.GetBlockchainsReply> GetBlockchains(global::Core.GetBlockchainsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.ProtocolReply> SetTransactionFee(global::Core.SetTransactionFeeRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.DumpPrivateKeyReply> DumpPrivateKey(global::Core.DumpPrivateKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.ImportPrivateKeyReply> ImportPrivateKey(global::Core.ImportPrivateKeyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.ProtocolReply> SubmitTransactions(global::Core.SubmitTransactionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.GetTransactionsReply> GetTransactions(global::Core.GetTransactionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.ValidateAddressReply> ValidateAddress(global::Core.ValidateAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.GenerateMultisigAddressReply> GenerateMultisigAddress(global::Core.GenerateMultisigAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.MakeUnsignedMultisigTxReply> MakeUnsignedMultisigTx(global::Core.MakeUnsignedMultisigTxRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.SubmitMultisigTxReply> SubmitMultisigTx(global::Core.SubmitMultisigTxRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.ProtocolReply> GetBitcoinBlockIndex(global::Core.GetBitcoinBlockIndexRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.GetBlockTemplateReply> GetBlockTemplate(global::Core.GetBlockTemplateRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.GetSignatureIndexReply> GetSignatureIndex(global::Core.GetSignatureIndexRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.SetDefaultAddressReply> SetDefaultAddress(global::Core.SetDefaultAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.GetLastBitcoinBlockReply> GetLastBitcoinBlock(global::Core.GetLastBitcoinBlockRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.GetProtectedChildrenReply> GetProtectedChildren(global::Core.GetProtectedChildrenRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.GetProtectingParentsReply> GetProtectingParents(global::Core.GetProtectingParentsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.GetWalletTransactionsReply> GetWalletTransactions(global::Core.GetWalletTransactionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.GetEndorsementsOfBlockReply> GetEndorsementsOfBlock(global::Core.GetEndorsementsOfBlockRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.GetPendingTransactionsReply> GetPendingTransactions(global::Core.GetPendingTransactionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.GetPoPEndorsementsInfoReply> GetPoPEndorsementsInfo(global::Core.GetPoPEndorsementsInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.PingReply> Ping(global::Core.PingRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.GetStateInfoReply> GetStateInfo(global::Core.GetStateInfoRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.GetLastBlockReply> GetLastBlock(global::Core.GetLastBlockRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.ListBlocksSinceReply> ListBlocksSince(global::Core.ListBlocksSinceRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.TroubleshootPoPTransactionsReply> TroubleshootPoPTransactions(global::Core.TroubleshootPoPTransactionsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.ProtocolReply> StopNodeCore(global::Core.StopNodeCoreRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.ProtocolReply> RefreshWalletCache(global::Core.RefreshWalletCacheRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.ProtocolReply> EncryptWallet(global::Core.EncryptWalletRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.ProtocolReply> DecryptWallet(global::Core.DecryptWalletRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.ProtocolReply> UnlockWallet(global::Core.UnlockWalletRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.ProtocolReply> LockWallet(global::Core.LockWalletRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.DrainAddressReply> DrainAddress(global::Core.DrainAddressRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task<global::Core.GetBalanceUnlockScheduleReply> GetBalanceUnlockSchedule(global::Core.GetBalanceUnlockScheduleRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Admin</summary>
    public partial class AdminClient : grpc::ClientBase<AdminClient>
    {
      /// <summary>Creates a new client for Admin</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public AdminClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Admin that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public AdminClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected AdminClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected AdminClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Core.GetPopReply GetPop(global::Core.GetPopRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetPop(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.GetPopReply GetPop(global::Core.GetPopRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPop, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetPopReply> GetPopAsync(global::Core.GetPopRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetPopAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetPopReply> GetPopAsync(global::Core.GetPopRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPop, null, options, request);
      }
      public virtual global::Core.ProtocolReply AddNode(global::Core.NodeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddNode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.ProtocolReply AddNode(global::Core.NodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddNode, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> AddNodeAsync(global::Core.NodeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return AddNodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> AddNodeAsync(global::Core.NodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddNode, null, options, request);
      }
      public virtual global::Core.ProtocolReply SetBan(global::Core.SetBanRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetBan(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.ProtocolReply SetBan(global::Core.SetBanRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetBan, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> SetBanAsync(global::Core.SetBanRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetBanAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> SetBanAsync(global::Core.SetBanRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetBan, null, options, request);
      }
      public virtual global::Core.GetInfoReply GetInfo(global::Core.GetInfoRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.GetInfoReply GetInfo(global::Core.GetInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetInfoReply> GetInfoAsync(global::Core.GetInfoRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetInfoReply> GetInfoAsync(global::Core.GetInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetInfo, null, options, request);
      }
      public virtual global::Core.GetDiagnosticInfoReply GetDiagnosticInfo(global::Core.GetDiagnosticInfoRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDiagnosticInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.GetDiagnosticInfoReply GetDiagnosticInfo(global::Core.GetDiagnosticInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDiagnosticInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetDiagnosticInfoReply> GetDiagnosticInfoAsync(global::Core.GetDiagnosticInfoRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetDiagnosticInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetDiagnosticInfoReply> GetDiagnosticInfoAsync(global::Core.GetDiagnosticInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDiagnosticInfo, null, options, request);
      }
      public virtual global::Core.ProtocolReply RemoveNode(global::Core.NodeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RemoveNode(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.ProtocolReply RemoveNode(global::Core.NodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RemoveNode, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> RemoveNodeAsync(global::Core.NodeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RemoveNodeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> RemoveNodeAsync(global::Core.NodeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RemoveNode, null, options, request);
      }
      public virtual global::Core.StopPoolReply StopPool(global::Core.StopPoolRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StopPool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.StopPoolReply StopPool(global::Core.StopPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StopPool, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.StopPoolReply> StopPoolAsync(global::Core.StopPoolRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StopPoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.StopPoolReply> StopPoolAsync(global::Core.StopPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StopPool, null, options, request);
      }
      public virtual global::Core.ProtocolReply SubmitPop(global::Core.SubmitPopRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SubmitPop(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.ProtocolReply SubmitPop(global::Core.SubmitPopRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubmitPop, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> SubmitPopAsync(global::Core.SubmitPopRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SubmitPopAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> SubmitPopAsync(global::Core.SubmitPopRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubmitPop, null, options, request);
      }
      public virtual global::Core.SendCoinsReply SendCoins(global::Core.SendCoinsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendCoins(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.SendCoinsReply SendCoins(global::Core.SendCoinsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendCoins, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.SendCoinsReply> SendCoinsAsync(global::Core.SendCoinsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendCoinsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.SendCoinsReply> SendCoinsAsync(global::Core.SendCoinsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendCoins, null, options, request);
      }
      public virtual global::Core.SendAltChainEndorsementReply SendAltChainEndorsement(global::Core.SendAltChainEndorsementRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendAltChainEndorsement(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.SendAltChainEndorsementReply SendAltChainEndorsement(global::Core.SendAltChainEndorsementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SendAltChainEndorsement, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.SendAltChainEndorsementReply> SendAltChainEndorsementAsync(global::Core.SendAltChainEndorsementRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SendAltChainEndorsementAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.SendAltChainEndorsementReply> SendAltChainEndorsementAsync(global::Core.SendAltChainEndorsementRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SendAltChainEndorsement, null, options, request);
      }
      public virtual global::Core.GetBlocksReply GetBlocks(global::Core.GetBlocksRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetBlocks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.GetBlocksReply GetBlocks(global::Core.GetBlocksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlocks, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetBlocksReply> GetBlocksAsync(global::Core.GetBlocksRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetBlocksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetBlocksReply> GetBlocksAsync(global::Core.GetBlocksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlocks, null, options, request);
      }
      public virtual global::Core.StartPoolReply StartPool(global::Core.StartPoolRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StartPool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.StartPoolReply StartPool(global::Core.StartPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartPool, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.StartPoolReply> StartPoolAsync(global::Core.StartPoolRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StartPoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.StartPoolReply> StartPoolAsync(global::Core.StartPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartPool, null, options, request);
      }
      public virtual global::Core.RestartPoolWebServerReply RestartPoolWebServer(global::Core.RestartPoolWebServerRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RestartPoolWebServer(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.RestartPoolWebServerReply RestartPoolWebServer(global::Core.RestartPoolWebServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RestartPoolWebServer, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.RestartPoolWebServerReply> RestartPoolWebServerAsync(global::Core.RestartPoolWebServerRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RestartPoolWebServerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.RestartPoolWebServerReply> RestartPoolWebServerAsync(global::Core.RestartPoolWebServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RestartPoolWebServer, null, options, request);
      }
      public virtual global::Core.GetHistoryReply GetHistory(global::Core.GetHistoryRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetHistory(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.GetHistoryReply GetHistory(global::Core.GetHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetHistory, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetHistoryReply> GetHistoryAsync(global::Core.GetHistoryRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetHistoryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetHistoryReply> GetHistoryAsync(global::Core.GetHistoryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetHistory, null, options, request);
      }
      public virtual global::Core.GetBalanceReply GetBalance(global::Core.GetBalanceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetBalance(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.GetBalanceReply GetBalance(global::Core.GetBalanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBalance, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetBalanceReply> GetBalanceAsync(global::Core.GetBalanceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetBalanceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetBalanceReply> GetBalanceAsync(global::Core.GetBalanceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBalance, null, options, request);
      }
      public virtual global::Core.ProtocolReply SetAllowed(global::Core.SetAllowedRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetAllowed(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.ProtocolReply SetAllowed(global::Core.SetAllowedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetAllowed, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> SetAllowedAsync(global::Core.SetAllowedRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetAllowedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> SetAllowedAsync(global::Core.SetAllowedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetAllowed, null, options, request);
      }
      public virtual global::Core.ListBannedReply ListBanned(global::Core.ListBannedRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListBanned(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.ListBannedReply ListBanned(global::Core.ListBannedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListBanned, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ListBannedReply> ListBannedAsync(global::Core.ListBannedRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListBannedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ListBannedReply> ListBannedAsync(global::Core.ListBannedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListBanned, null, options, request);
      }
      public virtual global::Core.ListBannedMinersReply ListBannedMiners(global::Core.ListBannedMinersRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListBannedMiners(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.ListBannedMinersReply ListBannedMiners(global::Core.ListBannedMinersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListBannedMiners, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ListBannedMinersReply> ListBannedMinersAsync(global::Core.ListBannedMinersRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListBannedMinersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ListBannedMinersReply> ListBannedMinersAsync(global::Core.ListBannedMinersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListBannedMiners, null, options, request);
      }
      public virtual global::Core.ProtocolReply ClearBanned(global::Core.ClearBannedRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ClearBanned(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.ProtocolReply ClearBanned(global::Core.ClearBannedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ClearBanned, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> ClearBannedAsync(global::Core.ClearBannedRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ClearBannedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> ClearBannedAsync(global::Core.ClearBannedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ClearBanned, null, options, request);
      }
      public virtual global::Core.ProtocolReply ClearBannedMiners(global::Core.ClearBannedMinersRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ClearBannedMiners(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.ProtocolReply ClearBannedMiners(global::Core.ClearBannedMinersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ClearBannedMiners, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> ClearBannedMinersAsync(global::Core.ClearBannedMinersRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ClearBannedMinersAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> ClearBannedMinersAsync(global::Core.ClearBannedMinersRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ClearBannedMiners, null, options, request);
      }
      public virtual global::Core.ProtocolReply SubmitBlocks(global::Core.SubmitBlocksRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SubmitBlocks(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.ProtocolReply SubmitBlocks(global::Core.SubmitBlocksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubmitBlocks, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> SubmitBlocksAsync(global::Core.SubmitBlocksRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SubmitBlocksAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> SubmitBlocksAsync(global::Core.SubmitBlocksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubmitBlocks, null, options, request);
      }
      public virtual global::Core.ProtocolReply ClearAllowed(global::Core.ClearAllowedRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ClearAllowed(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.ProtocolReply ClearAllowed(global::Core.ClearAllowedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ClearAllowed, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> ClearAllowedAsync(global::Core.ClearAllowedRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ClearAllowedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> ClearAllowedAsync(global::Core.ClearAllowedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ClearAllowed, null, options, request);
      }
      public virtual global::Core.GetPeerInfoReply GetPeerInfo(global::Core.GetPeerInfoRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetPeerInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.GetPeerInfoReply GetPeerInfo(global::Core.GetPeerInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPeerInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetPeerInfoReply> GetPeerInfoAsync(global::Core.GetPeerInfoRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetPeerInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetPeerInfoReply> GetPeerInfoAsync(global::Core.GetPeerInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPeerInfo, null, options, request);
      }
      public virtual global::Core.SignMessageReply SignMessage(global::Core.SignMessageRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SignMessage(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.SignMessageReply SignMessage(global::Core.SignMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SignMessage, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.SignMessageReply> SignMessageAsync(global::Core.SignMessageRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SignMessageAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.SignMessageReply> SignMessageAsync(global::Core.SignMessageRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SignMessage, null, options, request);
      }
      public virtual global::Core.ListAllowedReply ListAllowed(global::Core.ListAllowedRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListAllowed(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.ListAllowedReply ListAllowed(global::Core.ListAllowedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListAllowed, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ListAllowedReply> ListAllowedAsync(global::Core.ListAllowedRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListAllowedAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ListAllowedReply> ListAllowedAsync(global::Core.ListAllowedRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListAllowed, null, options, request);
      }
      public virtual global::Core.BackupWalletReply BackupWallet(global::Core.BackupWalletRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return BackupWallet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.BackupWalletReply BackupWallet(global::Core.BackupWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BackupWallet, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.BackupWalletReply> BackupWalletAsync(global::Core.BackupWalletRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return BackupWalletAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.BackupWalletReply> BackupWalletAsync(global::Core.BackupWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BackupWallet, null, options, request);
      }
      public virtual global::Core.ImportWalletReply ImportWallet(global::Core.ImportWalletRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ImportWallet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.ImportWalletReply ImportWallet(global::Core.ImportWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ImportWallet, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ImportWalletReply> ImportWalletAsync(global::Core.ImportWalletRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ImportWalletAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ImportWalletReply> ImportWalletAsync(global::Core.ImportWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ImportWallet, null, options, request);
      }
      public virtual global::Core.GetNewAddressReply GetNewAddress(global::Core.GetNewAddressRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetNewAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.GetNewAddressReply GetNewAddress(global::Core.GetNewAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetNewAddress, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetNewAddressReply> GetNewAddressAsync(global::Core.GetNewAddressRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetNewAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetNewAddressReply> GetNewAddressAsync(global::Core.GetNewAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetNewAddress, null, options, request);
      }
      public virtual global::Core.GetBlockTimesReply GetBlockTimes(global::Core.GetBlockTimesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetBlockTimes(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.GetBlockTimesReply GetBlockTimes(global::Core.GetBlockTimesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockTimes, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetBlockTimesReply> GetBlockTimesAsync(global::Core.GetBlockTimesRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetBlockTimesAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetBlockTimesReply> GetBlockTimesAsync(global::Core.GetBlockTimesRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockTimes, null, options, request);
      }
      public virtual global::Core.StartSoloPoolReply StartSoloPool(global::Core.StartSoloPoolRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StartSoloPool(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.StartSoloPoolReply StartSoloPool(global::Core.StartSoloPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StartSoloPool, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.StartSoloPoolReply> StartSoloPoolAsync(global::Core.StartSoloPoolRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StartSoloPoolAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.StartSoloPoolReply> StartSoloPoolAsync(global::Core.StartSoloPoolRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StartSoloPool, null, options, request);
      }
      public virtual global::Core.GetBlockchainsReply GetBlockchains(global::Core.GetBlockchainsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetBlockchains(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.GetBlockchainsReply GetBlockchains(global::Core.GetBlockchainsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockchains, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetBlockchainsReply> GetBlockchainsAsync(global::Core.GetBlockchainsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetBlockchainsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetBlockchainsReply> GetBlockchainsAsync(global::Core.GetBlockchainsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockchains, null, options, request);
      }
      public virtual global::Core.ProtocolReply SetTransactionFee(global::Core.SetTransactionFeeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetTransactionFee(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.ProtocolReply SetTransactionFee(global::Core.SetTransactionFeeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetTransactionFee, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> SetTransactionFeeAsync(global::Core.SetTransactionFeeRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetTransactionFeeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> SetTransactionFeeAsync(global::Core.SetTransactionFeeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetTransactionFee, null, options, request);
      }
      public virtual global::Core.DumpPrivateKeyReply DumpPrivateKey(global::Core.DumpPrivateKeyRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DumpPrivateKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.DumpPrivateKeyReply DumpPrivateKey(global::Core.DumpPrivateKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DumpPrivateKey, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.DumpPrivateKeyReply> DumpPrivateKeyAsync(global::Core.DumpPrivateKeyRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DumpPrivateKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.DumpPrivateKeyReply> DumpPrivateKeyAsync(global::Core.DumpPrivateKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DumpPrivateKey, null, options, request);
      }
      public virtual global::Core.ImportPrivateKeyReply ImportPrivateKey(global::Core.ImportPrivateKeyRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ImportPrivateKey(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.ImportPrivateKeyReply ImportPrivateKey(global::Core.ImportPrivateKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ImportPrivateKey, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ImportPrivateKeyReply> ImportPrivateKeyAsync(global::Core.ImportPrivateKeyRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ImportPrivateKeyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ImportPrivateKeyReply> ImportPrivateKeyAsync(global::Core.ImportPrivateKeyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ImportPrivateKey, null, options, request);
      }
      public virtual global::Core.ProtocolReply SubmitTransactions(global::Core.SubmitTransactionsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SubmitTransactions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.ProtocolReply SubmitTransactions(global::Core.SubmitTransactionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubmitTransactions, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> SubmitTransactionsAsync(global::Core.SubmitTransactionsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SubmitTransactionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> SubmitTransactionsAsync(global::Core.SubmitTransactionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubmitTransactions, null, options, request);
      }
      public virtual global::Core.GetTransactionsReply GetTransactions(global::Core.GetTransactionsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetTransactions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.GetTransactionsReply GetTransactions(global::Core.GetTransactionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTransactions, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetTransactionsReply> GetTransactionsAsync(global::Core.GetTransactionsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetTransactionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetTransactionsReply> GetTransactionsAsync(global::Core.GetTransactionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTransactions, null, options, request);
      }
      public virtual global::Core.ValidateAddressReply ValidateAddress(global::Core.ValidateAddressRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ValidateAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.ValidateAddressReply ValidateAddress(global::Core.ValidateAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ValidateAddress, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ValidateAddressReply> ValidateAddressAsync(global::Core.ValidateAddressRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ValidateAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ValidateAddressReply> ValidateAddressAsync(global::Core.ValidateAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ValidateAddress, null, options, request);
      }
      public virtual global::Core.GenerateMultisigAddressReply GenerateMultisigAddress(global::Core.GenerateMultisigAddressRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GenerateMultisigAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.GenerateMultisigAddressReply GenerateMultisigAddress(global::Core.GenerateMultisigAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GenerateMultisigAddress, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GenerateMultisigAddressReply> GenerateMultisigAddressAsync(global::Core.GenerateMultisigAddressRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GenerateMultisigAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GenerateMultisigAddressReply> GenerateMultisigAddressAsync(global::Core.GenerateMultisigAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GenerateMultisigAddress, null, options, request);
      }
      public virtual global::Core.MakeUnsignedMultisigTxReply MakeUnsignedMultisigTx(global::Core.MakeUnsignedMultisigTxRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MakeUnsignedMultisigTx(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.MakeUnsignedMultisigTxReply MakeUnsignedMultisigTx(global::Core.MakeUnsignedMultisigTxRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_MakeUnsignedMultisigTx, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.MakeUnsignedMultisigTxReply> MakeUnsignedMultisigTxAsync(global::Core.MakeUnsignedMultisigTxRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return MakeUnsignedMultisigTxAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.MakeUnsignedMultisigTxReply> MakeUnsignedMultisigTxAsync(global::Core.MakeUnsignedMultisigTxRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_MakeUnsignedMultisigTx, null, options, request);
      }
      public virtual global::Core.SubmitMultisigTxReply SubmitMultisigTx(global::Core.SubmitMultisigTxRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SubmitMultisigTx(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.SubmitMultisigTxReply SubmitMultisigTx(global::Core.SubmitMultisigTxRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SubmitMultisigTx, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.SubmitMultisigTxReply> SubmitMultisigTxAsync(global::Core.SubmitMultisigTxRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SubmitMultisigTxAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.SubmitMultisigTxReply> SubmitMultisigTxAsync(global::Core.SubmitMultisigTxRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SubmitMultisigTx, null, options, request);
      }
      public virtual global::Core.ProtocolReply GetBitcoinBlockIndex(global::Core.GetBitcoinBlockIndexRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetBitcoinBlockIndex(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.ProtocolReply GetBitcoinBlockIndex(global::Core.GetBitcoinBlockIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBitcoinBlockIndex, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> GetBitcoinBlockIndexAsync(global::Core.GetBitcoinBlockIndexRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetBitcoinBlockIndexAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> GetBitcoinBlockIndexAsync(global::Core.GetBitcoinBlockIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBitcoinBlockIndex, null, options, request);
      }
      public virtual global::Core.GetBlockTemplateReply GetBlockTemplate(global::Core.GetBlockTemplateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetBlockTemplate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.GetBlockTemplateReply GetBlockTemplate(global::Core.GetBlockTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBlockTemplate, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetBlockTemplateReply> GetBlockTemplateAsync(global::Core.GetBlockTemplateRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetBlockTemplateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetBlockTemplateReply> GetBlockTemplateAsync(global::Core.GetBlockTemplateRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBlockTemplate, null, options, request);
      }
      public virtual global::Core.GetSignatureIndexReply GetSignatureIndex(global::Core.GetSignatureIndexRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSignatureIndex(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.GetSignatureIndexReply GetSignatureIndex(global::Core.GetSignatureIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetSignatureIndex, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetSignatureIndexReply> GetSignatureIndexAsync(global::Core.GetSignatureIndexRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetSignatureIndexAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetSignatureIndexReply> GetSignatureIndexAsync(global::Core.GetSignatureIndexRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetSignatureIndex, null, options, request);
      }
      public virtual global::Core.SetDefaultAddressReply SetDefaultAddress(global::Core.SetDefaultAddressRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetDefaultAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.SetDefaultAddressReply SetDefaultAddress(global::Core.SetDefaultAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetDefaultAddress, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.SetDefaultAddressReply> SetDefaultAddressAsync(global::Core.SetDefaultAddressRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return SetDefaultAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.SetDefaultAddressReply> SetDefaultAddressAsync(global::Core.SetDefaultAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetDefaultAddress, null, options, request);
      }
      public virtual global::Core.GetLastBitcoinBlockReply GetLastBitcoinBlock(global::Core.GetLastBitcoinBlockRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetLastBitcoinBlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.GetLastBitcoinBlockReply GetLastBitcoinBlock(global::Core.GetLastBitcoinBlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLastBitcoinBlock, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetLastBitcoinBlockReply> GetLastBitcoinBlockAsync(global::Core.GetLastBitcoinBlockRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetLastBitcoinBlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetLastBitcoinBlockReply> GetLastBitcoinBlockAsync(global::Core.GetLastBitcoinBlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLastBitcoinBlock, null, options, request);
      }
      public virtual global::Core.GetProtectedChildrenReply GetProtectedChildren(global::Core.GetProtectedChildrenRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProtectedChildren(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.GetProtectedChildrenReply GetProtectedChildren(global::Core.GetProtectedChildrenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProtectedChildren, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetProtectedChildrenReply> GetProtectedChildrenAsync(global::Core.GetProtectedChildrenRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProtectedChildrenAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetProtectedChildrenReply> GetProtectedChildrenAsync(global::Core.GetProtectedChildrenRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProtectedChildren, null, options, request);
      }
      public virtual global::Core.GetProtectingParentsReply GetProtectingParents(global::Core.GetProtectingParentsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProtectingParents(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.GetProtectingParentsReply GetProtectingParents(global::Core.GetProtectingParentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetProtectingParents, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetProtectingParentsReply> GetProtectingParentsAsync(global::Core.GetProtectingParentsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetProtectingParentsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetProtectingParentsReply> GetProtectingParentsAsync(global::Core.GetProtectingParentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetProtectingParents, null, options, request);
      }
      public virtual global::Core.GetWalletTransactionsReply GetWalletTransactions(global::Core.GetWalletTransactionsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetWalletTransactions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.GetWalletTransactionsReply GetWalletTransactions(global::Core.GetWalletTransactionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetWalletTransactions, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetWalletTransactionsReply> GetWalletTransactionsAsync(global::Core.GetWalletTransactionsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetWalletTransactionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetWalletTransactionsReply> GetWalletTransactionsAsync(global::Core.GetWalletTransactionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetWalletTransactions, null, options, request);
      }
      public virtual global::Core.GetEndorsementsOfBlockReply GetEndorsementsOfBlock(global::Core.GetEndorsementsOfBlockRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetEndorsementsOfBlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.GetEndorsementsOfBlockReply GetEndorsementsOfBlock(global::Core.GetEndorsementsOfBlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetEndorsementsOfBlock, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetEndorsementsOfBlockReply> GetEndorsementsOfBlockAsync(global::Core.GetEndorsementsOfBlockRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetEndorsementsOfBlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetEndorsementsOfBlockReply> GetEndorsementsOfBlockAsync(global::Core.GetEndorsementsOfBlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetEndorsementsOfBlock, null, options, request);
      }
      public virtual global::Core.GetPendingTransactionsReply GetPendingTransactions(global::Core.GetPendingTransactionsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetPendingTransactions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.GetPendingTransactionsReply GetPendingTransactions(global::Core.GetPendingTransactionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPendingTransactions, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetPendingTransactionsReply> GetPendingTransactionsAsync(global::Core.GetPendingTransactionsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetPendingTransactionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetPendingTransactionsReply> GetPendingTransactionsAsync(global::Core.GetPendingTransactionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPendingTransactions, null, options, request);
      }
      public virtual global::Core.GetPoPEndorsementsInfoReply GetPoPEndorsementsInfo(global::Core.GetPoPEndorsementsInfoRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetPoPEndorsementsInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.GetPoPEndorsementsInfoReply GetPoPEndorsementsInfo(global::Core.GetPoPEndorsementsInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetPoPEndorsementsInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetPoPEndorsementsInfoReply> GetPoPEndorsementsInfoAsync(global::Core.GetPoPEndorsementsInfoRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetPoPEndorsementsInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetPoPEndorsementsInfoReply> GetPoPEndorsementsInfoAsync(global::Core.GetPoPEndorsementsInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetPoPEndorsementsInfo, null, options, request);
      }
      public virtual global::Core.PingReply Ping(global::Core.PingRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Ping(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.PingReply Ping(global::Core.PingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Ping, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.PingReply> PingAsync(global::Core.PingRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return PingAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.PingReply> PingAsync(global::Core.PingRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Ping, null, options, request);
      }
      public virtual global::Core.GetStateInfoReply GetStateInfo(global::Core.GetStateInfoRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetStateInfo(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.GetStateInfoReply GetStateInfo(global::Core.GetStateInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetStateInfo, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetStateInfoReply> GetStateInfoAsync(global::Core.GetStateInfoRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetStateInfoAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetStateInfoReply> GetStateInfoAsync(global::Core.GetStateInfoRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetStateInfo, null, options, request);
      }
      public virtual global::Core.GetLastBlockReply GetLastBlock(global::Core.GetLastBlockRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetLastBlock(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.GetLastBlockReply GetLastBlock(global::Core.GetLastBlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLastBlock, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetLastBlockReply> GetLastBlockAsync(global::Core.GetLastBlockRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetLastBlockAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetLastBlockReply> GetLastBlockAsync(global::Core.GetLastBlockRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLastBlock, null, options, request);
      }
      public virtual global::Core.ListBlocksSinceReply ListBlocksSince(global::Core.ListBlocksSinceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListBlocksSince(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.ListBlocksSinceReply ListBlocksSince(global::Core.ListBlocksSinceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListBlocksSince, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ListBlocksSinceReply> ListBlocksSinceAsync(global::Core.ListBlocksSinceRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return ListBlocksSinceAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ListBlocksSinceReply> ListBlocksSinceAsync(global::Core.ListBlocksSinceRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListBlocksSince, null, options, request);
      }
      public virtual global::Core.TroubleshootPoPTransactionsReply TroubleshootPoPTransactions(global::Core.TroubleshootPoPTransactionsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return TroubleshootPoPTransactions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.TroubleshootPoPTransactionsReply TroubleshootPoPTransactions(global::Core.TroubleshootPoPTransactionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TroubleshootPoPTransactions, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.TroubleshootPoPTransactionsReply> TroubleshootPoPTransactionsAsync(global::Core.TroubleshootPoPTransactionsRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return TroubleshootPoPTransactionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.TroubleshootPoPTransactionsReply> TroubleshootPoPTransactionsAsync(global::Core.TroubleshootPoPTransactionsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TroubleshootPoPTransactions, null, options, request);
      }
      public virtual global::Core.ProtocolReply StopNodeCore(global::Core.StopNodeCoreRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StopNodeCore(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.ProtocolReply StopNodeCore(global::Core.StopNodeCoreRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_StopNodeCore, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> StopNodeCoreAsync(global::Core.StopNodeCoreRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return StopNodeCoreAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> StopNodeCoreAsync(global::Core.StopNodeCoreRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_StopNodeCore, null, options, request);
      }
      public virtual global::Core.ProtocolReply RefreshWalletCache(global::Core.RefreshWalletCacheRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RefreshWalletCache(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.ProtocolReply RefreshWalletCache(global::Core.RefreshWalletCacheRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RefreshWalletCache, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> RefreshWalletCacheAsync(global::Core.RefreshWalletCacheRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return RefreshWalletCacheAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> RefreshWalletCacheAsync(global::Core.RefreshWalletCacheRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RefreshWalletCache, null, options, request);
      }
      public virtual global::Core.ProtocolReply EncryptWallet(global::Core.EncryptWalletRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return EncryptWallet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.ProtocolReply EncryptWallet(global::Core.EncryptWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_EncryptWallet, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> EncryptWalletAsync(global::Core.EncryptWalletRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return EncryptWalletAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> EncryptWalletAsync(global::Core.EncryptWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_EncryptWallet, null, options, request);
      }
      public virtual global::Core.ProtocolReply DecryptWallet(global::Core.DecryptWalletRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DecryptWallet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.ProtocolReply DecryptWallet(global::Core.DecryptWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DecryptWallet, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> DecryptWalletAsync(global::Core.DecryptWalletRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DecryptWalletAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> DecryptWalletAsync(global::Core.DecryptWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DecryptWallet, null, options, request);
      }
      public virtual global::Core.ProtocolReply UnlockWallet(global::Core.UnlockWalletRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UnlockWallet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.ProtocolReply UnlockWallet(global::Core.UnlockWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UnlockWallet, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> UnlockWalletAsync(global::Core.UnlockWalletRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return UnlockWalletAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> UnlockWalletAsync(global::Core.UnlockWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UnlockWallet, null, options, request);
      }
      public virtual global::Core.ProtocolReply LockWallet(global::Core.LockWalletRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LockWallet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.ProtocolReply LockWallet(global::Core.LockWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LockWallet, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> LockWalletAsync(global::Core.LockWalletRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return LockWalletAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.ProtocolReply> LockWalletAsync(global::Core.LockWalletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LockWallet, null, options, request);
      }
      public virtual global::Core.DrainAddressReply DrainAddress(global::Core.DrainAddressRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DrainAddress(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.DrainAddressReply DrainAddress(global::Core.DrainAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DrainAddress, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.DrainAddressReply> DrainAddressAsync(global::Core.DrainAddressRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return DrainAddressAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.DrainAddressReply> DrainAddressAsync(global::Core.DrainAddressRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DrainAddress, null, options, request);
      }
      public virtual global::Core.GetBalanceUnlockScheduleReply GetBalanceUnlockSchedule(global::Core.GetBalanceUnlockScheduleRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetBalanceUnlockSchedule(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Core.GetBalanceUnlockScheduleReply GetBalanceUnlockSchedule(global::Core.GetBalanceUnlockScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBalanceUnlockSchedule, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetBalanceUnlockScheduleReply> GetBalanceUnlockScheduleAsync(global::Core.GetBalanceUnlockScheduleRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return GetBalanceUnlockScheduleAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Core.GetBalanceUnlockScheduleReply> GetBalanceUnlockScheduleAsync(global::Core.GetBalanceUnlockScheduleRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBalanceUnlockSchedule, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override AdminClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new AdminClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AdminBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_GetPop, serviceImpl.GetPop)
          .AddMethod(__Method_AddNode, serviceImpl.AddNode)
          .AddMethod(__Method_SetBan, serviceImpl.SetBan)
          .AddMethod(__Method_GetInfo, serviceImpl.GetInfo)
          .AddMethod(__Method_GetDiagnosticInfo, serviceImpl.GetDiagnosticInfo)
          .AddMethod(__Method_RemoveNode, serviceImpl.RemoveNode)
          .AddMethod(__Method_StopPool, serviceImpl.StopPool)
          .AddMethod(__Method_SubmitPop, serviceImpl.SubmitPop)
          .AddMethod(__Method_SendCoins, serviceImpl.SendCoins)
          .AddMethod(__Method_SendAltChainEndorsement, serviceImpl.SendAltChainEndorsement)
          .AddMethod(__Method_GetBlocks, serviceImpl.GetBlocks)
          .AddMethod(__Method_StartPool, serviceImpl.StartPool)
          .AddMethod(__Method_RestartPoolWebServer, serviceImpl.RestartPoolWebServer)
          .AddMethod(__Method_GetHistory, serviceImpl.GetHistory)
          .AddMethod(__Method_GetBalance, serviceImpl.GetBalance)
          .AddMethod(__Method_SetAllowed, serviceImpl.SetAllowed)
          .AddMethod(__Method_ListBanned, serviceImpl.ListBanned)
          .AddMethod(__Method_ListBannedMiners, serviceImpl.ListBannedMiners)
          .AddMethod(__Method_ClearBanned, serviceImpl.ClearBanned)
          .AddMethod(__Method_ClearBannedMiners, serviceImpl.ClearBannedMiners)
          .AddMethod(__Method_SubmitBlocks, serviceImpl.SubmitBlocks)
          .AddMethod(__Method_ClearAllowed, serviceImpl.ClearAllowed)
          .AddMethod(__Method_GetPeerInfo, serviceImpl.GetPeerInfo)
          .AddMethod(__Method_SignMessage, serviceImpl.SignMessage)
          .AddMethod(__Method_ListAllowed, serviceImpl.ListAllowed)
          .AddMethod(__Method_BackupWallet, serviceImpl.BackupWallet)
          .AddMethod(__Method_ImportWallet, serviceImpl.ImportWallet)
          .AddMethod(__Method_GetNewAddress, serviceImpl.GetNewAddress)
          .AddMethod(__Method_GetBlockTimes, serviceImpl.GetBlockTimes)
          .AddMethod(__Method_StartSoloPool, serviceImpl.StartSoloPool)
          .AddMethod(__Method_GetBlockchains, serviceImpl.GetBlockchains)
          .AddMethod(__Method_SetTransactionFee, serviceImpl.SetTransactionFee)
          .AddMethod(__Method_DumpPrivateKey, serviceImpl.DumpPrivateKey)
          .AddMethod(__Method_ImportPrivateKey, serviceImpl.ImportPrivateKey)
          .AddMethod(__Method_SubmitTransactions, serviceImpl.SubmitTransactions)
          .AddMethod(__Method_GetTransactions, serviceImpl.GetTransactions)
          .AddMethod(__Method_ValidateAddress, serviceImpl.ValidateAddress)
          .AddMethod(__Method_GenerateMultisigAddress, serviceImpl.GenerateMultisigAddress)
          .AddMethod(__Method_MakeUnsignedMultisigTx, serviceImpl.MakeUnsignedMultisigTx)
          .AddMethod(__Method_SubmitMultisigTx, serviceImpl.SubmitMultisigTx)
          .AddMethod(__Method_GetBitcoinBlockIndex, serviceImpl.GetBitcoinBlockIndex)
          .AddMethod(__Method_GetBlockTemplate, serviceImpl.GetBlockTemplate)
          .AddMethod(__Method_GetSignatureIndex, serviceImpl.GetSignatureIndex)
          .AddMethod(__Method_SetDefaultAddress, serviceImpl.SetDefaultAddress)
          .AddMethod(__Method_GetLastBitcoinBlock, serviceImpl.GetLastBitcoinBlock)
          .AddMethod(__Method_GetProtectedChildren, serviceImpl.GetProtectedChildren)
          .AddMethod(__Method_GetProtectingParents, serviceImpl.GetProtectingParents)
          .AddMethod(__Method_GetWalletTransactions, serviceImpl.GetWalletTransactions)
          .AddMethod(__Method_GetEndorsementsOfBlock, serviceImpl.GetEndorsementsOfBlock)
          .AddMethod(__Method_GetPendingTransactions, serviceImpl.GetPendingTransactions)
          .AddMethod(__Method_GetPoPEndorsementsInfo, serviceImpl.GetPoPEndorsementsInfo)
          .AddMethod(__Method_Ping, serviceImpl.Ping)
          .AddMethod(__Method_GetStateInfo, serviceImpl.GetStateInfo)
          .AddMethod(__Method_GetLastBlock, serviceImpl.GetLastBlock)
          .AddMethod(__Method_ListBlocksSince, serviceImpl.ListBlocksSince)
          .AddMethod(__Method_TroubleshootPoPTransactions, serviceImpl.TroubleshootPoPTransactions)
          .AddMethod(__Method_StopNodeCore, serviceImpl.StopNodeCore)
          .AddMethod(__Method_RefreshWalletCache, serviceImpl.RefreshWalletCache)
          .AddMethod(__Method_EncryptWallet, serviceImpl.EncryptWallet)
          .AddMethod(__Method_DecryptWallet, serviceImpl.DecryptWallet)
          .AddMethod(__Method_UnlockWallet, serviceImpl.UnlockWallet)
          .AddMethod(__Method_LockWallet, serviceImpl.LockWallet)
          .AddMethod(__Method_DrainAddress, serviceImpl.DrainAddress)
          .AddMethod(__Method_GetBalanceUnlockSchedule, serviceImpl.GetBalanceUnlockSchedule).Build();
    }

  }
}
#endregion
